var ve=Object.defineProperty;var Oe=Object.getPrototypeOf;var Me=Reflect.get;var be=o=>{throw TypeError(o)};var Ie=(o,t,e)=>t in o?ve(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var T=(o,t,e)=>Ie(o,typeof t!="symbol"?t+"":t,e),le=(o,t,e)=>t.has(o)||be("Cannot "+e);var B=(o,t,e)=>(le(o,t,"read from private field"),e?e.call(o):t.get(o)),q=(o,t,e)=>t.has(o)?be("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(o):t.set(o,e),z=(o,t,e,s)=>(le(o,t,"write to private field"),s?s.call(o,e):t.set(o,e),e),ee=(o,t,e)=>(le(o,t,"access private method"),e);var Ce=(o,t,e)=>Me(Oe(o),e,t);const h={toHit:{prop:"toHit",cls:"to hit",actionType:"attack",rollType:"attack"},damage:{prop:"damage",cls:"damage",actionType:"damage",rollType:"damage"},heal:{prop:"heal",cls:"heal",actionType:"heal",rollType:"heal"},save:{prop:"save",cls:"save",actionType:"save",rollType:"ability"},check:{prop:"check",cls:"check",actionType:"check",rollType:"ability"},custom:{prop:"custom",cls:"roll",actionType:"roll",rollType:"custom"},cast:{prop:"cast",cls:"cast",actionType:"cast",rollType:"cast"}},W="crlngn-ddb-bridge",V="crlngn-ddb-bridge",te=["%cCarolingian DDB Bridge","color: #003377; font-weight: bold;","|"],I={abilityCheck:"ability",abilitySave:"save",attack:"attack",check:"check",concentration:"concentration",damage:"damage",deathSave:"death",formula:"formula",healing:"heal",custom:"roll",skillCheck:"skill",toolCheck:"tool"},Pe=[{abbrev:"str",name:"strength"},{abbrev:"dex",name:"dexterity"},{abbrev:"con",name:"constitution"},{abbrev:"int",name:"intelligence"},{abbrev:"wis",name:"wisdom"},{abbrev:"cha",name:"charisma"}],O={CHAT_MESSAGE:"chatMessage",INIT:"init",READY:"ready",PRE_CREATE_CHAT_MESSAGE:"preCreateChatMessage",CREATE_CHAT_MESSAGE:"createChatMessage",RENDER_CHAT_MESSAGE:"renderChatMessage",CREATE_MEASURED_TEMPLATE:"createMeasuredTemplate",REFRESH_MEASURED_TEMPLATE:"refreshMeasuredTemplate",CLOSE_SETTINGS_CONFIG:"closeSettingsConfig"},R={PRE_ROLL_V2:"dnd5e.preRollV2",PRE_ROLL_ABILITY_TEST:"dnd5e.preRollAbilityTest",PRE_ROLL_ABILITY_SAVE:"dnd5e.preRollAbilitySave",PRE_ROLL_SAVING_THROW:"dnd5e.preRollSavingThrow",PRE_ROLL_ATTACK_V2:"dnd5e.preRollAttackV2",PRE_ROLL_CLASS_HIT_POINTS:"dnd5e.preRollClassHitPoints",PRE_ROLL_CONCENTRATION:"dnd5e.preRollConcentration",PRE_ROLL_DAMAGE_V2:"dnd5e.preRollDamageV2",PRE_ROLL_DEATH_SAVE:"dnd5e.preRollDeathSave",PRE_ROLL_FORMULA_V2:"dnd5e.preRollFormulaV2",PRE_ROLL_HIT_DIE_V2:"dnd5e.preRollHitDieV2",PRE_ROLL_INITIATIVE:"dnd5e.preRollInitiative",PRE_ROLL_NPC_HIT_POINTS:"dnd5e.preRollNPCHitPoints",PRE_ROLL_RECHARGE_V2:"dnd5e.preRollRechargeV2",PRE_ROLL_SKILL:"dnd5e.preRollSkill",PRE_ROLL_TOOL_CHECK:"dnd5e.preRollToolCheck",PRE_USE_ITEM:"dnd5e.preUseItem",ROLL_ABILITY_TEST:"dnd5e.rollAbilityTest",ROLL_ABILITY_SAVE:"dnd5e.rollAbilitySave",ROLL_ATTACK_V2:"dnd5e.rollAttackV2",ROLL_CLASS_HIT_POINTS:"dnd5e.rollClassHitPoints",ROLL_CONCENTRATION:"dnd5e.rollConcentration",ROLL_DEATH_SAVE:"dnd5e.rollDeathSave",ROLL_DAMAGE_V2:"dnd5e.rollDamageV2",ROLL_FORMULA_V2:"dnd5e.rollFormulaV2",ROLL_HIT_DIE_V2:"dnd5e.rollHitDieV2",ROLL_INITIATIVE:"dnd5e.rollInitiative",ROLL_NPC_HIT_POINTS:"dnd5e.rollNPCHitPoints",ROLL_RECHARGE_V2:"dnd5e.rollRechargeV2",ROLL_SKILL:"dnd5e.rollSkill",ROLL_TOOL_CHECK:"dnd5e.rollToolCheck",DISPLAY_CARD:"dnd5e.preDisplayCardV2",PRE_DISPLAY_CARD_V2:"dnd5e.preDisplayCardV2",RENDER_CHAT_MESSAGE:"dnd5e.renderChatMessage",PRE_LONG_REST:"dnd5e.preLongRest",PRE_REST_COMPLETED:"dnd5e.preRestCmpleted",PRE_SHORT_REST:"dnd5e.preShortRest",REST_COMPLETED:"dnd5e.restCmpleted",ACTIVITY_CONSUMPTION:"dnd5e.activityConsumption",POST_ACTIVITY_CONSUMPTION:"dnd5e.postActivityConsumption",POST_CREATE_USAGE_MESSAGE:"dnd5e.postCreateUsageMessage",POST_USE_ACTIVITY:"dnd5e.postUseActivity",PRE_ACTIVITY_CONSUMPTION:"dnd5e.preActivityConsumption",PRE_CREATE_USAGE_MESSAGE:"dnd5e.preCreateUsageMessage",PRE_USE_ACTIVITY:"dnd5e.preUseActivity"},Ne={READY:"socketlib.ready"},N={select:"select",checkbox:"checkbox"},F={client:"client",world:"world"},H={enableChatStyles:{tag:"enable-chat-styles",label:"Enable styles for chat messages",hint:"Adds styles to chat cards. When dark mode is selected on Foundry or DDB Gamelog, makes all chat cards dark as well. If you use my module Carolingian UI, you can disable this - both modules have dark mode for chat cards.",propType:Boolean,inputType:N.checkbox,default:!0,scope:F.client,config:!0,requiresReload:!0},ddbRollOwnership:{tag:"ddb-roll-ownership",label:"Roll Ownership",hint:"If you select Game master, the GM will be prompted to place templates for spells when needed. Option 2 will look for the user this actor is assigned to - if there is none, it will look for any user with 'owner' permission. Defaults to GM if no player is found.",propType:Number,choices:{1:"Game master",2:"Player who owns character"},inputType:N.select,default:2,scope:F.world,config:!0},forceDDBGL:{tag:"force-ddbgl-settings",label:"Force DDB Gamelog settings",hint:"Automatically reset certain D&D Beyond Gamelog settings to make this module work better. Disabling this setting might disable integration with DDB Gamelog.",propType:Boolean,inputType:N.checkbox,default:!0,scope:F.world,config:!0},removeTemplate:{tag:"remove-template",label:"Remove Template after damage roll",hint:"When a spell has a template, remove the template after damage is rolled. This will only affect DDB Gamelog rolls. If the template has no damage roll, it is not removed.",propType:Boolean,inputType:N.checkbox,default:!0,scope:F.world,config:!0},templateAutoTarget:{tag:"template-auto-target",label:"Template Auto Targeting",hint:"When the template is drawn on canvas, should tokens be automatically targeted? This affects rolls from DDB Gamelog and Foundry",propType:Number,choices:{1:"1: Target all tokens",2:"2: Target non-friendly",3:"3: Do NOT auto target"},inputType:N.checkbox,default:!0,scope:F.world,config:!0},skipRollConfig:{tag:"skip-roll-config",label:"Skip roll config dialog?",hint:"Options: (1) skips configuration, but pressing 'shift' while rolling will still open dialog; (2) Default behavior for Foundry rolls - press 'shift' to skip dialog. On rolls from D&D Beyond, dialog is never shown.",propType:Number,choices:{1:"1: Skip for all rolls",2:"2: Skip for DDB Gamelog rolls"},inputType:N.select,default:1,scope:F.world,config:!0},debugMode:{tag:"debug-mode",label:"Debug Mode",hint:"Enable or disable debug messages on browser console",propType:Boolean,inputType:N.checkbox,default:!0,scope:F.client,config:!0}};class S{static getTargets(t){let e=game.users.find(a=>a.isGM===!0),s=t.targets||e.targets;return new Set([...s])}static getActorFromItem(t){const e=t.split(".")[1];return game.actors.get(e)}static isModuleOn(t){var s;const e=(s=game.modules)==null?void 0:s.get(t);return!!(e!=null&&e.active)}static parseDDBGLAbility(t){let e=null;const s=`${t}`;return Pe.forEach(a=>{s.toLowerCase().includes(a.name)&&(e=a)}),e}static isPrivateRoll(t){return t===CONST.DICE_ROLL_MODES.BLIND||t===CONST.DICE_ROLL_MODES.PRIVATE}static removeTemplateForItem(t){m.log("removeTemplateForItem - A",[t]);const e=E.get("remove-template");if(m.log("removeTemplateForItem - B",[e]),!e)return;const s=canvas.templates.objects.children.filter(a=>a.document.flags.dnd5e.item===(t==null?void 0:t.uuid));canvas.scene.deleteEmbeddedDocuments("MeasuredTemplate",s.map(a=>a.id))}static getUserFromActor(t){let e;if(!t)return null;const s=t?game.actors.get(t):null;return e=game.users.players.find(r=>r.active===!0&&r.character.id===t),e||game.users.players.forEach(r=>{r.active&&s.testUserPermission(r,foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,{exact:!0})&&(e=r)}),m.log("getUserFromActor",[t,e]),e}static html(t,e){return t.querySelector(e)}}T(S,"getClientTargets",()=>{if(!game.user)return[];const t=Array.from(game.user.targets);return m.log("Selected Targets",[game.user.id,t,t.filter(e=>e.actor)]),t}),T(S,"getTargetDescriptors",()=>{var e,s;const t=new Map;for(const a of game.user.targets){const{name:r}=a,{img:i,system:n,uuid:l,statuses:c}=a.actor??{};if(l){const g=c.has("coverTotal")?null:(s=(e=n.attributes)==null?void 0:e.ac)==null?void 0:s.value;t.set(l,{name:r,img:i,uuid:l,ac:g??null})}}return Array.from(t.values())}),T(S,"findItemFromActor",(t,e,s)=>{const a=game.actors.get(t);if(m.log("findItemFromActor",[e,s]),!a)return null;let r=e?a.items.find(i=>i.id===e):null;return r||(r=s?a.items.find(i=>i.name.toLowerCase()===s.toLowerCase()):null,r||(r=a.items.find(i=>i.name.toLowerCase()===(s+" (Legacy)").toLowerCase()))),r});class E{static registerSettings(){document.querySelector("body").classList.add(V),Object.entries(H).forEach(async e=>{const s=e[1];m.log("Registering... ",[e]);const a={name:s.label,hint:s.hint,default:s.default,type:s.propType,scope:s.scope,config:s.config,requiresReload:s.requiresReload||!1,onChange:r=>E.apply(s.tag,r)};s.choices&&(a.choices=s.choices),await game.settings.register(W,s.tag,a),E.get(s.tag)===void 0&&E.set(s.tag,s.default),m.log("registerSettings",[s.tag,E.get(s.tag)])}),E.get(H.enableChatStyles.tag)&&document.querySelector("body").classList.add("crlngn-chat")}static get(t,e=W){if(!t)return null;let s=!1;if(e===W)s=game.settings.get(e,t);else{let r=game.settings.storage.get("client")[`${e}.${t}`];r===void 0&&(r=game.settings.storage.get("world").getSetting(`${e}.${t}`)),s=r==null?void 0:r.value,m.log("GET Setting",[r,s])}return s}static set(t,e,s=W){if(!t)return!1;let a=game.settings.storage.get("client")[`${s}.${t}`];a||(a=game.settings.storage.get("world").getSetting(`${s}.${t}`));try{a&&a.update({value:e}),m.log("Able to change setting",[t,a])}catch{m.log("Unable to change setting",[t,a])}return!0}static apply(t,e){switch(t){case H.forceDDBGL.tag:E.resetGamelogSettings();break}}static resetGamelogSettings(){if(!S.isModuleOn("ddb-game-log"))return;const e=E.get("enable_chatcards","ddb-game-log"),s=E.get(H.forceDDBGL.tag);m.log("resetGamelogSettings",[e,s]),!e&&s&&E.set("enable_chatcards",!0,"ddb-game-log")}}class m{static log(t="",e=[],s=!1){try{const a=E.get(SETTINGS.debugMode.tag);if(!(s||a))return;console.log(...te,t,...e)}catch{console.log(...te,t,...e)}}static warn(t="",e=[]){console.warn(...te,t,...e)}static error(t,e=[],s={ui:!1,console:!0,permanent:!1}){var a;s.ui&&((a=ui.notifications)==null||a.error(t,{localize:!0,permanent:s.permanent})),s.console&&console.error(...te,t,...e)}}class Fe{static enrichCard(t,e){var a,r,i,n,l,c,g;const s=((i=(r=(a=t.flags)==null?void 0:a.dnd5e)==null?void 0:r.activity)==null?void 0:i.type)||((c=(l=(n=t.flags)==null?void 0:n.dnd5e)==null?void 0:l.roll)==null?void 0:c.type)||"custom";e.classList.remove("ddb-game-log-open-card"),e.classList.add("crlngn"),e.classList.add(s),(g=t.flags)!=null&&g["ddb-game-log"]&&e.classList.add("ddbgl")}static formatFlavorText(t,e,s){var n,l,c,g;const a=game.actors.get(((n=e.speaker)==null?void 0:n.actor)||"")||null,r=(a==null?void 0:a.items.get(((g=(c=(l=e.flags)==null?void 0:l.dnd5e)==null?void 0:c.item)==null?void 0:g.id)||""))||null;let i=t||"Message";return s===I.attack?(m.log("renderChatMessage",[a,r]),r&&(i='<span class="item-name">'+(r==null?void 0:r.name),i=i+':</span> <span class="tohit">To Hit</span>')):s===I.damage?(m.log("renderChatMessage",[a,r]),r&&(i='<span class="item-name">'+(r==null?void 0:r.name),i=i+':</span> <span class="damage">Damage</span>')):s===I.healing?(m.log("renderChatMessage",[a,r]),r&&(i='<span class="item-name">'+((r==null?void 0:r.name)??"Action"),i=i+':</span> <span class="heal">Heal</span>')):t.includes("Skill Check")?(i='<span class="item-name">'+t,i=i.replace("Skill Check",':</span> <span class="check">Check</span>')):t.includes("Ability Check")?(i='<span class="item-name">'+t,i=i.replace("Ability Check",':</span> <span class="check">Check</span>')):t.includes("Saving Throw")?(i='<span class="item-name">'+t,i=i.replace("Saving Throw",':</span> <span class="save">Save</span>')):(s==="tool"||s==="check")&&t.includes("Check")?(i='<span class="item-name">'+t,i=i.replace("Check",':</span> <span class="check">Check</span>')):r?i=`<span class="item-name">${r.type}</span>`:i||(i='<span class="item-name">Info</span>'),i}}class M{static getActivityFromItem(t,e){var l;let s=null;if(!t)return s;const a=(l=t.system)==null?void 0:l.activities,r=t.hasAttack,i=t.hasSave;m.log("getActivityFromItem",[a,typeof a,Array.isArray(a)]);const n=c=>{const g=a.find(p=>p.type==c);return m.log("activityByType",[t,c,a.size,g]),g};switch(e){case h.toHit.cls:s=n(h.toHit.actionType);break;case h.damage.cls:r?s=n(h.toHit.actionType):i?s=n(h.save.actionType):s=n(h.damage.actionType);break;case h.check.cls:s=n(h.check.actionType);break;case h.save.cls:s=n(h.save.actionType);break;case h.heal.cls:s=n(h.heal.actionType);break;case h.cast.cls:s=n(h.cast.actionType);break}return s??Array.from(a.keys())[0]??null}static async ddbglUse(t,e={},s={},a={},r=!1){var d,u,b,y,f,C;if(!t){ui.notifications.error("No activity found",{localize:!1});return}if(!t.item.isEmbedded||t.item.pack)return;if(!t.item.isOwner){ui.notifications.error("DND5E.DocumentUseWarn",{localize:!0});return}if(!t.canUse){ui.notifications.error("DND5E.ACTIVITY.Warning.UsageNotAllowed",{localize:!0});return}let i=t.item.clone({},{keepId:!0});const n=t._prepareUsageConfig(e);(d=n.create)!=null&&d.measuredTemplate&&((u=ui.notifications)==null||u.info("Click the map to place the template and see the roll. Right click to cancel",{localize:!1}));const l=foundry.utils.mergeObject({configure:!0,applicationClass:t.metadata.usage.dialog},s),c=foundry.utils.mergeObject({create:!0,data:{flags:{dnd5e:{...t.messageFlags,messageType:"usage",use:{effects:(b=t.applicableEffects)==null?void 0:b.map(A=>A.id)}},rsr5e:{processed:!0,quickRoll:!1}}},hasConsumption:n.hasConsumption},a);if(Hooks.call("dnd5e.preUseActivity",t,n,l,c)===!1)return;await t._prepareUsageScaling(n,c,i),t=i.system.activities.get(t.id);const g=await t.consume(n,c);if(g===!1)return;const p={effects:[],templates:[],updates:g};if((y=n.concentration)!=null&&y.begin){const A=await i.actor.beginConcentrating(t,{"flags.dnd5e.scaling":n.scaling});if(A&&(p.effects??(p.effects=[]),p.effects.push(A),foundry.utils.setProperty(c.data,"flags.dnd5e.use.concentrationId",A.id)),(f=n.concentration)!=null&&f.end){const v=await i.actor.endConcentration(n.concentration.end);p.effects.push(...v)}}return c.data.rolls=(c.data.rolls??[]).concat(g.rolls),p.message=await M.createUsageMessage(t,c),m.log("messageConfig",[a,p.message]),p.message.dnd5e=((C=c.flags)==null?void 0:C.dnd5e)??{},p.message.dnd5e.targets=S.getTargetDescriptors({actorId:p.message.speaker.actor}),p.message.flags={...p.message.flags,rsr5e:{processed:!0}},await t._finalizeUsage(n,p),Hooks.call("dnd5e.postUseActivity",t,n,p)===!1||r&&t._triggerSubsequentActions&&t._triggerSubsequentActions(n,p),p}static async createUsageMessage(t,e){let s=await t._usageChatContext(e),a=await He(e.data.rolls);s={...s,rolls:a},m.log("createUsageMessage",[t.metadata.usage.chatCard,s]);const r=foundry.utils.mergeObject({rollMode:game.settings.get("core","rollMode"),data:{content:await renderTemplate(t.metadata.usage.chatCard,s),speaker:ChatMessage.getSpeaker({actor:t.item.actor}),flags:{core:{canPopout:!0},rsr5e:{processed:!0}}}},e);Hooks.callAll("dnd5e.preCreateUsageMessage",t,r),ChatMessage.applyRollMode(r.data,r.rollMode);const i=r.create===!1?r.data:await ChatMessage.create(r.data);return Hooks.callAll("dnd5e.postCreateUsageMessage",t,i),i}}const He=async(o,t)=>{let e=[];return e=await Promise.all(o.map(async s=>{const a=await s.getTooltip();return{...s,formula:s.formula,total:s.total,tooltipHtml:a}})),e},{OperatorTerm:Re,RollTerm:Ge}=foundry.dice.terms;function oe(o,{respectProperties:t}={}){const e=(r,i=[])=>[r,...t?Array.from(i).sort():[]].join(),s=new Map;for(const r of o){if(!r._evaluated)throw new Error("Only evaluated rolls can be aggregated.");for(const i of $e(r.terms,r.options.type)){const n=e(i.type,r.options.properties);s.has(n)||s.set(n,{type:i.type,properties:new Set,terms:[]});const l=s.get(n);l.terms.push(new Re({operator:i.negative?"-":"+"}),...i.terms),r.options.properties&&(l.properties=l.properties.union(new Set(r.options.properties)))}}const a=[];for(const r of s.values()){const i=new CONFIG.Dice.DamageRoll;i.terms=r.terms,i._total=i._evaluateTotal(),i._evaluated=!0,i.options={type:r.type,properties:Array.from(r.properties)},i.resetFormula(),a.push(i)}return a}function $e(o,t){var n;const e=()=>{r.type??(r.type=t),a.push(r),r=null,i=!1},s=l=>l in CONFIG.DND5E.damageTypes||l in CONFIG.DND5E.healingTypes,a=[];let r,i=!1;for(let l of o){if(l instanceof Re&&["+","-"].includes(l.operator)){r&&e(),l.operator==="-"&&(i=!i);continue}l=Ge.fromData(foundry.utils.deepClone(l.toJSON())),r??(r={terms:[],negative:i,type:null}),r.terms.push(l);const c=(n=l.flavor)==null?void 0:n.toLowerCase().trim();s(c)&&(r.type??(r.type=c),l.options.flavor="")}return r&&e(),a}const{ApplicationV2:Ve,HandlebarsApplicationMixin:xe}=foundry.applications.api;class ke extends xe(Ve){get subtitle(){return game.i18n.localize(this.options.window.subtitle??"")}_configureRenderOptions(t){var e;super._configureRenderOptions(t),t.isFirstRender&&this.hasFrame&&(t.window||(t.window={}),(e=t.window).subtitle||(e.subtitle=this.subtitle))}async _prepareContext(t){const e=await super._prepareContext(t);return e.CONFIG=CONFIG.DND5E,e.inputs={...foundry.applications.fields,...dnd5e.applications.fields},e}async _renderFrame(t){var a,r;const e=await super._renderFrame(t),s=document.createElement("h2");if(s.classList.add("window-subtitle"),e.querySelector(".window-title").insertAdjacentElement("afterend",s),(((a=t.window)==null?void 0:a.icon)??"").includes(".")){const i=e.querySelector(".window-icon"),n=document.createElement((r=t.window.icon)!=null&&r.endsWith(".svg")?"dnd5e-icon":"img");n.classList.add("window-icon"),n.src=t.window.icon,i.replaceWith(n)}return e}_updateFrame(t){super._updateFrame(t),t.window&&"subtitle"in t.window&&(this.element.querySelector(".window-header > .window-subtitle").innerText=t.window.subtitle)}_onRender(t,e){super._onRender(t,e),this.element.querySelectorAll("multi-select").forEach(s=>{s.disabled||s.querySelectorAll(".tag").forEach(a=>{var r;a.classList.add("remove"),(r=a.querySelector(":scope > span"))==null||r.classList.add("remove")})}),this.element.querySelectorAll(".label-top > p.hint").forEach(s=>{const a=s.parentElement.querySelector(":scope > label");a&&(s.ariaLabel=s.innerText,s.dataset.tooltip=s.innerHTML,s.innerHTML="",a.insertAdjacentElement("beforeend",s))})}_disableFields(){const t=`.window-content :is(${["INPUT","SELECT","TEXTAREA","BUTTON","DND5E-CHECKBOX","COLOR-PICKER","DOCUMENT-TAGS","FILE-PICKER","HUE-SLIDER","MULTI-SELECT","PROSE-MIRROR","RANGE-PICKER","STRING-TAGS"].join(", ")}):not(.interface-only)`;for(const e of this.element.querySelectorAll(t))e.tagName==="TEXTAREA"?e.readOnly=!0:e.disabled=!0}}T(ke,"DEFAULT_OPTIONS",{classes:["dnd5e2"],window:{subtitle:""}});const{DiceTerm:Ue}=foundry.dice.terms;var G,Q,$,Z,me,re,Se;const K=class K extends ke{constructor(e={},s={},a={}){super(a);q(this,Z);q(this,G);q(this,Q);q(this,$);z(this,G,e),z(this,Q,s),ee(this,Z,me).call(this,foundry.utils.deepClone(B(this,G)))}static get rollType(){return CONFIG.Dice.BasicRoll}get config(){return B(this,G)}get message(){return B(this,Q)}get rolls(){return B(this,$)}get rollType(){return this.options.rollType??this.constructor.rollType}_identifyDiceTerms(){let e=[],s=!0;const a=i=>{if(i instanceof Ue){if(!Number.isFinite(i.number)||!Number.isFinite(i.faces)||!this.options.rendering.dice.denominations.has(i.denomination))return s=!1;for(let n=0;n<i.number;n++)e.push({icon:`systems/dnd5e/icons/svg/dice/${i.denomination}.svg`,label:i.denomination,denomination:i.denomination})}},r=(i=[])=>{for(const n of i)a(n),"dice"in n&&r(n.dice)};if(this.rolls.forEach(i=>r(i.terms)),e.length>this.options.rendering.dice.max){const i=e.reduce((n,{icon:l,denomination:c})=>(n[c]??(n[c]={icon:l,count:0}),n[c].count++,n),{});e=Object.entries(i).map(([n,{icon:l,count:c}])=>({icon:l,label:`${c}${n}`})),e.length>this.options.rendering.dice.max&&(s=!1)}else e.length||(s=!1);return s?e:[]}async _preparePartContext(e,s,a){switch(s=await super._preparePartContext(e,s,a),e){case"buttons":return this._prepareButtonsContext(s,a);case"configuration":return this._prepareConfigurationContext(s,a);case"formulas":return this._prepareFormulasContext(s,a);default:return s}}async _prepareButtonsContext(e,s){return e.buttons={roll:{icon:'<i class="fa-solid fa-dice"></i>',label:game.i18n.localize("DND5E.Roll")}},e}async _prepareConfigurationContext(e,s){var a;return e.fields=[{field:new foundry.data.fields.StringField({label:game.i18n.localize("DND5E.RollMode")}),name:"rollMode",value:this.message.rollMode??((a=this.options.default)==null?void 0:a.rollMode),options:Object.entries(CONFIG.Dice.rollModes).map(([r,i])=>({value:r,label:game.i18n.localize(i)}))}],e}async _prepareFormulasContext(e,s){return e.rolls=this.rolls.map(a=>({roll:a})),e.dice=this._identifyDiceTerms()||[],e}_buildConfig(e,s,a){e=foundry.utils.mergeObject({parts:[],data:{},options:{}},e),Hooks.callAll("dnd5e.buildRollConfig",this,e,s,a);const r=s==null?void 0:s.get(`roll.${a}.situational`);return r&&e.situational!==!1?(e.parts.push("@situational"),e.data.situational=r):e.parts.findSplice(i=>i==="@situational"),e}_finalizeRolls(e){return this.rolls}rebuild(){this._onChangeForm(this.options.form,new Event("change"))}_onChangeForm(e,s){super._onChangeForm(e,s);const a=new FormDataExtended(this.element);a.has("rollMode")&&(this.message.rollMode=a.get("rollMode")),ee(this,Z,me).call(this,foundry.utils.deepClone(B(this,G)),a),this.render({parts:["formulas"]})}_onClose(e={}){var s;(s=e.dnd5e)!=null&&s.submitted||z(this,$,[])}static async configure(e={},s={},a={}){return new Promise(r=>{const i=new this(e,a,s.options);i.addEventListener("close",()=>r(i.rolls),{once:!0}),i.render({force:!0})})}};G=new WeakMap,Q=new WeakMap,$=new WeakMap,Z=new WeakSet,me=function(e,s){var r;const a=this.rollType;z(this,$,((r=e.rolls)==null?void 0:r.map((i,n)=>a.fromConfig(this._buildConfig(i,s,n),this.config)))??[])},re=new WeakSet,Se=async function(e,s,a){var r,i;z(this,$,this._finalizeRolls((i=(r=e.submitter)==null?void 0:r.dataset)==null?void 0:i.action)),await this.close({dnd5e:{submitted:!0}})},q(K,re),T(K,"DEFAULT_OPTIONS",{classes:["roll-configuration","standard-form"],tag:"form",window:{title:"DND5E.RollConfiguration.Title",icon:"fa-solid fa-dice",minimizable:!1},form:{handler:ee(K,re,Se)},position:{width:400},rendering:{dice:{max:5,denominations:new Set(["d4","d6","d8","d10","d12","d20"])}}}),T(K,"PARTS",{formulas:{template:"systems/dnd5e/templates/dice/roll-formulas.hbs"},configuration:{template:"systems/dnd5e/templates/dice/roll-configuration.hbs"},buttons:{template:"systems/dnd5e/templates/dice/roll-buttons.hbs"}});let ae=K;const j=class j extends ae{static get rollType(){return CONFIG.Dice.DamageRoll}async _prepareButtonsContext(t,e){var a;const s=((a=this.config.critical)==null?void 0:a.allow)!==!1;return t.buttons={critical:{icon:'<i class="fa-solid fa-bomb"></i>',label:game.i18n.localize("DND5E.CriticalHit")},normal:{icon:'<i class="fa-solid fa-dice"></i>',label:game.i18n.localize(s?"DND5E.Normal":"DND5E.Roll")}},s||delete t.buttons.critical,t}async _prepareFormulasContext(t,e){t=await super._prepareFormulasContext(t,e);const s=foundry.utils.mergeObject(CONFIG.DND5E.damageTypes,CONFIG.DND5E.healingTypes,{inplace:!1});return t.rolls=t.rolls.map(({roll:a})=>{var r,i;return{roll:a,damageConfig:s[a.options.type]??s[(r=a.options.types)==null?void 0:r[0]],damageTypes:((i=a.options.types)==null?void 0:i.length)>1?Object.entries(s).map(([n,l])=>{var c;return(c=a.options.types)!=null&&c.includes(n)?{value:n,label:l.label}:null}).filter(n=>n):null}}),t}_buildConfig(t,e,s){t=super._buildConfig(t,e,s);const a=e==null?void 0:e.get(`roll.${s}.damageType`);return a&&(t.options.type=a),t}_finalizeRolls(t){return this.rolls.map(e=>(e.options.isCritical=t==="critical",e.configureDamage({critical:this.config.critical}),e))}};T(j,"PARTS",{...Ce(j,j,"PARTS"),formulas:{template:"systems/dnd5e/templates/dice/damage-formulas.hbs"}});let pe=j;function ce(o,t){if(!o)return!1;const e={},s=(a,r)=>{e[a]=r,KeyboardManager.MODIFIER_CODES[a].forEach(i=>e[i]=r)};return s(KeyboardManager.MODIFIER_KEYS.CONTROL,o.ctrlKey||o.metaKey),s(KeyboardManager.MODIFIER_KEYS.SHIFT,o.shiftKey),s(KeyboardManager.MODIFIER_KEYS.ALT,o.altKey),game.keybindings.get("dnd5e",t).some(a=>game.keyboard.downKeys.has(a.key)&&a.modifiers.every(r=>e[r])?!0:a.modifiers.length?!1:e[a.key])}const{DiceTerm:Be,NumericTerm:qe}=foundry.dice.terms,J=class J extends Roll{static fromConfig(t,e){const s=(t.parts??[]).join(" + ");return new this(s,t.data,t.options)}static async build(t={},e={},s={}){var r;this.applyKeybindings(t,e,s);let a;e.configure===!1?a=((r=t.rolls)==null?void 0:r.map(i=>this.fromConfig(i,t)))??[]:a=await(e.applicationClass??this.DefaultConfigurationDialog).configure(t,e,s);for(const i of a)await i.evaluate();return a!=null&&a.length&&s.create!==!1&&await this.toMessage(a,s.data,{rollMode:s.rollMode}),a}static applyKeybindings(t,e,s){e.configure??(e.configure=!0)}get isFailure(){if(this._evaluated)return Number.isNumeric(this.options.target)?this.total<this.options.target:!1}get isSuccess(){if(this._evaluated)return Number.isNumeric(this.options.target)?this.total>=this.options.target:!1}static async toMessage(t,e={},{rollMode:s,create:a=!0}={}){for(const n of t)n._evaluated||await n.evaluate({allowInteractive:s!==CONST.DICE_ROLL_MODES.BLIND}),s??(s=n.options.rollMode);e=foundry.utils.mergeObject({sound:CONFIG.sounds.dice},e),e.rolls=t;const r=getDocumentClass("ChatMessage"),i=new r(e);return a?r.create(i.toObject(),{rollMode:s}):(s&&i.applyRollMode(s),i.toObject())}async evaluate(t={}){return this.preCalculateDiceTerms(t),super.evaluate(t)}evaluateSync(t={}){return this.preCalculateDiceTerms(t),super.evaluateSync(t)}preCalculateDiceTerms(t={}){this._evaluated||!t.maximize&&!t.minimize||(this.terms=this.terms.map(e=>{if(e instanceof Be&&e.modifiers.length){const s=!t.maximize,a=this.constructor.preCalculateTerm(e,{minimize:s});if(Number.isFinite(a))return new qe({number:a,options:e.options})}return e}))}static preCalculateTerm(t,{minimize:e=!1}={}){let s=e?1:t.faces,a=t.number;const r=foundry.utils.deepClone(t.modifiers),i=new Set(["k","kh","kl"]),n=new Set(["d","dh","dl"]),l=new Set([...i,...n,"max","min"]);let c=!1;for(const g of r){const p=/(m[ai][xn]|[kd][hl]?)(\d+)?/i,d=g.match(p);if(!d)continue;d[0].length<d.input.length&&r.push(d.input.slice(d[0].length));let[,u,b]=d;if(u=u.toLowerCase(),!l.has(u))continue;c=!0;const y=parseInt(b)||(u==="max"||u==="min"?-1:1);if(y>0){if(u==="max"&&e||u==="min"&&!e)continue;u==="max"||u==="min"?s=Math.min(t.faces,y):i.has(u)?a=Math.min(a,y):n.has(u)&&(a=Math.max(1,a-y))}}return c?s*a:null}simplify(){var t,e;for(const s of this.dice){const a=s._number;a instanceof J&&a.isDeterministic&&(s._number=a.evaluateSync().total);const r=s._faces;r instanceof J&&r.isDeterministic&&(s._faces=r.evaluateSync().total),(e=(t=r.terms)==null?void 0:t[0])!=null&&e.flavor&&(s.options.flavor=r.terms[0].flavor)}this.resetFormula()}};T(J,"DefaultConfigurationDialog",ae);let fe=J;const{DiceTerm:ze,FunctionTerm:Ke,NumericTerm:De,OperatorTerm:de,ParentheticalTerm:ue,StringTerm:se}=foundry.dice.terms;class he extends fe{constructor(t,e,s){super(t,e,s),this.options.preprocessed||this.preprocessFormula(),this.options.configured||this.configureDamage()}static fromConfig(t,e){const s=super.fromConfig(t,e);return e.critical&&s.configureDamage({critical:e.critical}),s}static async build(t={},e={},s={}){var a,r;return t.critical??(t.critical={}),(a=t.critical).multiplyNumeric??(a.multiplyNumeric=game.settings.get("dnd5e","criticalDamageModifiers")),(r=t.critical).powerfulCritical??(r.powerfulCritical=game.settings.get("dnd5e","criticalDamageMaxDice")),super.build(t,e,s)}static applyKeybindings(t,e,s){var r;const a={normal:ce(t.event,"skipDialogNormal")||ce(t.event,"skipDialogDisadvantage"),critical:ce(t.event,"skipDialogAdvantage")};e.configure??(e.configure=Object.values(a).every(i=>!i));for(const i of t.rolls)i.options??(i.options={}),(r=i.options).isCritical??(r.isCritical=a.critical)}get isCritical(){return this.options.isCritical===!0}preprocessFormula(){for(let[t,e]of this.terms.entries()){const s=this.terms[t+1],a=this.terms[t-1];if(e instanceof se&&/^d\d+/.test(e.term)&&!(a instanceof ue)){const r=`1${e.term}`,i=new Roll(r).terms[0];this.terms.splice(t,1,i),e=i}else if(e instanceof ue&&a instanceof se&&a.term.match(/^[0-9]*d$/)){if(e.isDeterministic){let r=`${a.term}${e.evaluate().total}`,i=2;s instanceof se&&(r+=s.term,i+=1);const n=new Roll(r).terms[0];this.terms.splice(t-1,i,n),e=n}}else if((e instanceof ue||e instanceof Ke)&&s instanceof se&&s.term.match(/^d[0-9]*$/)&&e.isDeterministic){const r=`${e.evaluate().total}${s.term}`,i=new Roll(r).terms[0];this.terms.splice(t,2,i),e=i}}this.resetFormula(),this.options.preprocessed=!0}configureDamage({critical:t={}}={}){var s;foundry.utils.mergeObject(t,this.options.critical??{});const e=new Map;for(let[a,r]of this.terms.entries())if(r instanceof ze){if(r._number instanceof Roll){if(!r._number.isDeterministic)continue;r._number._evaluated||r._number.evaluateSync()}if(r.options.baseNumber=r.options.baseNumber??r.number,r.number=r.options.baseNumber,this.isCritical){let i=t.multiplier??2;if(t.powerfulCritical){const l=Roll.create(r.formula).evaluateSync({maximize:!0}).total;if(l>0){const c=((s=r.flavor)==null?void 0:s.toLowerCase().trim())??game.i18n.localize("DND5E.PowerfulCritical");e.set(c,(e.get(c)??0)+l)}i=Math.max(1,i-1)}let n=t.bonusDice&&a===0?t.bonusDice:0;r.alter(i,n),r.options.critical=!0}}else t.multiplyNumeric&&r instanceof De&&(r.options.baseNumber=r.options.baseNumber??r.number,r.number=r.options.baseNumber,this.isCritical&&(r.number*=t.multiplier??2,r.options.critical=!0));if(t.powerfulCritical&&e.size)for(const[a,r]of e.entries())this.terms.push(new de({operator:"+"})),this.terms.push(new De({number:r,options:{flavor:a}}));if(this.isCritical&&t.bonusDamage){const a=new Roll(t.bonusDamage,this.data);a.terms[0]instanceof de||this.terms.push(new de({operator:"+"})),this.terms.push(...a.terms)}this.resetFormula(),this.options.configured=!0}async configureDialog(t={},e={}){return(await this.constructor.configureDialog([this],t,e))[0]??null}static async configureDialog(t,{title:e,defaultRollMode:s,defaultCritical:a=!1,template:r,allowCritical:i=!0}={},n={}){return foundry.utils.logCompatibilityWarning("The `configureDialog` on DamageRoll has been deprecated and is now handled through `DamageRoll.build`.",{since:"DnD5e 4.0",until:"DnD5e 4.4"}),await this.DefaultConfigurationDialog.configure({critical:{allow:i}},{options:{title:e}},{rollMode:s})}}T(he,"DefaultConfigurationDialog",pe);const{Coin:Ye,DiceTerm:Ee,Die:We,FunctionTerm:je,NumericTerm:ie,OperatorTerm:L,ParentheticalTerm:we,RollTerm:Je}=foundry.dice.terms;function Ae(o,{preserveFlavor:t=!1,deterministic:e=!1}={}){var c;let s;try{s=new Roll(o)}catch(g){console.warn(`Unable to simplify formula '${o}': ${g}`)}if(Roll.validate(s.formula),t||(s.terms=Roll.parse(s.formula.replace(Je.FLAVOR_REGEXP,""))),e){s.terms=ye(s.terms);const g=[];let p=[],d=!1,u;for(let b=s.terms.length-1;b>=0;){let y,f=s.terms[b];if(f instanceof we&&(y=Ae(f.term,{preserveFlavor:t,deterministic:e})),Number.isNumeric(y)){const C={number:y};t&&(C.options={flavor:f.flavor}),f=new ie(C)}for(u=f.isDeterministic&&(!d||u),u?p.unshift(f):p=[],f=s.terms[--b];f instanceof L;){if(u&&p.unshift(f),f.operator==="*"||f.operator==="/"||f.operator==="%")d=!0;else for(d=!1;p.length;)g.unshift(p.pop());f=s.terms[--b]}}if(u)for(;p.length;)g.unshift(p.pop());s.terms=g}if(s.terms=ye(s.terms),/[*/]/.test(s.formula))return s.isDeterministic&&!/d\(/.test(s.formula)&&(!/\[/.test(s.formula)||!t)?String(new Roll(s.formula).evaluateSync().total):s.constructor.getFormula(s.terms);s.terms=_e(s.terms),s.terms=Roll.simplifyTerms(s.terms);let{poolTerms:a,diceTerms:r,mathTerms:i,numericTerms:n}=Ze(s.terms);n=Xe(n??[]),r=Qe(r??[]);const l=[r,a,i,n].flat().filter(Boolean);return((c=l[0])==null?void 0:c.operator)==="+"&&l.shift(),s.constructor.getFormula(l)}function ye(o){return o.reduce((t,e)=>{const s=t[t.length-1],a=new Set([s==null?void 0:s.operator,e.operator]);return a.has(void 0)?t.push(e):a.has("+")&&a.has("-")?t.splice(-1,1,new L({operator:"-"})):a.has("-")&&a.size===1?t.splice(-1,1,new L({operator:"+"})):a.has("+")||t.push(e),t},[])}function Xe(o){const t=[],{annotated:e,unannotated:s}=Le(o);if(s.length){const a=Roll.safeEval(Roll.getFormula(s));if(a===0)return[...e];a>0&&t.push(new L({operator:"+"})),t.push(new ie({number:a}))}return[...t,...e]}function Qe(o){const{annotated:t,unannotated:e}=Le(o),s=e.reduce((r,i,n)=>{var d;if(i instanceof L)return r;const l=((d=i.constructor)==null?void 0:d.name)==="Coin",c=l?"c":i.faces,g=l?"":i.modifiers.filterJoin(""),p=`${e[n-1].operator}${c}${g}`;return r[p]??(r[p]={}),i._number instanceof Roll&&i._number.isDeterministic&&i._number.evaluateSync(),r[p].number=(r[p].number??0)+i.number,l||(r[p].modifiers=(r[p].modifiers??[]).concat(i.modifiers)),r},{});return[...Object.entries(s).flatMap(([r,{number:i,modifiers:n}])=>[new L({operator:r.charAt(0)}),r.slice(1)==="c"?new Ye({number:i}):new We({number:i,faces:parseInt(r.slice(1)),modifiers:[...new Set(n)]})]),...t]}function _e(o){return o=o.reduce((t,e)=>{if(e instanceof we)if(e.isDeterministic){const s=new Roll(e.term);e=new ie({number:s.evaluateSync().total})}else{const s=new Roll(e.term).terms;e=_e(s)}return t.push(e),t},[]),ye(o.flat())}function Ze(o){return o[0]instanceof L||o.unshift(new L({operator:"+"})),o.reduce((t,e,s)=>{let a;e instanceof Ee?a=Ee:e instanceof je&&e.isDeterministic?a=ie:a=e.constructor;const r=`${a.name.charAt(0).toLowerCase()}${a.name.substring(1)}s`;return(t[r]=t[r]??[]).push(o[s-1],e),t},{})}function Le(o){return o.reduce((t,e,s)=>(e instanceof L||t[e.flavor?"annotated":"unannotated"].push(o[s-1],e),t),{annotated:[],unannotated:[]})}class ge extends ChatMessage{constructor(){super(...arguments);T(this,"_highlighted",null)}get canApplyDamage(){var s,a,r;const e=(a=(s=this.flags.dnd5e)==null?void 0:s.roll)==null?void 0:a.type;return e&&e!=="damage"?!1:this.isRoll&&this.isContentVisible&&!!((r=canvas.tokens)!=null&&r.controlled.length)}get canSelectTargets(){var e,s;return((s=(e=this.flags.dnd5e)==null?void 0:e.roll)==null?void 0:s.type)!=="attack"?!1:this.isRoll&&this.isContentVisible}get isRoll(){var e;return super.isRoll&&!((e=this.flags.dnd5e)!=null&&e.rest)}get shouldDisplayChallenge(){if(game.user.isGM||this.author===game.user)return!0;switch(game.settings.get("dnd5e","challengeVisibility")){case"all":return!0;case"player":return!this.author.isGM;default:return!1}}static migrateData(e){if(e=super.migrateData(e),foundry.utils.hasProperty(e,"flags.dnd5e.itemData")&&(foundry.utils.setProperty(e,"flags.dnd5e.item.data",e.flags.dnd5e.itemData),delete e.flags.dnd5e.itemData),foundry.utils.hasProperty(e,"flags.dnd5e.use")){const s=e.flags.dnd5e.use;foundry.utils.setProperty(e,"flags.dnd5e.messageType","usage"),s.type&&foundry.utils.setProperty(e,"flags.dnd5e.item.type",s.type),s.itemId&&foundry.utils.setProperty(e,"flags.dnd5e.item.id",s.itemId),s.itemUuid&&foundry.utils.setProperty(e,"flags.dnd5e.item.uuid",s.itemUuid)}return e}prepareData(){super.prepareData(),this._shimFlags(),dnd5e.registry.messages.track(this)}async getHTML(...e){const s=await super.getHTML();return this._displayChatActionButtons(s),this._highlightCriticalSuccessFailure(s),game.settings.get("dnd5e","autoCollapseItemCards")&&s.find(".description.collapsible").each((a,r)=>r.classList.add("collapsed")),this._enrichChatCard(s[0]),this._collapseTrays(s[0]),this._activateActivityListeners(s[0]),Hooks.callAll("dnd5e.renderChatMessage",this,s[0]),s}_collapseTrays(e){let s;switch(game.settings.get("dnd5e","autoCollapseChatTrays")){case"always":s=!0;break;case"never":s=!1;break;case"older":s=this.timestamp<Date.now()-5*60*1e3;break}for(const a of e.querySelectorAll(".card-tray, .effects-tray"))a.classList.toggle("collapsed",s);for(const a of e.querySelectorAll("damage-application, effect-application"))a.toggleAttribute("open",!s)}_displayChatActionButtons(e){var a;const s=e.find(".dnd5e.chat-card, .dnd5e2.chat-card");if(s.length>0){const r=e.find(".flavor-text");r.text()===e.find(".item-name").text()&&r.remove(),this.shouldDisplayChallenge&&(s[0].dataset.displayChallenge="");const i=game.actors.get(this.speaker.actor),n=game.user.isGM||(i==null?void 0:i.isOwner)||this.author.id===game.user.id;for(const l of e[0].querySelectorAll(".card-buttons button"))l.dataset.visibility!=="all"&&(l.dataset.visibility==="gm"&&!game.user.isGM||!n||(a=this.getAssociatedActivity())!=null&&a.shouldHideChatButton(l,this))&&(l.hidden=!0)}}_highlightCriticalSuccessFailure(e){if(!this.isContentVisible||!this.rolls.length)return;const s=this.getOriginatingMessage(),a=s==null?void 0:s.shouldDisplayChallenge,r=game.user.isGM||game.settings.get("dnd5e","attackRollVisibility")!=="none";function i(n){const l=document.createElement("i");return l.classList.add("fas",n),l.setAttribute("inert",""),l}for(let[n,l]of this.rolls.entries()){const c=l.dice[0];if((c==null?void 0:c.faces)!==20||(c==null?void 0:c.values.length)!==1)continue;l=dnd5e.dice.D20Roll.fromRoll(l);const g=l.dice[0];if("success"in g.results[0]||g.options.marginSuccess||g.options.marginFailure)continue;const d=e.find(".dice-total")[n];if(!d)continue;const u=["attack","death"].includes(this.getFlag("dnd5e","roll.type")),y=this.getFlag("dnd5e","roll.type")==="attack"?r:a;g.options.target&&y&&(l.total>=g.options.target?d.classList.add("success"):d.classList.add("failure")),u&&l.isCritical&&d.classList.add("critical"),u&&l.isFumble&&d.classList.add("fumble");const f=document.createElement("div");f.classList.add("icons"),d.classList.contains("critical")?f.append(i("fa-check"),i("fa-check")):d.classList.contains("fumble")?f.append(i("fa-xmark"),i("fa-xmark")):d.classList.contains("success")?f.append(i("fa-check")):d.classList.contains("failure")&&f.append(i("fa-xmark")),f.children.length&&d.append(f)}}_enrichChatCard(e){var f,C,A,v,U,Te;const s=this.getAssociatedActor();let a,r;this.isContentVisible?(a=(s==null?void 0:s.img)??this.author.avatar,r=this.alias):(a=this.author.avatar,r=this.author.name);const i=document.createElement("a");i.classList.add("avatar"),s&&(i.dataset.uuid=s.uuid),i.innerHTML=`<img src="${a}" alt="${r}">`;const n=document.createElement("span");n.classList.add("name-stacked"),n.innerHTML=`<span class="title">${r}</span>`;const l=document.createElement("span");l.classList.add("subtitle"),this.whisper.length&&(l.innerText=((f=e.querySelector(".whisper-to"))==null?void 0:f.innerText)??""),r!==((C=this.author)==null?void 0:C.name)&&!l.innerText.length&&(l.innerText=((A=this.author)==null?void 0:A.name)??""),n.appendChild(l);const c=e.querySelector(".message-sender");c==null||c.replaceChildren(i,n),(v=e.querySelector(".whisper-to"))==null||v.remove();const g=e.querySelector(".message-metadata"),p=g.querySelector(".message-delete");game.user.isGM||p==null||p.remove();const d=document.createElement("a");d.setAttribute("aria-label",game.i18n.localize("DND5E.AdditionalControls")),d.classList.add("chat-control"),d.dataset.contextMenu="",d.innerHTML='<i class="fas fa-ellipsis-vertical fa-fw"></i>',g.appendChild(d),e.querySelectorAll("i.dnd5e-icon").forEach(_=>{const P=document.createElement("dnd5e-icon");P.src=_.dataset.src,_.replaceWith(P)});const u=this.getFlag("dnd5e","roll"),b=this.getAssociatedItem(),y=this.getAssociatedActivity();if(this.isContentVisible&&b&&u){const _=u.type==="damage"&&((U=this.rolls[0])==null?void 0:U.isCritical),P=u.type==="damage"?_?game.i18n.localize("DND5E.CriticalHit"):game.i18n.localize("DND5E.DamageRoll"):u.type==="attack"?(y==null?void 0:y.getActionLabel(u.attackMode))??"":((Te=b.system.type)==null?void 0:Te.label)??game.i18n.localize(CONFIG.Item.typeLabels[b.type]),ne=document.createElement("div");ne.classList.add("dnd5e2","chat-card"),ne.innerHTML=`
        <section class="card-header description ${_?"critical":""}">
          <header class="summary">
            <img class="gold-icon" src="${b.img}" alt="${b.name}">
            <div class="name-stacked">
              <span class="title">${b.name}</span>
              <span class="subtitle">${P}</span>
            </div>
          </header>
        </section>
      `,e.querySelector(".message-header .flavor-text").remove(),e.querySelector(".message-content").insertAdjacentElement("afterbegin",ne)}this._enrichAttackTargets(e),this.isContentVisible?(e.querySelectorAll(".dice-tooltip").forEach((_,P)=>{!(u instanceof he)&&this.rolls[P]&&this._enrichRollTooltip(this.rolls[P],_)}),this._enrichDamageTooltip(this.rolls.filter(_=>_ instanceof he),e),this._enrichEnchantmentTooltip(e),e.querySelectorAll(".dice-roll").forEach(_=>_.addEventListener("click",this._onClickDiceRoll.bind(this)))):e.querySelectorAll(".dice-roll").forEach(_=>_.classList.add("secret-roll")),this._enrichUsageEffects(e),i.addEventListener("click",this._onTargetMouseDown.bind(this)),i.addEventListener("pointerover",this._onTargetHoverIn.bind(this)),i.addEventListener("pointerout",this._onTargetHoverOut.bind(this))}_enrichRollTooltip(e,s){const a=Number(Ae(e._formula,{deterministic:!0}));if(!a)return;const r=a<0?"-":"+",i=document.createElement("section");i.classList.add("tooltip-part","constant"),i.innerHTML=`
      <div class="dice">
        <ol class="dice-rolls"></ol>
        <div class="total">
          <span class="value"><span class="sign">${r}</span>${Math.abs(a)}</span>
        </div>
      </div>
    `,s.appendChild(i)}_enrichAttackTargets(e){var g,p;const s=this.rolls[0],a=game.settings.get("dnd5e","attackRollVisibility");if(!(game.user.isGM||a!=="none")||!(s instanceof dnd5e.dice.D20Roll))return;const i=CONFIG.DND5E.weaponMasteries[s.options.mastery];if(i){const d=document.createElement("p");d.classList.add("supplement");let u=i.label;i.reference&&(u=`
        <a class="content-link" draggable="true" data-link data-uuid="${i.reference}"
           data-tooltip="${u}">${u}</a>
      `),d.innerHTML=`<strong>${game.i18n.format("DND5E.WEAPON.Mastery.Flavor")}</strong> ${u}`,(g=e.querySelector(".chat-card")??e.querySelector(".message-content"))==null||g.appendChild(d)}const n=this.getFlag("dnd5e","targets");if(!(n!=null&&n.length))return;const l=document.createElement("div");l.classList.add("dnd5e2"),l.innerHTML=`
      <div class="card-tray targets-tray collapsible collapsed">
        <label class="roboto-upper">
          <i class="fas fa-bullseye" inert></i>
          <span>${game.i18n.localize("DND5E.TargetPl")}</span>
          <i class="fas fa-caret-down" inert></i>
        </label>
        <div class="collapsible-content">
          <ul class="dnd5e2 unlist evaluation wrapper"></ul>
        </div>
      </div>
    `;const c=l.querySelector("ul");c.innerHTML=n.map(({name:d,ac:u,uuid:b})=>{!game.user.isGM&&a!=="all"&&(u="");const y=!s.isCritical&&(s.total<u||s.isFumble);return[`
        <li data-uuid="${b}" class="target ${y?"miss":"hit"}">
          <i class="fas ${y?"fa-times":"fa-check"}"></i>
          <div class="name">${d}</div>
          ${u!==""?`
          <div class="ac">
            <i class="fas fa-shield-halved"></i>
            <span>${u===null?"&infin;":u}</span>
          </div>
          `:""}
        </li>
      `,y]}).sort((d,u)=>d[1]===u[1]?0:d[1]?1:-1).reduce((d,[u])=>d+u,""),c.querySelectorAll("li.target").forEach(d=>{d.addEventListener("click",this._onTargetMouseDown.bind(this)),d.addEventListener("pointerover",this._onTargetHoverIn.bind(this)),d.addEventListener("pointerout",this._onTargetHoverOut.bind(this))}),(p=e.querySelector(".message-content"))==null||p.appendChild(l)}_enrichDamageTooltip(e,s){var p;if(!e.length)return;const a=CONFIG.DND5E.aggregateDamageDisplay?oe(e):e;let{formula:r,total:i,breakdown:n}=a.reduce((d,u)=>(d.formula.push(CONFIG.DND5E.aggregateDamageDisplay?u.formula:` + ${u.formula}`),d.total+=u.total,d.breakdown.push(this._simplifyDamageRoll(u)),d),{formula:[],total:0,breakdown:[]});r=r.join("").replace(/^ \+ /,""),s.querySelectorAll(".dice-roll").forEach(d=>d.remove());const l=document.createElement("div");l.classList.add("dice-roll");const c=n.reduce((d,{type:u,total:b,constant:y,dice:f})=>{const C=CONFIG.DND5E.damageTypes[u]??CONFIG.DND5E.healingTypes[u];return`${d}
        <section class="tooltip-part">
          <div class="dice">
            <ol class="dice-rolls">
              ${f.reduce((A,{result:v,classes:U})=>`
                ${A}<li class="roll ${U}">${v}</li>
              `,"")}
              ${y?`
              <li class="constant"><span class="sign">${y<0?"-":"+"}</span>${Math.abs(y)}</li>
              `:""}
            </ol>
            <div class="total">
              ${C?`<img src="${C.icon}" alt="${C.label}">`:""}
              <span class="label">${(C==null?void 0:C.label)??""}</span>
              <span class="value">${b}</span>
            </div>
          </div>
        </section>
      `},"");l.innerHTML=`
      <div class="dice-result">
        <div class="dice-formula">${r}</div>
        <div class="dice-tooltip-collapser">
          <div class="dice-tooltip">
            ${c}
          </div>
        </div>
        <h4 class="dice-total">${i}</h4>
      </div>
    `,s.querySelector(".message-content").appendChild(l);const g=this.getFlag("dnd5e","roll.damageOnSave");if(g){const d=document.createElement("p");d.classList.add("supplement"),d.innerHTML=`<strong>${game.i18n.format("DND5E.SAVE.OnSave")}</strong> ${game.i18n.localize(`DND5E.SAVE.FIELDS.damage.onSave.${g.capitalize()}`)}`,(p=s.querySelector(".chat-card, .message-content"))==null||p.appendChild(d)}if(game.user.isGM){const d=document.createElement("damage-application");d.classList.add("dnd5e2"),d.damages=oe(e,{respectProperties:!0}).map(u=>({value:u.total,type:u.options.type,properties:new Set(u.options.properties??[])})),s.querySelector(".message-content").appendChild(d)}}_simplifyDamageRoll(e){const s={type:e.options.type,total:e.total,constant:0,dice:[]};let a=!1;for(let r=e.terms.length-1;r>=0;){const i=e.terms[r--];if(!(i instanceof foundry.dice.terms.NumericTerm)&&!(i instanceof foundry.dice.terms.DiceTerm))continue;const n=i.total;i instanceof foundry.dice.terms.DiceTerm&&s.dice.push(...i.results.map(g=>({result:i.getResultLabel(g),classes:i.getResultCSS(g).filterJoin(" ")})));let l=1,c=e.terms[r];for(;c instanceof foundry.dice.terms.OperatorTerm;)["+","-"].includes(c.operator)||(a=!0),c.operator==="-"&&(l*=-1),c=e.terms[--r];i instanceof foundry.dice.terms.NumericTerm&&(s.constant+=n*l)}return a&&(s.constant=null),s}_enrichEnchantmentTooltip(e){var n,l;if(!this.getFlag("dnd5e","use.enchantmentProfile"))return;const a=this.getFlag("dnd5e","use.concentrationId");if(a&&!((n=this.getAssociatedActor())!=null&&n.effects.get(a)))return;const r=document.createElement("enchantment-application");r.classList.add("dnd5e2");const i=e.querySelector(".card-footer");i?i.insertAdjacentElement("beforebegin",r):(l=e.querySelector(".chat-card"))==null||l.append(r)}_enrichUsageEffects(e){var i;const s=this.getAssociatedItem();let a;if(this.getFlag("dnd5e","messageType")==="usage")a=(i=this.getFlag("dnd5e","use.effects"))==null?void 0:i.map(n=>s==null?void 0:s.effects.get(n));else{if(this.getFlag("dnd5e","roll.type"))return;a=s==null?void 0:s.effects.filter(n=>{var l;return n.type!=="enchantment"&&!((l=s.getFlag("dnd5e","riders.effect"))!=null&&l.includes(n.id))})}if(a=a==null?void 0:a.filter(n=>n&&(game.user.isGM||n.transfer&&this.author.id===game.user.id)),!(a!=null&&a.length))return;const r=document.createElement("effect-application");r.classList.add("dnd5e2"),r.effects=a,e.querySelector(".message-content").appendChild(r)}static addChatMessageContextOptions(e,s){const a=([i])=>{var n;return(n=game.messages.get(i.dataset.messageId))==null?void 0:n.canApplyDamage},r=([i])=>{var n;return(n=game.messages.get(i.dataset.messageId))==null?void 0:n.canSelectTargets};return s.push({name:game.i18n.localize("DND5E.ChatContextDamage"),icon:'<i class="fas fa-user-minus"></i>',condition:a,callback:i=>{var n;return(n=game.messages.get(i.data("messageId")))==null?void 0:n.applyChatCardDamage(i,1)},group:"damage"},{name:game.i18n.localize("DND5E.ChatContextHealing"),icon:'<i class="fas fa-user-plus"></i>',condition:a,callback:i=>{var n;return(n=game.messages.get(i.data("messageId")))==null?void 0:n.applyChatCardDamage(i,-1)},group:"damage"},{name:game.i18n.localize("DND5E.ChatContextTempHP"),icon:'<i class="fas fa-user-clock"></i>',condition:a,callback:i=>{var n;return(n=game.messages.get(i.data("messageId")))==null?void 0:n.applyChatCardTemp(i)},group:"damage"},{name:game.i18n.localize("DND5E.ChatContextDoubleDamage"),icon:'<i class="fas fa-user-injured"></i>',condition:a,callback:i=>{var n;return(n=game.messages.get(i.data("messageId")))==null?void 0:n.applyChatCardDamage(i,2)},group:"damage"},{name:game.i18n.localize("DND5E.ChatContextHalfDamage"),icon:'<i class="fas fa-user-shield"></i>',condition:a,callback:i=>{var n;return(n=game.messages.get(i.data("messageId")))==null?void 0:n.applyChatCardDamage(i,.5)},group:"damage"},{name:game.i18n.localize("DND5E.ChatContextSelectHit"),icon:'<i class="fas fa-bullseye"></i>',condition:r,callback:([i])=>{var n;return(n=game.messages.get(i.dataset.messageId))==null?void 0:n.selectTargets(i,"hit")},group:"attack"},{name:game.i18n.localize("DND5E.ChatContextSelectMiss"),icon:'<i class="fas fa-bullseye"></i>',condition:r,callback:([i])=>{var n;return(n=game.messages.get(i.dataset.messageId))==null?void 0:n.selectTargets(i,"miss")},group:"attack"}),s}_activateActivityListeners(e){var s;(s=this.getAssociatedActivity())==null||s.activateChatListeners(this,e)}async _onTargetMouseDown(e){var n;e.stopPropagation();const s=e.currentTarget.dataset.uuid,a=fromUuidSync(s),r=((n=a==null?void 0:a.token)==null?void 0:n.object)??(a==null?void 0:a.getActiveTokens()[0]);if(!r||!a.testUserPermission(game.user,"OBSERVER"))return;const i=!e.shiftKey;if(r.controlled)r.release();else return r.control({releaseOthers:i}),canvas.animatePan(r.center)}_onTargetHoverIn(e){var i;const s=e.currentTarget.dataset.uuid,a=fromUuidSync(s),r=((i=a==null?void 0:a.token)==null?void 0:i.object)??(a==null?void 0:a.getActiveTokens()[0]);r&&r.isVisible&&(r.controlled||r._onHoverIn(e,{hoverOutOthers:!0}),this._highlighted=r)}_onTargetHoverOut(e){this._highlighted&&this._highlighted._onHoverOut(e),this._highlighted=null}applyChatCardDamage(e,s){const a=oe(this.rolls,{respectProperties:!0}).map(r=>({value:r.total,type:r.options.type,properties:new Set(r.options.properties??[])}));return Promise.all(canvas.tokens.controlled.map(r=>{var i;return(i=r.actor)==null?void 0:i.applyDamage(a,{multiplier:s,invertHealing:!1,ignore:!0})}))}selectTargets(e,s){if(!(canvas!=null&&canvas.ready))return;const a=e.closest("[data-message-id]").querySelectorAll(`.evaluation li.target.${s}`),r=new Set(Array.from(a).map(i=>i.dataset.uuid));canvas.tokens.releaseAll(),r.forEach(i=>{var c;const n=fromUuidSync(i);if(!n)return;const l=n.isToken?[(c=n.token)==null?void 0:c.object]:n.getActiveTokens();for(const g of l)g!=null&&g.isVisible&&n.testUserPermission(game.user,"OWNER")&&g.control({releaseOthers:!1})})}applyChatCardTemp(e){const s=this.rolls.reduce((a,r)=>a+r.total,0);return Promise.all(canvas.tokens.controlled.map(a=>{var r;return(r=a.actor)==null?void 0:r.applyTempHP(s)}))}_onClickDiceRoll(e){e.stopPropagation(),e.currentTarget.classList.toggle("expanded")}static onRenderChatPopout(e,[s]){var r;const a=s.querySelector(".header-button.close");a.innerHTML='<i class="fas fa-times"></i>',a.dataset.tooltip=game.i18n.localize("Close"),a.setAttribute("aria-label",a.dataset.tooltip),(r=s.querySelector(".message-metadata [data-context-menu]"))==null||r.remove()}static onRenderChatLog([e]){game.settings.get("dnd5e","autoCollapseItemCards")||requestAnimationFrame(()=>{setTimeout(()=>ui.chat.scrollBottom(),250)})}static activateListeners(){window.addEventListener("keydown",this.toggleModifiers,{passive:!0}),window.addEventListener("keyup",this.toggleModifiers,{passive:!0}),window.addEventListener("blur",()=>this.toggleModifiers({releaseAll:!0}),{passive:!0})}static toggleModifiers({releaseAll:e=!1}={}){document.querySelectorAll(".chat-sidebar > ol").forEach(s=>{for(const a of Object.values(KeyboardManager.MODIFIER_KEYS))game.keyboard.isModifierActive(a)&&!e?s.dataset[`modifier${a}`]="":delete s.dataset[`modifier${a}`]})}_onDelete(e,s){super._onDelete(e,s),dnd5e.registry.messages.untrack(this)}getAssociatedActivity(){var s,a;const e=fromUuidSync(this.getFlag("dnd5e","activity.uuid"));return e||((a=(s=this.getAssociatedItem())==null?void 0:s.system.activities)==null?void 0:a.get(this.getFlag("dnd5e","activity.id")))}getAssociatedActor(){if(this.speaker.scene&&this.speaker.token){const e=game.scenes.get(this.speaker.scene),s=e==null?void 0:e.tokens.get(this.speaker.token);if(s)return s.actor}return game.actors.get(this.speaker.actor)}getAssociatedItem(){const e=fromUuidSync(this.getFlag("dnd5e","item.uuid"));if(e)return e;const s=this.getAssociatedActor();if(!s)return;const a=this.getFlag("dnd5e","item.data")??this.getOriginatingMessage().getFlag("dnd5e","item.data");if(a)return new Item.implementation(a,{parent:s})}getAssociatedRolls(e){return dnd5e.registry.messages.get(this.id,e)}getOriginatingMessage(){return game.messages.get(this.getFlag("dnd5e","originatingMessage"))??this}_shimFlags(){var s;const e=foundry.utils.getProperty(this,"flags.dnd5e");if((e==null?void 0:e.messageType)==="usage"&&(e!=null&&e.use)){const a="The item data in the `dnd5e.use` flag on `ChatMessage` is now `dnd5e.item.type`, `dnd5e.item.id`, and `dnd5e.item.uuid`. Checking for usage can now be done using the `dnd5e.messageType` flag.";Object.defineProperty(e.use,"type",{get(){var r;return foundry.utils.logCompatibilityWarning(a,{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),(r=e.item)==null?void 0:r.type},configurable:!0,enumerable:!1}),Object.defineProperty(e.use,"itemId",{get(){var r;return foundry.utils.logCompatibilityWarning(a,{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),(r=e.item)==null?void 0:r.id},configurable:!0,enumerable:!1}),Object.defineProperty(e.use,"itemUuid",{get(){var r;return foundry.utils.logCompatibilityWarning(a,{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),(r=e.item)==null?void 0:r.uuid},configurable:!0,enumerable:!1})}else if((e==null?void 0:e.messageType)==="roll"&&(e!=null&&e.roll)){const a="The item data in the `dnd5e.roll` flag on `ChatMessage` is now `dnd5e.item.id` and `dnd5e.item.uuid`.";Object.defineProperty(e.roll,"itemId",{get(){var r;return foundry.utils.logCompatibilityWarning(a,{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),(r=e.item)==null?void 0:r.id},configurable:!0,enumerable:!1}),Object.defineProperty(e.roll,"itemUuid",{get(){var r;return foundry.utils.logCompatibilityWarning(a,{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),(r=e.item)==null?void 0:r.uuid},configurable:!0,enumerable:!1})}(s=e==null?void 0:e.item)!=null&&s.data&&Object.defineProperty(e,"itemData",{get(){return foundry.utils.logCompatibilityWarning("The `dnd5e.itemData` flag on `ChatMessage` is now `dnd5e.item.data`.",{since:"DnD5e 4.0",until:"DnD5e 4.4",once:!0}),this.item.data},configurable:!0,enumerable:!1})}}const k=class k{static resetRollGetters(t){return t._total=t._evaluateTotal(),t.resetFormula(),t}static replaceTerms(t,e){return t.terms=e.terms,t._total=t._evaluateTotal(),t.resetFormula(),t}static getDialogSetting(t,e){var a;const s=E.get(H.skipRollConfig.tag);if(m.log("getDialogSetting",["skip mode: "+s,x.keysPressed,e]),((a=e.flags)==null?void 0:a["ddb-game-log"])!==void 0)return!1;switch(s){case 1:return x.keysPressed.indexOf("Shift")!=-1;default:return t}}};T(k,"streamlineDDBRoll",async(t,e,s,a,r)=>{let i=null,n=game.user,l=s?S.findItemFromActor(r.speaker.actor,e,s):null;a.rolls=a.rolls.map(p=>Roll.fromJSON(p)),m.log("streamlineDDBRoll A",[t,e,s,a,r]),m.log("TEST REBUILD",[...a.rolls]);let c={},g=a.rolls[0];c.message={flavor:a.flavor,speaker:a.speaker,whisper:a.whisper,user:n,blind:a.blind||S.isPrivateRoll(r.rollMode),rollMode:r.rollMode},c.dialog={configure:!0},m.log("streamlineDDBRoll B",[c]),c.roll={formula:g.formula,consume:{resources:!1,spellSlot:!1},user:n,rolls:[],flags:{...a.flags,[V]:{processed:!0},dnd5e:{...a.flags.dnd5e},rsr5e:{processed:!0,quickRoll:!1}}},a.flags=c.roll.flags,m.log("streamlineDDBRoll C",[t===h.toHit.cls,t,h.toHit.cls,c]);try{switch(!0){case t===h.toHit.cls:i=M.getActivityFromItem(l,t)??null,m.log("streamlineDDBRoll D",[l,t,i]),await k.triggerAttack(i,a,r,c);break;case t===h.damage.cls:i=M.getActivityFromItem(l,t)??null,await k.triggerDamage(i,a,r,c);break;case(t===h.save.cls||t===h.check.cls):i=null,await k.triggerAbilityTest(t,a,r,c);break;case t===h.heal.cls:i=M.getActivityFromItem(l,t)??null,await k.triggerHeal(i,a,r,c);break;case t===h.custom.cls:i=null,await k.triggerCustomRoll(c,a,s,r);break;default:m.log("streamlineDDBRoll",[t])}}catch(p){return m.error("Error intercepting DDB roll",[p],{ui:!1,console:!0,permanent:!1}),ui.notifications.warn("Could not intercept the DDB roll"),!1}return!0}),T(k,"triggerAttack",async(t,e,s,a)=>{let r;if(!t)throw new Error("No associated activity found.");a.roll.flags.rsr5e={processed:!0},a.roll.flags.dnd5e.targets=S.getTargetDescriptors({user:a.message.user}),a.roll.flags.dnd5e.roll={type:I.attack},m.log("triggerAttack",[a,t]);let i=await t.rollAttack(a.roll,a.dialog,{create:!1,data:{...a.message}});if(i.length<1)return;k.replaceTerms(i[0],e.rolls[0]);const n=t.metadata.usage.chatCard;t.metadata.usage.chatCard=`modules/${V}/templates/ddb-attack-info.hbs`,r=await M.ddbglUse(t,a.roll,a.dialog,{create:!1,data:{rollMsg:e.content,rolls:i,user:a.message.user,speaker:a.message.speaker,flavor:`<span class="crlngn item-name">${t.item.name}:</span> <span class="crlngn ${e.flags["ddb-game-log"].cls.replace(" ","")}">${e.flags["ddb-game-log"].cls}</span>`,flags:{rsr5e:a.roll.flags.rsr5e,[V]:{processed:!0,rollMode:s.rollMode,cls:e.flags["ddb-game-log"].cls,flavor:`<span class="crlngn item-name">${t.item.name}:</span> <span class="crlngn ${e.flags["ddb-game-log"].cls.replace(" ","")}">${e.flags["ddb-game-log"].cls}</span>`}}}}),r.message.rolls=i,r.message.flags.dnd5e.targets=S.getTargetDescriptors({user:a.message.user}),r.message.flags=r.message.flags??{},m.log("USAGE RESULTS",[r,a.message,t.metadata]),await ge.create(r.message,{rollMode:s.rollMode}),t.metadata.usage.chatCard=n}),T(k,"triggerDamage",async(t,e,s,a)=>{let r;if(!t)throw new Error("No associated activity found.");t.attack||(r=await M.ddbglUse(t,a.roll,a.dialog,{create:!1}),await ge.create(r.message,{rollMode:s.rollMode})),m.log("triggerDamage",[a,t]);let i=await t.rollDamage(a.roll,a.dialog,{create:!1});i.length<1||(k.replaceTerms(i[0],e.rolls[0]),r||(r={message:a.message}),r.message.rolls=i,r.message.flags=r.message.flags??{},r.message.flags.rsr5e={processed:!0,quickRoll:!1},a.roll.flags.dnd5e.targets=S.getTargetDescriptors({user:a.message.user}),a.roll.flags.dnd5e.roll={type:I.damage},a.message.flags=a.roll.flags,a.message.flags={...a.message,dnd5e:a.roll.flags.dnd5e,rsr5e:a.roll.flags.rsr5e},await i[0].toMessage(a.message,{rollMode:s.rollMode}),t.attack||a.message.user.targets.forEach(n=>{n.control({releaseOthers:!1})}),setTimeout(()=>{S.removeTemplateForItem(t.item)},3e3))}),T(k,"triggerAbilityTest",async(t,e,s,a)=>{const r=S.parseDDBGLAbility(e.flags["ddb-game-log"].flavor);let i;a.roll.flags.dnd5e.roll={type:t===h.check.cls?"ability":"save"},r&&(a.roll.flags.dnd5e.roll={type:t===h.check.cls?I.abilityCheck:I.abilitySave,ability:r.abbrev}),a.message.flags={dnd5e:a.roll.flags.dnd5e,rsr5e:a.roll.flags.rsr5e},t===h.save.cls?i=await s.actor.rollSavingThrow({ability:r==null?void 0:r.abbrev},a.dialog,{create:!1}):t===h.check.cls&&(i=await s.actor.rollAbilityCheck({ability:r==null?void 0:r.abbrev},a.dialog,{create:!1}),m.log("triggerAbilityTest",[i,a.message])),!(i.length<1)&&(k.replaceTerms(i[0],e.rolls[0]),await i[0].toMessage(a.message,{rollMode:s.rollMode}))}),T(k,"triggerHeal",async(t,e,s,a)=>{let r;if(!t)throw new Error("No associated activity found.");r=await M.ddbglUse(t,a.roll,a.dialog,{create:!1}),m.log("ACTIVITY",[r]),await ge.create(r.message,{rollMode:s.rollMode});let i=await t.rollDamage(a.roll,a.dialog,{create:!1,data:{flags:a.message.flags}});i.length<1||(k.replaceTerms(i[0],e.rolls[0]),r||(r={message:a.message}),r.message.rolls=i,r.message.flags=r.message.flags??{},r.message.flags.rsr5e={processed:!0,quickRoll:!1},a.roll.flags.dnd5e.roll={type:I.healing},a.roll.flags.dnd5e.targets=S.getTargetDescriptors({user:a.message.user}),a.message.flags={...a.message,dnd5e:a.roll.flags.dnd5e,rsr5e:a.roll.flags.rsr5e},await i[0].toMessage(a.message,{rollMode:s.rollMode}))}),T(k,"triggerCustomRoll",async(t,e,s,a)=>{t.message={...t.message,dnd5e:{...t.roll.flags.dnd5e},rsr5e:t.roll.flags.rsr5e},await e.rolls[0].toMessage(t.message,{...a})});let X=k;const D=class D{};T(D,"socket"),T(D,"initialize",t=>{Hooks.once(Ne.READY,()=>{if(m.log("Attempting to register module..."),typeof socketlib>"u"){m.error("SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.");return}try{D.socket=socketlib.registerModule(W),t&&t(),m.log("SocketUtil | Module registered",[D.socket])}catch(e){m.log("Problem registering module",e)}})}),T(D,"registerCall",(t,e)=>{D.socket?(D.socket.register(t,e),m.log("SocketUtil - Registered callback",[D.socket,t])):m.log("SocketUtil - Failed to register callback (socket not initialized)",[D.socket,t])}),T(D,"sendMessage",(t,e)=>{m.log("SocketUtil - sendMessage",[t]),e&&e()}),T(D,"execAsGM",async(t,...e)=>{if(!D.socket){m.log("SocketUtil - Socket not initialized. Cannot execute as GM.");return}return await D.socket.executeAsGM(t,...e)}),T(D,"execAsUser",async(t,e,...s)=>{if(!D.socket){m.log("SocketUtil - Socket not initialized. Cannot execute as user.");return}const a=await D.socket.executeAsUser(t,e,...s);return m.log("SocketUtil - Executed as user.",[a]),a}),T(D,"execForAll",async(t,...e)=>{if(!D.socket){m.log("SocketUtil - Socket not initialized. Cannot execute for all clients.");return}return await D.socket.executeForEveryone(t,...e)});let Y=D;const w=class w{static init(){w.setupKeyListeners(),w.registerHooks()}static registerHooks(){Y.initialize(()=>{m.log("SocketUtil - initialized with socket",[Y.socket])}),Hooks.once(O.INIT,()=>{w.isMidiOn=S.isModuleOn("midi-qol"),m.log("Initiating module",[],!0),w.registerActivityHooks(),w.registerRollHooks(),w.registerChatHooks(),w.registerTemplateHooks()}),Hooks.once(O.READY,()=>{if(!game.socket){ui.notifications.error("⚠️ DDB Bridge: Foundry needs to be restarted to enable socket functionality.",{permanent:!0}),m.error("Foundry restart required to enable sockets.");return}E.registerSettings(),E.resetGamelogSettings(),w.registerSocketFunction()}),Hooks.on(O.CLOSE_SETTINGS_CONFIG,()=>{E.resetGamelogSettings()})}static registerSocketFunction(){Y.registerCall("DDBRoll",X.streamlineDDBRoll)}static registerActivityHooks(){Hooks.on(R.PRE_USE_ACTIVITY,et),Hooks.on(R.POST_USE_ACTIVITY,tt)}static registerRollHooks(){Hooks.on(R.ROLL_ATTACK_V2,dt),Hooks.on(R.ROLL_DAMAGE_V2,ct),Hooks.on(R.PRE_ROLL_V2,it),Hooks.on(R.PRE_ROLL_ATTACK_V2,lt),Hooks.on(R.PRE_ROLL_DAMAGE_V2,ot),Hooks.on(R.PRE_ROLL_SAVING_THROW,nt)}static registerChatHooks(){Hooks.on(R.RENDER_CHAT_MESSAGE,rt),Hooks.on(O.PRE_CREATE_CHAT_MESSAGE,st),Hooks.on(O.CREATE_CHAT_MESSAGE,at)}static registerTemplateHooks(){Hooks.on(O.REFRESH_MEASURED_TEMPLATE,ut)}static setupKeyListeners(){window.addEventListener("keydown",t=>{const e=t.key;w.keysPressed.indexOf(e)<0&&w.keysPressed.push(e)}),window.addEventListener("keyup",t=>{const e=t.key,s=w.keysPressed.indexOf(e);s>=0&&w.keysPressed.splice(s,1)})}};T(w,"keysPressed",[]),T(w,"isMidiOn",!1);let x=w;const et=async(o,t,e,s)=>(m.log(R.PRE_USE_ACTIVITY,[t,e,s,x.keysPressed]),!0),tt=async(o,t,e)=>(m.log(R.POST_USE_ACTIVITY,[o,t,e]),!0),st=(o,t,e,s)=>{var p,d,u,b,y;let a=!1,r,i,n,l,c=!1;const g={...o};if(i=S.isModuleOn("ddb-game-log")&&((p=o.getFlag("ddb-game-log","cls"))==null?void 0:p.toLowerCase())||"",c=o.getFlag(V,"processed")||!1,m.log(O.PRE_CREATE_CHAT_MESSAGE,[i,o,{...t},e]),i&&!c)if(r=t.actor||game.actors.get(t.speaker.actor)||null,n=((u=(d=t.flags)==null?void 0:d["ddb-game-log"])==null?void 0:u.itemId)||"",r){a=!0,g.flags={...g.flags,...t.flags},g.flags[V]&&(g.flags[V].processed=!0,c=!0);const f=document.createElement("div");f.innerHTML=t.flavor;let C=(b=f==null?void 0:f.querySelector("span:first-child"))==null?void 0:b.innerHTML.replace(":","");if(l=C?S.findItemFromActor(t.speaker.actor,n,C):null,!l&&(i===h.toHit.cls||i===h.damage.cls||i===h.heal.cls))return m.error("Could not find an item for the roll",[i,C,r.items]),!0;{g.rolls=g.rolls.map(U=>JSON.stringify(U.toJSON()));const A=S.getUserFromActor((y=g.speaker)==null?void 0:y.actor),v=E.get(H.ddbRollOwnership.tag)==2;m.log("playerMakesRoll",[E.get(H.ddbRollOwnership.tag)]),A&&v?Y.execAsUser("DDBRoll",A.id,i,n,C,g,t):X.streamlineDDBRoll(i,n,C,g,t)}}else return m.warn("Could not find the actor from DDB Gamelog roll"),!0;return!a||c},at=(o,t,e)=>{m.log(O.CREATE_CHAT_MESSAGE,[o,t,e])},rt=(o,t)=>{m.log(R.RENDER_CHAT_MESSAGE,[o,t]),Fe.enrichCard(o,t)},it=(o,t,e)=>{m.log(R.PRE_ROLL_V2,[o,t,e]),t.configure=X.getDialogSetting(t.configure,o)},nt=(o,t,e)=>{m.log(R.PRE_ROLL_SAVING_THROW,[o,t,e])},lt=(o,t,e)=>(m.log(R.PRE_ROLL_ATTACK_V2,[e,t,o]),!0),ot=(o,t,e)=>(m.log(R.PRE_ROLL_DAMAGE_V2,[o,t,e,x.keysPressed]),!0),ct=(o,t,e)=>{m.log(R.ROLL_DAMAGE_V2,[game])},dt=async(o,t)=>{m.log(R.ROLL_ATTACK_V2,[o,t])},ut=(o,t)=>{var a;if(!o.isOwner)return;const e=E.get("template-auto-target");let s=3;switch(e){case 1:s=3;break;case 2:s=0;break;default:return}(a=canvas.tokens.placeables[0])==null||a.setTarget(!1,{releaseOthers:!0});for(let r of canvas.tokens.placeables)r.document.disposition<=s&&o.shape.contains(r.center.x-o.x,r.center.y-o.y)&&r.setTarget(!r.isTargeted,{releaseOthers:!1})};x.init();
//# sourceMappingURL=module.js.map

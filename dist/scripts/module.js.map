{"version":3,"file":"module.js","sources":["../../src/constants/DDBGL.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/constants/Settings.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/LogUtil.mjs","../../src/components/ChatUtil.mjs","../../src/components/ActivityUtil.mjs","../../../dnd5e/module/dice/aggregate-damage-rolls.mjs","../../../dnd5e/module/applications/api/application.mjs","../../../dnd5e/module/applications/dice/roll-configuration-dialog.mjs","../../../dnd5e/module/applications/dice/damage-configuration-dialog.mjs","../../../dnd5e/module/utils.mjs","../../../dnd5e/module/dice/basic-roll.mjs","../../../dnd5e/module/dice/damage-roll.mjs","../../../dnd5e/module/dice/simplify-roll-formula.mjs","../../../dnd5e/module/documents/chat-message.mjs","../../src/components/RollUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const DDBGL_CLS = {\n  toHit: { prop: \"toHit\", cls: \"to hit\", actionType: \"attack\", rollType: \"attack\" },\n  damage: { prop: \"damage\", cls: \"damage\", actionType: \"damage\", rollType: \"damage\" },\n  heal: { prop: \"heal\", cls: \"heal\", actionType: \"heal\", rollType: \"heal\" },\n  save: { prop: \"save\", cls: \"save\", actionType: \"save\", rollType: \"ability\" },\n  check: { prop: \"check\", cls: \"check\", actionType: \"check\", rollType: \"ability\" },\n  custom: { prop: \"custom\", cls: \"roll\", actionType: \"roll\", rollType: \"custom\" },\n  cast: { prop: \"cast\", cls: \"cast\", actionType: \"cast\", rollType: \"cast\" }\n}\n","export const MODULE_ID = \"crlngn-ddb-bridge\";\nexport const MODULE_TITLE = \"Carolingian DDB Bridge\";\nexport const MODULE_SHORT = \"crlngn-ddb-bridge\";\nexport const DEBUG_TAG = [\n  `%cCarolingian DDB Bridge`,\n  `color: #003377; font-weight: bold;`,\n  `|`,\n];\n\nexport const ACTIVITY_TYPES = {\n  attack: 'attack'\n}\n\nexport const ROLL_TYPES = {\n  abilityCheck: \"ability\",\n  abilitySave: \"save\",\n  attack: \"attack\",\n  check: \"check\",\n  concentration: \"concentration\",\n  damage: \"damage\",\n  deathSave: \"death\",\n  formula: \"formula\",\n  healing: \"heal\",\n  custom: \"roll\",\n  skillCheck: \"skill\",\n  toolCheck: \"tool\"\n}\n\nexport const CHAR_ABILITIES = [\n  { abbrev: \"str\", name: \"strength\" },\n  { abbrev: \"dex\", name: \"dexterity\" },\n  { abbrev: \"con\", name: \"constitution\" },\n  { abbrev: \"int\", name: \"intelligence\" },\n  { abbrev: \"wis\", name: \"wisdom\" },\n  { abbrev: \"cha\", name: \"charisma\" }\n]\n\nexport const CLASS_PREFIX = 'crlngn';","/**\n * Foundry Core hooks\n * https://foundryvtt.com/api/classes/client.Hooks.html\n * https://foundryvtt.com/api/modules/hookEvents.html\n * */ \nexport const HOOKS_CORE = {\n  CHAT_MESSAGE: \"chatMessage\", \n  INIT: \"init\", \n  READY: \"ready\", \n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\", \n  CREATE_CHAT_MESSAGE: \"createChatMessage\", \n  RENDER_CHAT_MESSAGE: \"renderChatMessage\" ,\n  CREATE_MEASURED_TEMPLATE: \"createMeasuredTemplate\",\n  REFRESH_MEASURED_TEMPLATE: \"refreshMeasuredTemplate\",\n  CLOSE_SETTINGS_CONFIG: \"closeSettingsConfig\"\n}\n\n/**\n * Hooks for DnD5e 4.x\n * According to https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport const HOOKS_DND5E ={\n    // Rolls\n    PRE_ROLL_V2: \"dnd5e.preRollV2\",\n    PRE_ROLL_ABILITY_TEST: \"dnd5e.preRollAbilityTest\",\n    PRE_ROLL_ABILITY_SAVE: \"dnd5e.preRollAbilitySave\",\n    PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n    PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n    PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n    PRE_ROLL_CONCENTRATION: \"dnd5e.preRollConcentration\",\n    PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n    PRE_ROLL_DEATH_SAVE: \"dnd5e.preRollDeathSave\",\n    PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\", \n    PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n    PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n    PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n    PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n    PRE_ROLL_SKILL: \"dnd5e.preRollSkill\",\n    PRE_ROLL_TOOL_CHECK: \"dnd5e.preRollToolCheck\",\n    PRE_USE_ITEM: \"dnd5e.preUseItem\",\n    ROLL_ABILITY_TEST: \"dnd5e.rollAbilityTest\",\n    ROLL_ABILITY_SAVE: \"dnd5e.rollAbilitySave\",\n    ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n    ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n    ROLL_CONCENTRATION: \"dnd5e.rollConcentration\",\n    ROLL_DEATH_SAVE: \"dnd5e.rollDeathSave\",\n    ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n    ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\", \n    ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n    ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n    ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPCHitPoints\",\n    ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n    ROLL_SKILL: \"dnd5e.rollSkill\",\n    ROLL_TOOL_CHECK: \"dnd5e.rollToolCheck\",\n\n    // Rendering / Chat Messages\n    DISPLAY_CARD: \"dnd5e.preDisplayCardV2\",\n    PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n    RENDER_CHAT_MESSAGE: \"dnd5e.renderChatMessage\",\n\n    // Rest\n    PRE_LONG_REST: \"dnd5e.preLongRest\",\n    PRE_REST_COMPLETED: \"dnd5e.preRestCmpleted\",\n    PRE_SHORT_REST: \"dnd5e.preShortRest\",\n    REST_COMPLETED: \"dnd5e.restCmpleted\",\n\n    // Activities\n    ACTIVITY_CONSUMPTION: \"dnd5e.activityConsumption\",\n    POST_ACTIVITY_CONSUMPTION: \"dnd5e.postActivityConsumption\",\n    POST_CREATE_USAGE_MESSAGE: \"dnd5e.postCreateUsageMessage\",\n    POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n    PRE_ACTIVITY_CONSUMPTION: \"dnd5e.preActivityConsumption\",\n    PRE_CREATE_USAGE_MESSAGE: \"dnd5e.preCreateUsageMessage\",\n    PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n\n}\n\n/**\n * D&D Gamelog Hooks\n */\nexport const HOOKS_DDBGL = {\n  PENDING_ROLL: \"ddb-game-log.pendingRoll\",\n  FULFILLED_ROLL: \"ddb-game-log.fulfilledRoll\"\n}\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\nexport const SETTINGS = {\n  enableChatStyles: { \n    tag: \"enable-chat-styles\", \n    label: \"Enable styles for chat messages\", \n    hint: \"Adds styles to chat cards. When dark mode is selected on Foundry or DDB Gamelog, makes all chat cards dark as well. If you use my module Carolingian UI, you can disable this - both modules have dark mode for chat cards.\", \n    propType: Boolean, \n    inputType: SETTING_INPUT.checkbox, \n    default: true, \n    scope: SETTING_SCOPE.client, \n    config: true, \n    requiresReload: true \n  }, \n\n  ddbRollOwnership: { \n    tag: \"ddb-roll-ownership\", \n    label: \"Roll Ownership\",\n    hint: \"If you select Game master, the GM will be prompted to place templates for spells when needed. Option 2 will look for the user this actor is assigned to - if there is none, it will look for any user with 'owner' permission. Defaults to GM if no player is found.\",\n    propType: Number,\n    choices: {\n      1: \"Game master\", \n      2: \"Player who owns character\"\n    },\n    inputType: SETTING_INPUT.select,\n    default: 2,\n    scope: SETTING_SCOPE.world,\n    config: true\n  },\n\n  forceDDBGL: { \n    tag: \"force-ddbgl-settings\", \n    label: \"Force DDB Gamelog settings\",\n    hint: \"Automatically reset certain D&D Beyond Gamelog settings to make this module work better. Disabling this setting might disable integration with DDB Gamelog.\",\n    propType: Boolean,\n    inputType: SETTING_INPUT.checkbox,\n    default: true,\n    scope: SETTING_SCOPE.world,\n    config: true\n  },\n\n  removeTemplate: { \n    tag: \"remove-template\", \n    label: \"Remove Template after damage roll\",\n    hint: \"When a spell has a template, remove the template after damage is rolled. This will only affect DDB Gamelog rolls. If the template has no damage roll, it is not removed.\",\n    propType: Boolean,\n    inputType: SETTING_INPUT.checkbox,\n    default: true,\n    scope: SETTING_SCOPE.world,\n    config: true\n  }, \n\n  // templateAutoTarget: { \n  //   tag: \"template-auto-target\", \n  //   label: \"Auto target tokens on template draw?\",\n  //   hint: \"When the template is drawn on canvas, should tokens be automatically targeted? This affects rolls from DDB Gamelog and Foundry\",\n  //   propType: Boolean,\n  //   inputType: SETTING_INPUT.checkbox,\n  //   default: true,\n  //   scope: SETTING_SCOPE.world,\n  //   config: true\n  // },\n  \n  templateAutoTarget: { \n    tag: \"template-auto-target\", \n    label: \"Template Auto Targeting\",\n    hint: \"When the template is drawn on canvas, should tokens be automatically targeted? This affects rolls from DDB Gamelog and Foundry\",\n    propType: Number,\n    choices: {\n      1: \"1: Target all tokens\",\n      2: \"2: Target non-friendly\",\n      3: \"3: Do NOT auto target\",\n    },\n    inputType: SETTING_INPUT.checkbox,\n    default: true,\n    scope: SETTING_SCOPE.world,\n    config: true\n  },\n\n  skipRollConfig: { \n    tag: \"skip-roll-config\", \n    label: \"Skip roll config dialog?\",\n    hint: \"Options: (1) skips configuration, but pressing 'shift' while rolling will still open dialog; (2) Default behavior for Foundry rolls - press 'shift' to skip dialog. On rolls from D&D Beyond, dialog is never shown.\",\n    propType: Number,\n    choices: {\n      1: \"1: Skip for all rolls\",\n      2: \"2: Skip for DDB Gamelog rolls\"\n    },\n    inputType: SETTING_INPUT.select,\n    default: 1,\n    scope: SETTING_SCOPE.world,\n    config: true\n  },\n\n  debugMode: { \n    tag: \"debug-mode\", \n    label: \"Debug Mode\",\n    hint: \"Enable or disable debug messages on browser console\",\n    propType: Boolean,\n    inputType: SETTING_INPUT.checkbox,\n    default: true,\n    scope: SETTING_SCOPE.client,\n    config: true\n  },\n\n}","import { CHAR_ABILITIES } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]);\n    return selectedTargets;\n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n  // static getTargetDescriptors({ actorId, user }) {\n  //   const targets = new Map();\n  //   //  let currUser = user || (actorId ? GeneralUtil.getUserFromActor(actorId) : game.user) || []\n  //   const userTargets = getClientTargets() || []; \n  //   LogUtil.log(\"getTargetDescriptors\", [userTargets]);\n\n  //   for ( const token of currUser.targets ) {\n  //     const { name } = token;\n  //     const { img, system, uuid, statuses } = token.actor ?? {};\n  //     if ( uuid ) {\n  //       const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n  //       targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n  //     } \n  //   }\n  //   return Array.from(targets.values());\n  // }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n/**\n * Checks if module is currently installed and active\n * @param {string} moduleName \n * @returns \n */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * Grab the ability name from the flavor text of DDBGL,\n   * return an object containing also the abbreviation\n   * @param {*} flavorStr \n   * @returns \n   */\n  static parseDDBGLAbility(flavorStr){ \n    let abilityObj = null;\n    const ddbglStr = `${flavorStr}`;\n    // const test = `<span class=\"action\" data-ddb-game-log-click-handler=\"open_card\">Constitution:</span> <span class=\"rolltype save\">Save</span> <span class=\"rollkind \"></span>`;\n    CHAR_ABILITIES.forEach(ab=>{\n      if(ddbglStr.toLowerCase().includes(ab.name)){\n        abilityObj = ab;\n      };\n    })\n    return abilityObj;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getUserFromActor(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer;\n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    // let gm = game.users.find(u => u.isGM===true);\n    LogUtil.log(\"getUserFromActor\", [actorId, owner]);\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n}\n","import { MODULE_ID, MODULE_SHORT } from \"../constants/General.mjs\";\n// import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { SETTINGS } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\nexport class SettingsUtil {\n    /**\n     * Registers settings for this module\n     */\n    static registerSettings(){\n      document.querySelector(\"body\").classList.add(MODULE_SHORT); \n      \n      /**\n       * Register each of the settings defined in the SETTINGS constant \n       */\n      const settingsList = Object.entries(SETTINGS);\n      settingsList.forEach(async(entry) => {\n        const setting = entry[1]; \n        LogUtil.log(\"Registering... \",[entry]);\n\n        const settingObj = { \n          name: setting.label,\n          hint: setting.hint,\n          default: setting.default,\n          type: setting.propType,\n          scope: setting.scope,\n          config: setting.config,\n          requiresReload: setting.requiresReload || false,\n          onChange: value => SettingsUtil.apply(setting.tag, value)\n        }\n        if(setting.choices){\n          settingObj.choices = setting.choices;\n        }\n\n        await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n        /* if the setting has never been defined, set as default value */\n        if(SettingsUtil.get(setting.tag)===undefined){\n          SettingsUtil.set(setting.tag, setting.default);\n        }\n        LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n      });\n\n      // apply chat style settings\n      if(SettingsUtil.get(SETTINGS.enableChatStyles.tag)){ \n        document.querySelector(\"body\").classList.add(\"crlngn-chat\"); \n      }\n      \n    }\n\n    /**\n     * Retrieve the value of a setting for this module\n     * @param {String} settingName \n     * @param {String} moduleName \n     * @returns {*} // current value of the setting\n     */\n    static get(settingName, moduleName=MODULE_ID){\n      if(!settingName){ return null; }\n\n      let setting = false;\n\n      if(moduleName===MODULE_ID){\n        setting = game.settings.get(moduleName, settingName);\n      }else{\n        const client = game.settings.storage.get(\"client\");\n        let selectedSetting = client[`${moduleName}.${settingName}`];\n        //\n        if(selectedSetting===undefined){\n          const world = game.settings.storage.get(\"world\");\n          selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n        }\n        setting = selectedSetting?.value;\n        LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n      }\n\n      return setting;\n    }\n    /**\n     * Retrieve the value of a setting for this module\n     * @param {String} settingName \n     * @param {String} moduleName \n     * @returns {*} // current value of the setting\n     */\n    static set(settingName, newValue, moduleName=MODULE_ID){ \n      if(!settingName){ return false; }\n\n      let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n      if(!selectedSetting){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n      } \n\n      try{\n        if(selectedSetting){\n          // game.settings.set(moduleName, settingName, newValue);\n          selectedSetting.update({value: newValue});\n        }\n        LogUtil.log(\"Able to change setting\",[settingName, selectedSetting]);\n      }catch(e){\n        LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n      }\n\n      return true;\n      \n    }\n\n    /**\n     * Apply current setting for Text Size\n     */\n    static apply(settingTag, value){\n      switch(settingTag){\n        case SETTINGS.forceDDBGL.tag:\n          SettingsUtil.resetGamelogSettings();\n          break;\n        default:\n          // do nothing\n      }\n    }\n\n    static resetGamelogSettings(){\n      const isDDBGLOn = GeneralUtil.isModuleOn(\"ddb-game-log\");\n      if(!isDDBGLOn){ return; }\n\n      const itemDescriptionsOn = SettingsUtil.get(\"enable_chatcards\", \"ddb-game-log\");\n      const forceSettingsOn = SettingsUtil.get(SETTINGS.forceDDBGL.tag);\n\n      LogUtil.log(\"resetGamelogSettings\", [itemDescriptionsOn, forceSettingsOn])\n\n      if(!itemDescriptionsOn && forceSettingsOn){\n        SettingsUtil.set(\"enable_chatcards\", true, \"ddb-game-log\");\n      }\n    }\n}\n\n","import { DEBUG_TAG } from \"../constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class LogUtil {\n    /**\n     * Outputs information on console, adding module name and reference\n     * @param {string} ref - Reference information to log after module name\n     * @param {any[]} data - data to log on console\n     */\n    static log(ref=\"\", data=[], bypassSettings=false){\n      try{\n        const debugSetting = SettingsUtil.get(SETTINGS.debugMode.tag);\n        const isDebugModeOn = bypassSettings || debugSetting;\n        if(!isDebugModeOn){ return };\n\n        console.log(...DEBUG_TAG, ref, ...data);\n      }catch(e){\n        console.log(...DEBUG_TAG, ref, ...data);\n      }\n    }\n\n    /**\n     * Outputs information on console, adding module name and reference\n     * @param {string} ref - Reference information to log after module name\n     * @param {any[]} data - data to log on console\n     */\n    static warn(ref=\"\", data=[]){\n      console.warn(...DEBUG_TAG, ref, ...data);\n    }\n\n    /**\n     * Logs an error on the console and/or ui notification\n     * @param {string} strRef - Reference string for the error. \n     * @param {object} options - \n     */\n    static error(strRef, data=[], options={ ui:false, console:true, permanent:false }){ // = { ui:false, console:true, permanent:false }) {\n        if(options.ui){\n            // console.log(ui.notifications);\n            ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n        }\n        if(options.console) console.error(...DEBUG_TAG, strRef, ...data);\n    }\n}\n\n","import { ROLL_TYPES } from \"../constants/General.mjs\";\nimport \"../styles/chat.css\"\nimport { LogUtil } from \"./LogUtil.mjs\";\n\nexport class ChatUtil {\n\n  static enrichCard(chatMessage, html){\n    const rollType = chatMessage.flags?.dnd5e?.activity?.type || chatMessage.flags?.dnd5e?.roll?.type || \"custom\";\n    html.classList.remove('ddb-game-log-open-card');\n    html.classList.add('crlngn');\n    html.classList.add(rollType);\n    \n\n    // let senderSubtitle = html.querySelector(\".message-sender .subtitle\");\n    // let senderFlavor = html.querySelector(\".message-sender .flavor-text\");\n    // let headerFlavor = html.querySelector(\".message-header .flavor-text\");\n    /*\n    // replace author subtitle with flavor text\n    if(!chatMessage.flags?.[\"ddb-game-log\"]){\n      const flavorText = headerFlavor?.innerHTML;\n      if(flavorText){\n        if(senderSubtitle) senderSubtitle.innerHTML = flavorText;\n        if(senderFlavor && !senderFlavor.innerHTML) senderFlavor.innerHTML = flavorText;\n      }else{\n        if(senderSubtitle) senderSubtitle.innerHTML = \"Message\";\n      }\n      \n      senderSubtitle.innerHTML = ChatUtil.formatFlavorText(senderSubtitle.innerHTML, chatMessage, rollType);\n    }*/\n    \n    if(chatMessage.flags?.[\"ddb-game-log\"]){\n      html.classList.add('ddbgl');\n    }\n  }\n\n  /**\n   * Makes default Foundry messages have flavor styling \n   * similar to DDB Gamelog messages\n   */\n  static formatFlavorText(flavorText, chatMessage, rollType){\n    const actor = game.actors.get(chatMessage.speaker?.actor || \"\") || null;\n    const item = actor?.items.get(chatMessage.flags?.dnd5e?.item?.id || \"\") || null;\n    let newFlavor = flavorText || \"Message\";\n    \n    if(rollType===ROLL_TYPES.attack){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){ \n        newFlavor = `<span class=\"item-name\">` + item?.name;\n        newFlavor = newFlavor + `:</span> <span class=\"tohit\">To Hit</span>`;\n      }\n    }else if(rollType===ROLL_TYPES.damage){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){\n        newFlavor = `<span class=\"item-name\">` + item?.name;\n        newFlavor = newFlavor + `:</span> <span class=\"damage\">Damage</span>`;\n      }\n    }else if(rollType===ROLL_TYPES.healing){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){\n        newFlavor = `<span class=\"item-name\">` + (item?.name ?? \"Action\");\n        newFlavor = newFlavor + `:</span> <span class=\"heal\">Heal</span>`;\n      }\n    }else if(flavorText.includes(\"Skill Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Skill Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(flavorText.includes(\"Ability Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Ability Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(flavorText.includes(\"Saving Throw\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Saving Throw\",`:</span> <span class=\"save\">Save</span>`);\n    }else if((rollType===\"tool\" || rollType===\"check\") && flavorText.includes(\"Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(item){\n      newFlavor = `<span class=\"item-name\">${item.type}</span>`;\n    }else if(!newFlavor){\n      newFlavor = `<span class=\"item-name\">Info</span>`;\n    }\n\n    return newFlavor;\n  }\n}","import { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\nexport class ActivityUtil {\n\n  /**\n   * If the item has an associated activity, return it,\n   * according to the type of roll passed from DDB Gamelog\n   * @param {*} item \n   * @param {*} ddbglCls \n   * @returns \n   */\n  static getActivityFromItem(item, ddbglCls){ \n    let selectedActivity = null;\n    if(!item){ return selectedActivity };\n\n    const activities = item.system?.activities;\n    const hasAttack = item.hasAttack;\n    const hasSave = item.hasSave;\n\n    LogUtil.log(\"getActivityFromItem\", [activities, typeof activities, Array.isArray(activities)]); \n\n    const activityByType = (type) => {\n      // const activityList = Object.values(activities);\n      const activity = activities.find(act => { \n        return act.type == type;\n      });\n      LogUtil.log(\"activityByType\", [item, type, activities.size, activity]); \n      return activity;\n    }\n\n    switch(ddbglCls){ \n      case DDBGL_CLS.toHit.cls: // attack roll\n        selectedActivity = activityByType(DDBGL_CLS.toHit.actionType);\n        break;\n      case DDBGL_CLS.damage.cls: // damage roll\n        if(hasAttack){ // damage from attack roll\n          selectedActivity = activityByType(DDBGL_CLS.toHit.actionType);\n        }else if(hasSave){ // damage from saving throw\n          selectedActivity = activityByType(DDBGL_CLS.save.actionType);\n        }else{\n          selectedActivity = activityByType(DDBGL_CLS.damage.actionType);\n        }\n        break;\n      case DDBGL_CLS.check.cls:\n        selectedActivity = activityByType(DDBGL_CLS.check.actionType);\n        break;\n      case DDBGL_CLS.save.cls:\n        selectedActivity = activityByType(DDBGL_CLS.save.actionType);\n        break;\n      case DDBGL_CLS.heal.cls:\n        selectedActivity = activityByType(DDBGL_CLS.heal.actionType);\n        break;\n      case DDBGL_CLS.cast.cls:\n        selectedActivity = activityByType(DDBGL_CLS.cast.actionType);\n        break;\n      default:\n        //\n    }\n\n    return selectedActivity ?? Array.from(activities.keys())[0] ?? null;\n  }\n\n  /**\n   * Activate this activity. \n   * Like use() from ActivityMixin in dnd5e, but it does not roll attack / damage again\n   * @param {Activity} activity\n   * @param {ActivityUseConfiguration} usage        Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialog    Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} message  Configuration info for the created chat message.\n   * @returns {Promise<ActivityUsageResults|void>}  Details on the usage process if not canceled.\n   */\n  static async ddbglUse(activity, usage={}, dialog={}, message={}, triggerFinalActions=false) {\n    if(!activity){\n      ui.notifications.error(\"No activity found\", { localize: false });\n      return;\n    }\n    if ( !activity.item.isEmbedded || activity.item.pack ) return;\n    if ( !activity.item.isOwner ) {\n      ui.notifications.error(\"DND5E.DocumentUseWarn\", { localize: true });\n      return;\n    }\n    if ( !activity.canUse ) {\n      ui.notifications.error(\"DND5E.ACTIVITY.Warning.UsageNotAllowed\", { localize: true });\n      return;\n    }\n\n    // Create an item clone to work with throughout the rest of the process\n    let item = activity.item.clone({}, { keepId: true });\n\n    const usageConfig = activity._prepareUsageConfig(usage);\n    \n    if(usageConfig.create?.measuredTemplate){\n      ui.notifications?.info(\"Click the map to place the template and see the roll. Right click to cancel\", { localize: false });\n    }\n\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true,\n      applicationClass: activity.metadata.usage.dialog\n    }, dialog);\n\n    const messageConfig = foundry.utils.mergeObject({\n      create: true,\n      data: {\n        flags: {\n          dnd5e: {\n            ...activity.messageFlags,\n            messageType: \"usage\",\n            use: {\n              effects: activity.applicableEffects?.map(e => e.id)\n            }\n          },\n          rsr5e: { processed: true, quickRoll: false }\n        }\n      },\n      hasConsumption: usageConfig.hasConsumption\n    }, message);\n\n    /**\n     * \n     * @function dnd5e.preUseActivity\n     * @memberof hookEvents\n     * @param {Activity} activity                           Activity being used.\n     * @param {ActivityUseConfiguration} usageConfig        Configuration info for the activation.\n     * @param {ActivityDialogConfiguration} dialogConfig    Configuration info for the usage dialog.\n     * @param {ActivityMessageConfiguration} messageConfig  Configuration info for the created chat message.\n     * @returns {boolean}  Explicitly return `false` to prevent activity from being used.\n     */\n    if ( Hooks.call(\"dnd5e.preUseActivity\", activity, usageConfig, dialogConfig, messageConfig) === false ) return;\n\n    // Handle scaling\n    await activity._prepareUsageScaling(usageConfig, messageConfig, item);\n    activity = item.system.activities.get(activity.id);\n\n    // Handle consumption\n    const updates = await activity.consume(usageConfig, messageConfig);\n    if ( updates === false ) return;\n    const results = { effects: [], templates: [], updates };\n\n    // Create concentration effect & end previous effects\n    if ( usageConfig.concentration?.begin ) {\n      const effect = await item.actor.beginConcentrating(activity, { \"flags.dnd5e.scaling\": usageConfig.scaling });\n\n      if ( effect ) {\n        results.effects ??= [];\n        results.effects.push(effect);\n        foundry.utils.setProperty(messageConfig.data, \"flags.dnd5e.use.concentrationId\", effect.id);\n      }\n      if ( usageConfig.concentration?.end ) {\n        const deleted = await item.actor.endConcentration(usageConfig.concentration.end);\n        results.effects.push(...deleted);\n      }\n    }\n\n    // Create chat message\n    messageConfig.data.rolls = (messageConfig.data.rolls ?? []).concat(updates.rolls);\n    results.message = await ActivityUtil.createUsageMessage(activity, messageConfig);\n\n    LogUtil.log(\"messageConfig\", [ message, results.message]);\n    results.message.dnd5e = messageConfig.flags?.dnd5e ?? {};\n    results.message.dnd5e.targets = GeneralUtil.getTargetDescriptors({ actorId: results.message.speaker.actor });\n    results.message.flags = {\n      ...results.message.flags, \n      rsr5e: { processed: true }\n    }\n\n    // Perform any final usage steps\n    await activity._finalizeUsage(usageConfig, results); \n\n    if ( Hooks.call(\"dnd5e.postUseActivity\", activity, usageConfig, results) === false ) return results;\n\n    // Trigger any primary action provided by this activity\n    if(triggerFinalActions && activity._triggerSubsequentActions){\n      activity._triggerSubsequentActions(usageConfig, results);\n    }\n\n    return results; \n  }\n\n  /* -------------------------------------------- */\n  /**\n   * Display a chat message for this usage.\n   * @param {Activity} activity\n   * @param {ActivityMessageConfiguration} message  Configuration for the message\n   * @returns {Promise<ChatMessage5e|object>}\n   * @protected\n   */\n  static async createUsageMessage(activity, message) {\n    let context = await activity._usageChatContext(message);\n    // context.rollMsg = message.data.rollMsg;\n    let rollData = await _buildRollData(message.data.rolls, activity);\n    context = {\n      ...context,\n      rolls: rollData\n    }\n    \n    LogUtil.log(\"createUsageMessage\", [activity.metadata.usage.chatCard, context]); \n\n    const messageConfig = foundry.utils.mergeObject({\n      rollMode: game.settings.get(\"core\", \"rollMode\"),\n      data: {\n        content: await renderTemplate(activity.metadata.usage.chatCard, context),\n        speaker: ChatMessage.getSpeaker({ actor: activity.item.actor }),\n        flags: {\n          core: { canPopout: true },\n          rsr5e: { processed: true }\n        }\n      }\n    }, message);\n\n    Hooks.callAll(\"dnd5e.preCreateUsageMessage\", activity, messageConfig);\n\n    ChatMessage.applyRollMode(messageConfig.data, messageConfig.rollMode);\n    const card = messageConfig.create === false ? messageConfig.data : await ChatMessage.create(messageConfig.data);\n\n    Hooks.callAll(\"dnd5e.postCreateUsageMessage\", activity, card);\n\n    return card;\n  }\n}\n\nconst _buildRollData = async(rolls, activity) => {\n  let rollData = [];\n\n  rollData = await Promise.all(rolls.map(async(r)=>{\n    const tooltipHtml = await r.getTooltip();\n    return {\n      ...r,\n      formula: r.formula,\n      total: r.total,\n      tooltipHtml: tooltipHtml\n    }\n  }));\n  // LogUtil.log(\"_buildRollData / rollData\",[rollData]);\n\n  return rollData\n}","const { OperatorTerm, RollTerm } = foundry.dice.terms;\n\n/**\n * Parse the provided rolls, splitting parts based on damage types & properties, taking flavor into account.\n * @param {DamageRoll[]} rolls                   Evaluated damage rolls to aggregate.\n * @param {object} [options={}]\n * @param {boolean} [options.respectProperties]  Should damage properties also affect grouping?\n * @returns {DamageRoll[]}\n */\nexport default function aggregateDamageRolls(rolls, { respectProperties }={}) {\n  const makeHash = (type, properties=[]) => [type, ...(respectProperties ? Array.from(properties).sort() : [])].join();\n\n  // Split rolls into new sets of terms based on damage type & properties\n  const types = new Map();\n  for ( const roll of rolls ) {\n    if ( !roll._evaluated ) throw new Error(\"Only evaluated rolls can be aggregated.\");\n    for ( const chunk of chunkTerms(roll.terms, roll.options.type) ) {\n      const key = makeHash(chunk.type, roll.options.properties);\n      if ( !types.has(key) ) types.set(key, { type: chunk.type, properties: new Set(), terms: [] });\n      const data = types.get(key);\n      data.terms.push(new OperatorTerm({ operator: chunk.negative ? \"-\" : \"+\" }), ...chunk.terms);\n      if ( roll.options.properties ) data.properties = data.properties.union(new Set(roll.options.properties));\n    }\n  }\n\n  // Create new damage rolls based on the aggregated terms\n  const newRolls = [];\n  for ( const type of types.values() ) {\n    const roll = new CONFIG.Dice.DamageRoll();\n    roll.terms = type.terms;\n    roll._total = roll._evaluateTotal();\n    roll._evaluated = true;\n    roll.options = { type: type.type, properties: Array.from(type.properties) };\n    roll.resetFormula();\n    newRolls.push(roll);\n  }\n\n  return newRolls;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Split terms into groups based on operators. Addition & subtraction will split groups while multiplication and\n * division will keep groups together. These groups also contain information on contained types written in flavor\n * and whether they are negative.\n * @param {RollTerm[]} terms  Terms to chunk.\n * @param {string} type       Type specified in the roll as a whole.\n * @returns {{ terms: RollTerm[], negative: boolean, type: string }[]}\n */\nfunction chunkTerms(terms, type) {\n  const pushChunk = () => {\n    currentChunk.type ??= type;\n    chunks.push(currentChunk);\n    currentChunk = null;\n    negative = false;\n  };\n  const isValidType = t => ((t in CONFIG.DND5E.damageTypes) || (t in CONFIG.DND5E.healingTypes));\n  const chunks = [];\n  let currentChunk;\n  let negative = false;\n\n  for ( let term of terms ) {\n    // Plus or minus operators split chunks\n    if ( (term instanceof OperatorTerm) && [\"+\", \"-\"].includes(term.operator) ) {\n      if ( currentChunk ) pushChunk();\n      if ( term.operator === \"-\" ) negative = !negative;\n      continue;\n    }\n\n    // All other terms get added to the current chunk\n    term = RollTerm.fromData(foundry.utils.deepClone(term.toJSON()));\n    currentChunk ??= { terms: [], negative, type: null };\n    currentChunk.terms.push(term);\n    const flavor = term.flavor?.toLowerCase().trim();\n    if ( isValidType(flavor) ) {\n      currentChunk.type ??= flavor;\n      term.options.flavor = \"\";\n    }\n  }\n\n  if ( currentChunk ) pushChunk();\n  return chunks;\n}\n","const { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\n\n/**\n * Base application from which all system applications should be based.\n */\nexport default class Application5e extends HandlebarsApplicationMixin(ApplicationV2) {\n  /** @override */\n  static DEFAULT_OPTIONS = {\n    classes: [\"dnd5e2\"],\n    window: {\n      subtitle: \"\"\n    }\n  };\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * A reference to the window subtitle.\n   * @type {string}\n   */\n  get subtitle() {\n    return game.i18n.localize(this.options.window.subtitle ?? \"\");\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _configureRenderOptions(options) {\n    super._configureRenderOptions(options);\n    if ( options.isFirstRender && this.hasFrame ) {\n      options.window ||= {};\n      options.window.subtitle ||= this.subtitle;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _prepareContext(options) {\n    const context = await super._prepareContext(options);\n    context.CONFIG = CONFIG.DND5E;\n    context.inputs = { ...foundry.applications.fields, ...dnd5e.applications.fields };\n    return context;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _renderFrame(options) {\n    const frame = await super._renderFrame(options);\n\n    // Subtitles\n    const subtitle = document.createElement(\"h2\");\n    subtitle.classList.add(\"window-subtitle\");\n    frame.querySelector(\".window-title\").insertAdjacentElement(\"afterend\", subtitle);\n\n    // Icon\n    if ( (options.window?.icon ?? \"\").includes(\".\") ) {\n      const icon = frame.querySelector(\".window-icon\");\n      const newIcon = document.createElement(options.window.icon?.endsWith(\".svg\") ? \"dnd5e-icon\" : \"img\");\n      newIcon.classList.add(\"window-icon\");\n      newIcon.src = options.window.icon;\n      icon.replaceWith(newIcon);\n    }\n\n    return frame;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _updateFrame(options) {\n    super._updateFrame(options);\n    if ( options.window && (\"subtitle\" in options.window) ) {\n      this.element.querySelector(\".window-header > .window-subtitle\").innerText = options.window.subtitle;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _onRender(context, options) {\n    super._onRender(context, options);\n\n    // Allow multi-select tags to be removed when the whole tag is clicked.\n    this.element.querySelectorAll(\"multi-select\").forEach(select => {\n      if ( select.disabled ) return;\n      select.querySelectorAll(\".tag\").forEach(tag => {\n        tag.classList.add(\"remove\");\n        tag.querySelector(\":scope > span\")?.classList.add(\"remove\");\n      });\n    });\n\n    // Add special styling for label-top hints.\n    this.element.querySelectorAll(\".label-top > p.hint\").forEach(hint => {\n      const label = hint.parentElement.querySelector(\":scope > label\");\n      if ( !label ) return;\n      hint.ariaLabel = hint.innerText;\n      hint.dataset.tooltip = hint.innerHTML;\n      hint.innerHTML = \"\";\n      label.insertAdjacentElement(\"beforeend\", hint);\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Disable form fields that aren't marked with the `interface-only` class.\n   */\n  _disableFields() {\n    const selector = `.window-content :is(${[\n      \"INPUT\", \"SELECT\", \"TEXTAREA\", \"BUTTON\", \"DND5E-CHECKBOX\", \"COLOR-PICKER\", \"DOCUMENT-TAGS\",\n      \"FILE-PICKER\", \"HUE-SLIDER\", \"MULTI-SELECT\", \"PROSE-MIRROR\", \"RANGE-PICKER\", \"STRING-TAGS\"\n    ].join(\", \")}):not(.interface-only)`;\n    for ( const element of this.element.querySelectorAll(selector) ) {\n      if ( element.tagName === \"TEXTAREA\" ) element.readOnly = true;\n      else element.disabled = true;\n    }\n  }\n}\n","import Application5e from \"../api/application.mjs\";\n\nconst { DiceTerm } = foundry.dice.terms;\n\n/**\n * Dialog rendering options for a roll configuration dialog.\n *\n * @typedef {object} BasicRollConfigurationDialogOptions\n * @property {typeof BasicRoll} rollType  Roll type to use when constructing final roll.\n * @property {object} [default]\n * @property {number} [default.rollMode]  Default roll mode to have selected.\n * @property {BasicRollConfigurationDialogRenderOptions} [rendering]\n */\n\n/**\n * @typedef BasicRollConfigurationDialogRenderOptions\n * @property {object} [dice]\n * @property {number} [dice.max=5]               The maximum number of dice to display in the large dice breakdown. If\n *                                               the given rolls contain more dice than this, then the large breakdown\n *                                               is not shown.\n * @property {Set<string>} [dice.denominations]  Valid die denominations to display in the large dice breakdown. If any\n *                                               of the given rolls contain an invalid denomination, then the large\n *                                               breakdown is not shown.\n */\n\n/**\n * Dialog for configuring one or more rolls.\n *\n * @param {BasicRollProcessConfiguration} [config={}]         Initial roll configuration.\n * @param {BasicRollMessageConfiguration} [message={}]        Message configuration.\n * @param {BasicRollConfigurationDialogOptions} [options={}]  Dialog rendering options.\n */\nexport default class RollConfigurationDialog extends Application5e {\n  constructor(config={}, message={}, options={}) {\n    super(options);\n\n    this.#config = config;\n    this.#message = message;\n    this.#buildRolls(foundry.utils.deepClone(this.#config));\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  static DEFAULT_OPTIONS = {\n    classes: [\"roll-configuration\", \"standard-form\"],\n    tag: \"form\",\n    window: {\n      title: \"DND5E.RollConfiguration.Title\",\n      icon: \"fa-solid fa-dice\",\n      minimizable: false\n    },\n    form: {\n      handler: RollConfigurationDialog.#handleFormSubmission\n    },\n    position: {\n      width: 400\n    },\n    rendering: {\n      dice: {\n        max: 5,\n        denominations: new Set([\"d4\", \"d6\", \"d8\", \"d10\", \"d12\", \"d20\"])\n      }\n    }\n  };\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  static PARTS = {\n    formulas: {\n      template: \"systems/dnd5e/templates/dice/roll-formulas.hbs\"\n    },\n    configuration: {\n      template: \"systems/dnd5e/templates/dice/roll-configuration.hbs\"\n    },\n    buttons: {\n      template: \"systems/dnd5e/templates/dice/roll-buttons.hbs\"\n    }\n  };\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll type to use when constructing the rolls.\n   * @type {typeof BasicRoll}\n   */\n  static get rollType() {\n    return CONFIG.Dice.BasicRoll;\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Roll configuration.\n   * @type {BasicRollProcessConfiguration}\n   */\n  #config;\n\n  get config() {\n    return this.#config;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configuration information for the roll message.\n   * @type {BasicRollMessageConfiguration}\n   */\n  #message;\n\n  get message() {\n    return this.#message;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * The rolls being configured.\n   * @type {BasicRoll[]}\n   */\n  #rolls;\n\n  get rolls() {\n    return this.#rolls;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll type to use when constructing the rolls.\n   * @type {typeof BasicRoll}\n   */\n  get rollType() {\n    return this.options.rollType ?? this.constructor.rollType;\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Identify DiceTerms in this app's rolls.\n   * @returns {{ icon: string, label: string }[]}\n   * @protected\n   */\n  _identifyDiceTerms() {\n    let dice = [];\n    let shouldDisplay = true;\n\n    /**\n     * Determine if a given term is displayable.\n     * @param {RollTerm} term  The term.\n     * @returns {boolean|void}\n     */\n    const identifyTerm = term => {\n      if ( !(term instanceof DiceTerm) ) return;\n      // If any of the terms have complex components, do not attempt to display only some dice, bail out entirely.\n      if ( !Number.isFinite(term.number) || !Number.isFinite(term.faces) ) return shouldDisplay = false;\n      // If any of the terms are of an unsupported denomination, do not attempt to display only some dice, bail out\n      // entirely.\n      if ( !this.options.rendering.dice.denominations.has(term.denomination) ) return shouldDisplay = false;\n      for ( let i = 0; i < term.number; i++ ) dice.push({\n        icon: `systems/dnd5e/icons/svg/dice/${term.denomination}.svg`,\n        label: term.denomination,\n        denomination: term.denomination\n      });\n    };\n\n    /**\n     * Identify any DiceTerms in the given terms.\n     * @param {RollTerm[]} terms  The terms.\n     */\n    const identifyDice = (terms=[]) => {\n      for ( const term of terms ) {\n        identifyTerm(term);\n        if ( \"dice\" in term ) identifyDice(term.dice);\n      }\n    };\n\n    this.rolls.forEach(roll => identifyDice(roll.terms));\n    if ( dice.length > this.options.rendering.dice.max ) {\n      // Compact dice display.\n      const byDenom = dice.reduce((obj, { icon, denomination }) => {\n        obj[denomination] ??= { icon, count: 0 };\n        obj[denomination].count++;\n        return obj;\n      }, {});\n      dice = Object.entries(byDenom).map(([d, { icon, count }]) => ({ icon, label: `${count}${d}` }));\n      if ( dice.length > this.options.rendering.dice.max ) shouldDisplay = false;\n    }\n    else if ( !dice.length ) shouldDisplay = false;\n    return shouldDisplay ? dice : [];\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _preparePartContext(partId, context, options) {\n    context = await super._preparePartContext(partId, context, options);\n    switch ( partId ) {\n      case \"buttons\":\n        return this._prepareButtonsContext(context, options);\n      case \"configuration\":\n        return this._prepareConfigurationContext(context, options);\n      case \"formulas\":\n        return this._prepareFormulasContext(context, options);\n      default:\n        return context;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare the context for the buttons.\n   * @param {ApplicationRenderContext} context  Shared context provided by _prepareContext.\n   * @param {HandlebarsRenderOptions} options   Options which configure application rendering behavior.\n   * @returns {Promise<ApplicationRenderContext>}\n   * @protected\n   */\n  async _prepareButtonsContext(context, options) {\n    context.buttons = {\n      roll: {\n        icon: '<i class=\"fa-solid fa-dice\"></i>',\n        label: game.i18n.localize(\"DND5E.Roll\")\n      }\n    };\n    return context;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare the context for the roll configuration section.\n   * @param {ApplicationRenderContext} context  Shared context provided by _prepareContext.\n   * @param {HandlebarsRenderOptions} options   Options which configure application rendering behavior.\n   * @returns {Promise<ApplicationRenderContext>}\n   * @protected\n   */\n  async _prepareConfigurationContext(context, options) {\n    context.fields = [{\n      field: new foundry.data.fields.StringField({ label: game.i18n.localize(\"DND5E.RollMode\") }),\n      name: \"rollMode\",\n      value: this.message.rollMode ?? this.options.default?.rollMode,\n      options: Object.entries(CONFIG.Dice.rollModes).map(([value, l]) => ({ value, label: game.i18n.localize(l) }))\n    }];\n    return context;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare the context for the formulas list.\n   * @param {ApplicationRenderContext} context  Shared context provided by _prepareContext.\n   * @param {HandlebarsRenderOptions} options   Options which configure application rendering behavior.\n   * @returns {Promise<ApplicationRenderContext>}\n   * @protected\n   */\n  async _prepareFormulasContext(context, options) {\n    context.rolls = this.rolls.map(roll => ({ roll }));\n    context.dice = this._identifyDiceTerms() || [];\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Roll Handling                               */\n  /* -------------------------------------------- */\n\n  /**\n   * Build a roll from the provided configuration objects.\n   * @param {BasicRollProcessConfiguration} config  Roll configuration data.\n   * @param {FormDataExtended} [formData]           Any data entered into the rolling prompt.\n   */\n  #buildRolls(config, formData) {\n    const RollType = this.rollType;\n    this.#rolls = config.rolls?.map((config, index) =>\n      RollType.fromConfig(this._buildConfig(config, formData, index), this.config)\n    ) ?? [];\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare individual configuration object before building a roll.\n   * @param {BasicRollConfiguration} config  Roll configuration data.\n   * @param {FormDataExtended} [formData]    Any data entered into the rolling prompt.\n   * @param {number} index                   Index of the roll within all rolls being prepared.\n   * @returns {BasicRollConfiguration}\n   * @protected\n   */\n  _buildConfig(config, formData, index) {\n    config = foundry.utils.mergeObject({ parts: [], data: {}, options: {} }, config);\n\n    /**\n     * A hook event that fires when a roll config is built using the roll prompt.\n     * @function dnd5e.buildRollConfig\n     * @memberof hookEvents\n     * @param {RollConfigurationDialog} app    Roll configuration dialog.\n     * @param {BasicRollConfiguration} config  Roll configuration data.\n     * @param {FormDataExtended} [formData]    Any data entered into the rolling prompt.\n     * @param {number} index                   Index of the roll within all rolls being prepared.\n     */\n    Hooks.callAll(\"dnd5e.buildRollConfig\", this, config, formData, index);\n\n    const situational = formData?.get(`roll.${index}.situational`);\n    if ( situational && (config.situational !== false) ) {\n      config.parts.push(\"@situational\");\n      config.data.situational = situational;\n    } else {\n      config.parts.findSplice(v => v === \"@situational\");\n    }\n\n    return config;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Make any final modifications to rolls based on the button clicked.\n   * @param {string} action  Action on the button clicked.\n   * @returns {BasicRoll[]}\n   * @protected\n   */\n  _finalizeRolls(action) {\n    return this.rolls;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Rebuild rolls based on an updated config and re-render the dialog.\n   */\n  rebuild() {\n    this._onChangeForm(this.options.form, new Event(\"change\"));\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers                */\n  /* -------------------------------------------- */\n\n  /**\n   * Handle submission of the dialog using the form buttons.\n   * @this {RollConfigurationDialog}\n   * @param {Event|SubmitEvent} event    The form submission event.\n   * @param {HTMLFormElement} form       The submitted form.\n   * @param {FormDataExtended} formData  Data from the dialog.\n   */\n  static async #handleFormSubmission(event, form, formData) {\n    this.#rolls = this._finalizeRolls(event.submitter?.dataset?.action);\n    await this.close({ dnd5e: { submitted: true } });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _onChangeForm(formConfig, event) {\n    super._onChangeForm(formConfig, event);\n\n    const formData = new FormDataExtended(this.element);\n    if ( formData.has(\"rollMode\") ) this.message.rollMode = formData.get(\"rollMode\");\n    this.#buildRolls(foundry.utils.deepClone(this.#config), formData);\n    this.render({ parts: [\"formulas\"] });\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  _onClose(options={}) {\n    if ( !options.dnd5e?.submitted ) this.#rolls = [];\n  }\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * A helper to handle displaying and responding to the dialog.\n   * @param {BasicRollProcessConfiguration} [config]        Initial roll configuration.\n   * @param {BasicRollConfigurationDialogOptions} [dialog]  Dialog configuration options.\n   * @param {BasicRollMessageConfiguration} [message]       Message configuration.\n   * @returns {Promise<BasicRoll[]>}\n   */\n  static async configure(config={}, dialog={}, message={}) {\n    return new Promise(resolve => {\n      const app = new this(config, message, dialog.options);\n      app.addEventListener(\"close\", () => resolve(app.rolls), { once: true });\n      app.render({ force: true });\n    });\n  }\n}\n","import RollConfigurationDialog from \"./roll-configuration-dialog.mjs\";\n\n/**\n * Dialog for configuring damage rolls.\n *\n * @param {DamageRollProcessConfiguration} [config={}]        Initial roll configuration.\n * @param {BasicRollMessageConfiguration} [message={}]        Message configuration.\n * @param {BasicRollConfigurationDialogOptions} [options={}]  Dialog rendering options.\n */\nexport default class DamageRollConfigurationDialog extends RollConfigurationDialog {\n\n  /** @inheritDoc */\n  static PARTS = {\n    ...super.PARTS,\n    formulas: {\n      template: \"systems/dnd5e/templates/dice/damage-formulas.hbs\"\n    }\n  };\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  static get rollType() {\n    return CONFIG.Dice.DamageRoll;\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /** @override */\n  async _prepareButtonsContext(context, options) {\n    const allowCritical = this.config.critical?.allow !== false;\n    context.buttons = {\n      critical: {\n        icon: '<i class=\"fa-solid fa-bomb\"></i>',\n        label: game.i18n.localize(\"DND5E.CriticalHit\")\n      },\n      normal: {\n        icon: '<i class=\"fa-solid fa-dice\"></i>',\n        label: game.i18n.localize(allowCritical ? \"DND5E.Normal\" : \"DND5E.Roll\")\n      }\n    };\n    if ( !allowCritical ) delete context.buttons.critical;\n    return context;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async _prepareFormulasContext(context, options) {\n    context = await super._prepareFormulasContext(context, options);\n    const allTypes = foundry.utils.mergeObject(CONFIG.DND5E.damageTypes, CONFIG.DND5E.healingTypes, { inplace: false });\n    context.rolls = context.rolls.map(({ roll }) => ({\n      roll,\n      damageConfig: allTypes[roll.options.type] ?? allTypes[roll.options.types?.[0]],\n      damageTypes: roll.options.types?.length > 1 ? Object.entries(allTypes).map(([key, config]) => {\n        if ( !roll.options.types?.includes(key) ) return null;\n        return { value: key, label: config.label };\n      }).filter(_ => _) : null\n    }));\n    return context;\n  }\n\n  /* -------------------------------------------- */\n  /*  Roll Handling                               */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _buildConfig(config, formData, index) {\n    config = super._buildConfig(config, formData, index);\n    const damageType = formData?.get(`roll.${index}.damageType`);\n    if ( damageType ) config.options.type = damageType;\n    return config;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  _finalizeRolls(action) {\n    return this.rolls.map(roll => {\n      roll.options.isCritical = action === \"critical\";\n      roll.configureDamage({ critical: this.config.critical });\n      return roll;\n    });\n  }\n}\n","/* -------------------------------------------- */\n/*  Formatters                                  */\n/* -------------------------------------------- */\n\n/**\n * Format a Challenge Rating using the proper fractional symbols.\n * @param {number} value  CR value for format.\n * @returns {string}\n */\nexport function formatCR(value) {\n  if ( value === null ) return \"—\";\n  return { 0.125: \"⅛\", 0.25: \"¼\", 0.5: \"½\" }[value] ?? formatNumber(value);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Format a modifier for display with its sign separate.\n * @param {number} mod  The modifier.\n * @returns {Handlebars.SafeString}\n */\nexport function formatModifier(mod) {\n  if ( !Number.isFinite(mod) ) return new Handlebars.SafeString(\"—\");\n  return new Handlebars.SafeString(`<span class=\"sign\">${mod < 0 ? \"-\" : \"+\"}</span>${Math.abs(mod)}`);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper for using Intl.NumberFormat within handlebars.\n * @param {number} value    The value to format.\n * @param {object} options  Options forwarded to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat}\n * @param {boolean} [options.numerals]  Format the number as roman numerals.\n * @returns {string}\n */\nexport function formatNumber(value, { numerals, ...options }={}) {\n  if ( numerals ) return _formatNumberAsNumerals(value);\n  const formatter = new Intl.NumberFormat(game.i18n.lang, options);\n  return formatter.format(value);\n}\n\n/**\n * Roman numerals.\n * @type {Record<string, number>}\n */\nconst _roman = {\n  M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1\n};\n\n/**\n * Format a number as roman numerals.\n * @param {number} n  The number to format.\n * @returns {string}\n */\nfunction _formatNumberAsNumerals(n) {\n  let out = \"\";\n  if ( (n < 1) || !Number.isInteger(n) ) return out;\n  for ( const [numeral, decimal] of Object.entries(_roman) ) {\n    const quotient = Math.floor(n / decimal);\n    n -= quotient * decimal;\n    out += numeral.repeat(quotient);\n  }\n  return out;\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper for using Intl.NumberFormat within handlebars for format a range.\n * @param {number} min      The lower end of the range.\n * @param {number} max      The upper end of the range.\n * @param {object} options  Options forwarded to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat}\n * @returns {string}\n */\nexport function formatRange(min, max, options) {\n  const formatter = new Intl.NumberFormat(game.i18n.lang, options);\n  return formatter.formatRange(min, max);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to format textarea text to HTML with linebreaks.\n * @param {string} value  The text to format.\n * @returns {Handlebars.SafeString}\n */\nexport function formatText(value) {\n  return new Handlebars.SafeString(value?.replaceAll(\"\\n\", \"<br>\") ?? \"\");\n}\n\n/* -------------------------------------------- */\n/*  Formulas                                    */\n/* -------------------------------------------- */\n\n/**\n * Return whether a string is a valid reroll, explosion, min, or max dice modifier.\n * @param {string} mod      The modifier to test.\n * @returns {boolean}\n */\nexport function isValidDieModifier(mod) {\n  const regex = {\n    reroll: /rr?([0-9]+)?([<>=]+)?([0-9]+)?/i,\n    explode: /xo?([0-9]+)?([<>=]+)?([0-9]+)?/i,\n    minimum: /(?:min)([0-9]+)/i,\n    maximum: /(?:max)([0-9]+)/i,\n    dropKeep: /[dk]([hl])?([0-9]+)?/i,\n    count: /(?:c[sf])([<>=]+)?([0-9]+)?/i\n  };\n  return Object.values(regex).some(rgx => rgx.test(mod));\n}\n\n/* -------------------------------------------- */\n\n/**\n * Handle a delta input for a number value from a form.\n * @param {HTMLInputElement} input  Input that contains the modified value.\n * @param {Document} target         Target document to be updated.\n * @returns {number|void}\n */\nexport function parseInputDelta(input, target) {\n  let value = input.value;\n  if ( [\"+\", \"-\"].includes(value[0]) ) {\n    const delta = parseFloat(value);\n    value = Number(foundry.utils.getProperty(target, input.dataset.name ?? input.name)) + delta;\n  }\n  else if ( value[0] === \"=\" ) value = Number(value.slice(1));\n  if ( Number.isNaN(value) ) return;\n  input.value = value;\n  return value;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Prepare the final formula value for a model field.\n * @param {ItemDataModel|BaseActivityData} model  Model for which the value is being prepared.\n * @param {string} keyPath                        Path to the field within the model.\n * @param {string} label                          Label to use in preparation warnings.\n * @param {object} rollData                       Roll data to use when replacing formula values.\n */\nexport function prepareFormulaValue(model, keyPath, label, rollData) {\n  const value = foundry.utils.getProperty(model, keyPath);\n  if ( !value ) return;\n  const item = model.item ?? model.parent;\n  const property = game.i18n.localize(label);\n  try {\n    const formula = replaceFormulaData(value, rollData, { item, property });\n    const roll = new Roll(formula);\n    foundry.utils.setProperty(model, keyPath, roll.evaluateSync().total);\n  } catch(err) {\n    if ( item.isEmbedded ) {\n      const message = game.i18n.format(\"DND5E.FormulaMalformedError\", { property, name: model.name ?? item.name });\n      item.actor._preparationWarnings.push({ message, link: item.uuid, type: \"error\" });\n      console.error(message, err);\n    }\n  }\n}\n\n/* -------------------------------------------- */\n\n/**\n * Replace referenced data attributes in the roll formula with values from the provided data.\n * If the attribute is not found in the provided data, display a warning on the actor.\n * @param {string} formula           The original formula within which to replace.\n * @param {object} data              The data object which provides replacements.\n * @param {object} [options={}]\n * @param {Actor5e} [options.actor]            Actor for which the value is being prepared.\n * @param {Item5e} [options.item]              Item for which the value is being prepared.\n * @param {string|null} [options.missing=\"0\"]  Value to use when replacing missing references, or `null` to not replace.\n * @param {string} [options.property]          Name of the property to which this formula belongs.\n * @returns {string}                 Formula with replaced data.\n */\nexport function replaceFormulaData(formula, data, { actor, item, missing=\"0\", property }={}) {\n  const dataRgx = new RegExp(/@([a-z.0-9_-]+)/gi);\n  const missingReferences = new Set();\n  formula = String(formula).replace(dataRgx, (match, term) => {\n    let value = foundry.utils.getProperty(data, term);\n    if ( value == null ) {\n      missingReferences.add(match);\n      return missing ?? match[0];\n    }\n    return String(value).trim();\n  });\n  actor ??= item?.parent;\n  if ( (missingReferences.size > 0) && actor && property ) {\n    const listFormatter = new Intl.ListFormat(game.i18n.lang, { style: \"long\", type: \"conjunction\" });\n    const message = game.i18n.format(\"DND5E.FormulaMissingReferenceWarn\", {\n      property, name: item?.name ?? actor.name, references: listFormatter.format(missingReferences)\n    });\n    actor._preparationWarnings.push({ message, link: item?.uuid ?? actor.uuid, type: \"warning\" });\n  }\n  return formula;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Convert a bonus value to a simple integer for displaying on the sheet.\n * @param {number|string|null} bonus  Bonus formula.\n * @param {object} [data={}]          Data to use for replacing @ strings.\n * @returns {number}                  Simplified bonus as an integer.\n * @protected\n */\nexport function simplifyBonus(bonus, data={}) {\n  if ( !bonus ) return 0;\n  if ( Number.isNumeric(bonus) ) return Number(bonus);\n  try {\n    const roll = new Roll(bonus, data);\n    return roll.isDeterministic ? roll.evaluateSync().total : 0;\n  } catch(error) {\n    console.error(error);\n    return 0;\n  }\n}\n\n/* -------------------------------------------- */\n/*  IDs                                         */\n/* -------------------------------------------- */\n\n/**\n * Create an ID from the input truncating or padding the value to make it reach 16 characters.\n * @param {string} id\n * @returns {string}\n */\nexport function staticID(id) {\n  if ( id.length >= 16 ) return id.substring(0, 16);\n  return id.padEnd(16, \"0\");\n}\n\n/* -------------------------------------------- */\n/*  Keybindings Helper                          */\n/* -------------------------------------------- */\n\n/**\n * Based on the provided event, determine if the keys are pressed to fulfill the specified keybinding.\n * @param {Event} event    Triggering event.\n * @param {string} action  Keybinding action within the `dnd5e` namespace.\n * @returns {boolean}      Is the keybinding triggered?\n */\nexport function areKeysPressed(event, action) {\n  if ( !event ) return false;\n  const activeModifiers = {};\n  const addModifiers = (key, pressed) => {\n    activeModifiers[key] = pressed;\n    KeyboardManager.MODIFIER_CODES[key].forEach(n => activeModifiers[n] = pressed);\n  };\n  addModifiers(KeyboardManager.MODIFIER_KEYS.CONTROL, event.ctrlKey || event.metaKey);\n  addModifiers(KeyboardManager.MODIFIER_KEYS.SHIFT, event.shiftKey);\n  addModifiers(KeyboardManager.MODIFIER_KEYS.ALT, event.altKey);\n  return game.keybindings.get(\"dnd5e\", action).some(b => {\n    if ( game.keyboard.downKeys.has(b.key) && b.modifiers.every(m => activeModifiers[m]) ) return true;\n    if ( b.modifiers.length ) return false;\n    return activeModifiers[b.key];\n  });\n}\n\n/* -------------------------------------------- */\n/*  Object Helpers                              */\n/* -------------------------------------------- */\n\n/**\n * Transform an object, returning only the keys which match the provided filter.\n * @param {object} obj         Object to transform.\n * @param {Function} [filter]  Filtering function. If none is provided, it will just check for truthiness.\n * @returns {string[]}         Array of filtered keys.\n */\nexport function filteredKeys(obj, filter) {\n  filter ??= e => e;\n  return Object.entries(obj).filter(e => filter(e[1])).map(e => e[0]);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Check whether an object exists without transversing any getters, preventing any deprecation warnings from triggering.\n * @param {object} object\n * @param {string} keyPath\n * @returns {boolean}\n */\nexport function safePropertyExists(object, keyPath) {\n  const parts = keyPath.split(\".\");\n  for ( const part of parts ) {\n    const descriptor = Object.getOwnPropertyDescriptor(object, part);\n    if ( !descriptor || !(\"value\" in descriptor) ) return false;\n    object = object[part];\n  }\n  return true;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Sort the provided object by its values or by an inner sortKey.\n * @param {object} obj                 The object to sort.\n * @param {string|Function} [sortKey]  An inner key upon which to sort or sorting function.\n * @returns {object}                   A copy of the original object that has been sorted.\n */\nexport function sortObjectEntries(obj, sortKey) {\n  let sorted = Object.entries(obj);\n  const sort = (lhs, rhs) => foundry.utils.getType(lhs) === \"string\" ? lhs.localeCompare(rhs, game.i18n.lang) : lhs - rhs;\n  if ( foundry.utils.getType(sortKey) === \"function\" ) sorted = sorted.sort((lhs, rhs) => sortKey(lhs[1], rhs[1]));\n  else if ( sortKey ) sorted = sorted.sort((lhs, rhs) => sort(lhs[1][sortKey], rhs[1][sortKey]));\n  else sorted = sorted.sort((lhs, rhs) => sort(lhs[1], rhs[1]));\n  return Object.fromEntries(sorted);\n}\n\n/* -------------------------------------------- */\n\n/**\n * Retrieve the indexed data for a Document using its UUID. Will never return a result for embedded documents.\n * @param {string} uuid  The UUID of the Document index to retrieve.\n * @returns {object}     Document's index if one could be found.\n */\nexport function indexFromUuid(uuid) {\n  const parts = uuid.split(\".\");\n  let index;\n\n  // Compendium Documents\n  if ( parts[0] === \"Compendium\" ) {\n    const [, scope, packName, id] = parts;\n    const pack = game.packs.get(`${scope}.${packName}`);\n    index = pack?.index.get(id);\n  }\n\n  // World Documents\n  else if ( parts.length < 3 ) {\n    const [docName, id] = parts;\n    const collection = CONFIG[docName].collection.instance;\n    index = collection.get(id);\n  }\n\n  return index || null;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Creates an HTML document link for the provided UUID.\n * Try to build links to compendium content synchronously to avoid DB lookups.\n * @param {string} uuid                    UUID for which to produce the link.\n * @param {object} [options]\n * @param {string} [options.tooltip]       Tooltip to add to the link.\n * @param {string} [options.renderBroken]  If a UUID cannot found, render it as a broken link instead of returning the\n *                                         empty string.\n * @returns {string}                       Link to the item or empty string if item wasn't found.\n */\nexport function linkForUuid(uuid, { tooltip, renderBroken }={}) {\n  let doc = fromUuidSync(uuid);\n  if ( !doc ) {\n    if ( renderBroken ) return `\n      <a class=\"content-link broken\" data-uuid=\"${uuid}\">\n        <i class=\"fas fa-unlink\"></i> ${game.i18n.localize(\"Unknown\")}\n      </a>\n    `;\n    return \"\";\n  }\n  if ( uuid.startsWith(\"Compendium.\") && !(doc instanceof foundry.abstract.Document) ) {\n    const {collection} = foundry.utils.parseUuid(uuid);\n    const cls = collection.documentClass;\n    // Minimal \"shell\" of a document using index data\n    doc = new cls(foundry.utils.deepClone(doc), {pack: collection.metadata.id});\n  }\n  const a = doc.toAnchor();\n  if ( tooltip ) a.dataset.tooltip = tooltip;\n  return a.outerHTML;\n}\n\n/* -------------------------------------------- */\n/*  Targeting                                   */\n/* -------------------------------------------- */\n\n/**\n * Important information on a targeted token.\n *\n * @typedef {object} TargetDescriptor5e\n * @property {string} uuid  The UUID of the target.\n * @property {string} img   The target's image.\n * @property {string} name  The target's name.\n * @property {number} ac    The target's armor class, if applicable.\n */\n\n/**\n * Grab the targeted tokens and return relevant information on them.\n * @returns {TargetDescriptor[]}\n */\nexport function getTargetDescriptors() {\n  const targets = new Map();\n  for ( const token of game.user.targets ) {\n    const { name } = token;\n    const { img, system, uuid, statuses } = token.actor ?? {};\n    if ( uuid ) {\n      const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n      targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n    }\n  }\n  return Array.from(targets.values());\n}\n\n/* -------------------------------------------- */\n\n/**\n * Get currently selected tokens in the scene or user's character's tokens.\n * @returns {Token5e[]}\n */\nexport function getSceneTargets() {\n  let targets = canvas.tokens.controlled.filter(t => t.actor);\n  if ( !targets.length && game.user.character ) targets = game.user.character.getActiveTokens();\n  return targets;\n}\n\n/* -------------------------------------------- */\n/*  Conversions                                 */\n/* -------------------------------------------- */\n\n/**\n * Convert the provided weight to another unit.\n * @param {number} value  The weight being converted.\n * @param {string} from   The initial units.\n * @param {string} to     The final units.\n * @returns {number}      Weight in the specified units.\n */\nexport function convertWeight(value, from, to) {\n  if ( from === to ) return value;\n  const message = unit => `Weight unit ${unit} not defined in CONFIG.DND5E.weightUnits`;\n  if ( !CONFIG.DND5E.weightUnits[from] ) throw new Error(message(from));\n  if ( !CONFIG.DND5E.weightUnits[to] ) throw new Error(message(to));\n  return value\n    * CONFIG.DND5E.weightUnits[from].conversion\n    / CONFIG.DND5E.weightUnits[to].conversion;\n}\n\n/* -------------------------------------------- */\n/*  Validators                                  */\n/* -------------------------------------------- */\n\n/**\n * Ensure the provided string contains only the characters allowed in identifiers.\n * @param {string} identifier\n * @returns {boolean}\n */\nfunction isValidIdentifier(identifier) {\n  return /^([a-z0-9_-]+)$/i.test(identifier);\n}\n\nexport const validators = {\n  isValidIdentifier: isValidIdentifier\n};\n\n/* -------------------------------------------- */\n/*  Handlebars Template Helpers                 */\n/* -------------------------------------------- */\n\n/**\n * Define a set of template paths to pre-load. Pre-loaded templates are compiled and cached for fast access when\n * rendering. These paths will also be available as Handlebars partials by using the file name\n * (e.g. \"dnd5e.actor-traits\").\n * @returns {Promise}\n */\nexport async function preloadHandlebarsTemplates() {\n  const partials = [\n    // Shared Partials\n    \"systems/dnd5e/templates/shared/active-effects.hbs\",\n    \"systems/dnd5e/templates/shared/active-effects2.hbs\",\n    \"systems/dnd5e/templates/shared/inventory.hbs\",\n    \"systems/dnd5e/templates/shared/inventory2.hbs\",\n    \"systems/dnd5e/templates/apps/parts/trait-list.hbs\",\n\n    // Actor Sheet Partials\n    \"systems/dnd5e/templates/actors/parts/actor-classes.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-trait-pills.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-traits.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-features.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-inventory.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-spellbook.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-warnings.hbs\",\n    \"systems/dnd5e/templates/actors/parts/actor-warnings-dialog.hbs\",\n    \"systems/dnd5e/templates/actors/parts/biography-textbox.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/character-biography.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/character-details.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/creature-features.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/creature-spells.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/group-members.hbs\",\n    \"systems/dnd5e/templates/actors/tabs/npc-biography.hbs\",\n\n    // Actor Sheet Item Summary Columns\n    \"systems/dnd5e/templates/actors/parts/columns/column-feature-controls.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-formula.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-recovery.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-roll.hbs\",\n    \"systems/dnd5e/templates/actors/parts/columns/column-uses.hbs\",\n\n    // Item Sheet Partials\n    \"systems/dnd5e/templates/items/details/details-background.hbs\",\n    \"systems/dnd5e/templates/items/details/details-class.hbs\",\n    \"systems/dnd5e/templates/items/details/details-consumable.hbs\",\n    \"systems/dnd5e/templates/items/details/details-container.hbs\",\n    \"systems/dnd5e/templates/items/details/details-equipment.hbs\",\n    \"systems/dnd5e/templates/items/details/details-feat.hbs\",\n    \"systems/dnd5e/templates/items/details/details-loot.hbs\",\n    \"systems/dnd5e/templates/items/details/details-mountable.hbs\",\n    \"systems/dnd5e/templates/items/details/details-species.hbs\",\n    \"systems/dnd5e/templates/items/details/details-spell.hbs\",\n    \"systems/dnd5e/templates/items/details/details-spellcasting.hbs\",\n    \"systems/dnd5e/templates/items/details/details-starting-equipment.hbs\",\n    \"systems/dnd5e/templates/items/details/details-subclass.hbs\",\n    \"systems/dnd5e/templates/items/details/details-tool.hbs\",\n    \"systems/dnd5e/templates/items/details/details-weapon.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-action.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-activation.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-activities.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-advancement.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-advancement2.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-description.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-description2.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-details.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-mountable.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-spellcasting.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-source.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-summary.hbs\",\n    \"systems/dnd5e/templates/items/parts/item-tooltip.hbs\",\n    \"systems/dnd5e/templates/items/parts/spell-block.hbs\",\n\n    // Field Partials\n    \"systems/dnd5e/templates/shared/fields/field-activation.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-damage.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-duration.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-range.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-targets.hbs\",\n    \"systems/dnd5e/templates/shared/fields/field-uses.hbs\",\n\n    // Journal Partials\n    \"systems/dnd5e/templates/journal/parts/journal-legacy-traits.hbs\",\n    \"systems/dnd5e/templates/journal/parts/journal-modern-traits.hbs\",\n    \"systems/dnd5e/templates/journal/parts/journal-table.hbs\",\n\n    // Activity Partials\n    \"systems/dnd5e/templates/activity/columns/activity-column-controls.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-formula.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-price.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-quantity.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-range.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-recovery.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-roll.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-school.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-target.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-time.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-uses.hbs\",\n    \"systems/dnd5e/templates/activity/columns/activity-column-weight.hbs\",\n    \"systems/dnd5e/templates/activity/activity-row-summary.hbs\",\n    \"systems/dnd5e/templates/activity/activity-usage-notes.hbs\",\n\n    // Advancement Partials\n    \"systems/dnd5e/templates/advancement/parts/advancement-ability-score-control.hbs\",\n    \"systems/dnd5e/templates/advancement/parts/advancement-controls.hbs\",\n    \"systems/dnd5e/templates/advancement/parts/advancement-spell-config.hbs\"\n  ];\n\n  const paths = {};\n  for ( const path of partials ) {\n    paths[path.replace(\".hbs\", \".html\")] = path;\n    paths[`dnd5e.${path.split(\"/\").pop().replace(\".hbs\", \"\")}`] = path;\n  }\n\n  return loadTemplates(paths);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper that converts the provided object into a series of `data-` entries.\n * @param {object} object   Object to convert into dataset entries.\n * @param {object} options  Handlebars options.\n * @returns {string}\n */\nfunction dataset(object, options) {\n  const entries = [];\n  for ( let [key, value] of Object.entries(object ?? {}) ) {\n    if ( value === undefined ) continue;\n    key = key.replace(/[A-Z]+(?![a-z])|[A-Z]/g, (a, b) => (b ? \"-\" : \"\") + a.toLowerCase());\n    entries.push(`data-${key}=\"${value}\"`);\n  }\n  return new Handlebars.SafeString(entries.join(\" \"));\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper to create a set of <option> elements in a <select> block grouped together\n * in <optgroup> based on the provided categories.\n *\n * @param {SelectChoices} choices          Choices to format.\n * @param {object} [options]\n * @param {boolean} [options.localize]     Should the label be localized?\n * @param {string} [options.blank]         Name for the empty option, if one should be added.\n * @param {string} [options.labelAttr]     Attribute pointing to label string.\n * @param {string} [options.chosenAttr]    Attribute pointing to chosen boolean.\n * @param {string} [options.childrenAttr]  Attribute pointing to array of children.\n * @returns {Handlebars.SafeString}        Formatted option list.\n */\nfunction groupedSelectOptions(choices, options) {\n  const localize = options.hash.localize ?? false;\n  const blank = options.hash.blank ?? null;\n  const labelAttr = options.hash.labelAttr ?? \"label\";\n  const chosenAttr = options.hash.chosenAttr ?? \"chosen\";\n  const childrenAttr = options.hash.childrenAttr ?? \"children\";\n\n  // Create an option\n  const option = (name, label, chosen) => {\n    if ( localize ) label = game.i18n.localize(label);\n    html += `<option value=\"${name}\" ${chosen ? \"selected\" : \"\"}>${label}</option>`;\n  };\n\n  // Create a group\n  const group = category => {\n    let label = category[labelAttr];\n    if ( localize ) game.i18n.localize(label);\n    html += `<optgroup label=\"${label}\">`;\n    children(category[childrenAttr]);\n    html += \"</optgroup>\";\n  };\n\n  // Add children\n  const children = children => {\n    for ( let [name, child] of Object.entries(children) ) {\n      if ( child[childrenAttr] ) group(child);\n      else option(name, child[labelAttr], child[chosenAttr] ?? false);\n    }\n  };\n\n  // Create the options\n  let html = \"\";\n  if ( blank !== null ) option(\"\", blank);\n  children(choices);\n  return new Handlebars.SafeString(html);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper that fetch the appropriate item context from root and adds it to the first block parameter.\n * @param {object} context  Current evaluation context.\n * @param {object} options  Handlebars options.\n * @returns {string}\n */\nfunction itemContext(context, options) {\n  if ( arguments.length !== 2 ) throw new Error(\"#dnd5e-itemContext requires exactly one argument\");\n  if ( foundry.utils.getType(context) === \"function\" ) context = context.call(this);\n\n  const ctx = options.data.root.itemContext?.[context.id];\n  if ( !ctx ) {\n    const inverse = options.inverse(this);\n    if ( inverse ) return options.inverse(this);\n  }\n\n  return options.fn(context, { data: options.data, blockParams: [ctx] });\n}\n\n/* -------------------------------------------- */\n\n/**\n * Conceal a section and display a notice if unidentified.\n * @param {boolean} conceal  Should the section be concealed?\n * @param {object} options   Handlebars options.\n * @returns {string}\n */\nfunction concealSection(conceal, options) {\n  let content = options.fn(this);\n  if ( !conceal ) return content;\n\n  content = `<div inert>\n    ${content}\n  </div>\n  <div class=\"unidentified-notice\">\n      <div>\n          <strong>${game.i18n.localize(\"DND5E.Unidentified.Title\")}</strong>\n          <p>${game.i18n.localize(\"DND5E.Unidentified.Notice\")}</p>\n      </div>\n  </div>`;\n  return content;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Construct an object from the provided arguments.\n * @param {object} options       Handlebars options.\n * @param {object} options.hash\n * @returns {object}\n */\nfunction makeObject({ hash }) {\n  return hash;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Register custom Handlebars helpers used by 5e.\n */\nexport function registerHandlebarsHelpers() {\n  Handlebars.registerHelper({\n    getProperty: foundry.utils.getProperty,\n    \"dnd5e-concealSection\": concealSection,\n    \"dnd5e-dataset\": dataset,\n    \"dnd5e-formatCR\": formatCR,\n    \"dnd5e-formatModifier\": formatModifier,\n    \"dnd5e-groupedSelectOptions\": groupedSelectOptions,\n    \"dnd5e-itemContext\": itemContext,\n    \"dnd5e-linkForUuid\": (uuid, options) => linkForUuid(uuid, options.hash),\n    \"dnd5e-numberFormat\": (context, options) => formatNumber(context, options.hash),\n    \"dnd5e-object\": makeObject,\n    \"dnd5e-textFormat\": formatText\n  });\n}\n\n/* -------------------------------------------- */\n/*  Config Pre-Localization                     */\n/* -------------------------------------------- */\n\n/**\n * Storage for pre-localization configuration.\n * @type {object}\n * @private\n */\nconst _preLocalizationRegistrations = {};\n\n/**\n * Mark the provided config key to be pre-localized during the init stage.\n * @param {string} configKeyPath          Key path within `CONFIG.DND5E` to localize.\n * @param {object} [options={}]\n * @param {string} [options.key]          If each entry in the config enum is an object,\n *                                        localize and sort using this property.\n * @param {string[]} [options.keys=[]]    Array of localization keys. First key listed will be used for sorting\n *                                        if multiple are provided.\n * @param {boolean} [options.sort=false]  Sort this config enum, using the key if set.\n */\nexport function preLocalize(configKeyPath, { key, keys=[], sort=false }={}) {\n  if ( key ) keys.unshift(key);\n  _preLocalizationRegistrations[configKeyPath] = { keys, sort };\n}\n\n/* -------------------------------------------- */\n\n/**\n * Execute previously defined pre-localization tasks on the provided config object.\n * @param {object} config  The `CONFIG.DND5E` object to localize and sort. *Will be mutated.*\n */\nexport function performPreLocalization(config) {\n  for ( const [keyPath, settings] of Object.entries(_preLocalizationRegistrations) ) {\n    const target = foundry.utils.getProperty(config, keyPath);\n    if ( !target ) continue;\n    _localizeObject(target, settings.keys);\n    if ( settings.sort ) foundry.utils.setProperty(config, keyPath, sortObjectEntries(target, settings.keys[0]));\n  }\n\n  // Localize & sort status effects\n  CONFIG.statusEffects.forEach(s => s.name = game.i18n.localize(s.name));\n  CONFIG.statusEffects.sort((lhs, rhs) =>\n    lhs.order || rhs.order ? (lhs.order ?? Infinity) - (rhs.order ?? Infinity)\n      : lhs.name.localeCompare(rhs.name, game.i18n.lang)\n  );\n}\n\n/* -------------------------------------------- */\n\n/**\n * Localize the values of a configuration object by translating them in-place.\n * @param {object} obj       The configuration object to localize.\n * @param {string[]} [keys]  List of inner keys that should be localized if this is an object.\n * @private\n */\nfunction _localizeObject(obj, keys) {\n  for ( const [k, v] of Object.entries(obj) ) {\n    const type = typeof v;\n    if ( type === \"string\" ) {\n      obj[k] = game.i18n.localize(v);\n      continue;\n    }\n\n    if ( type !== \"object\" ) {\n      console.error(new Error(\n        `Pre-localized configuration values must be a string or object, ${type} found for \"${k}\" instead.`\n      ));\n      continue;\n    }\n    if ( !keys?.length ) {\n      console.error(new Error(\n        \"Localization keys must be provided for pre-localizing when target is an object.\"\n      ));\n      continue;\n    }\n\n    for ( const key of keys ) {\n      const value = foundry.utils.getProperty(v, key);\n      if ( !value ) continue;\n      foundry.utils.setProperty(v, key, game.i18n.localize(value));\n    }\n  }\n}\n\n/* -------------------------------------------- */\n/*  Localization                                */\n/* -------------------------------------------- */\n\n/**\n * A cache of already-fetched labels for faster lookup.\n * @type {Map<string, string>}\n */\nconst _attributeLabelCache = new Map();\n\n/**\n * Convert an attribute path to a human-readable label.\n * @param {string} attr              The attribute path.\n * @param {object} [options]\n * @param {Actor5e} [options.actor]  An optional reference actor.\n * @returns {string|void}\n */\nexport function getHumanReadableAttributeLabel(attr, { actor }={}) {\n  // Check any actor-specific names first.\n  if ( attr.startsWith(\"resources.\") && actor ) {\n    const key = attr.replace(/\\.value$/, \"\");\n    const resource = foundry.utils.getProperty(actor, `system.${key}`);\n    if ( resource?.label ) return resource.label;\n  }\n\n  if ( (attr === \"details.xp.value\") && (actor?.type === \"npc\") ) {\n    return game.i18n.localize(\"DND5E.ExperiencePointsValue\");\n  }\n\n  if ( attr.startsWith(\".\") && actor ) {\n    const item = fromUuidSync(attr, { relative: actor });\n    return item?.name ?? attr;\n  }\n\n  // Check if the attribute is already in cache.\n  let label = _attributeLabelCache.get(attr);\n  if ( label ) return label;\n\n  // Derived fields.\n  if ( attr === \"attributes.init.total\" ) label = \"DND5E.InitiativeBonus\";\n  else if ( (attr === \"attributes.ac.value\") || (attr === \"attributes.ac.flat\") ) label = \"DND5E.ArmorClass\";\n  else if ( attr === \"attributes.spelldc\" ) label = \"DND5E.SpellDC\";\n\n  // Abilities.\n  else if ( attr.startsWith(\"abilities.\") ) {\n    const [, key] = attr.split(\".\");\n    label = game.i18n.format(\"DND5E.AbilityScoreL\", { ability: CONFIG.DND5E.abilities[key].label });\n  }\n\n  // Skills.\n  else if ( attr.startsWith(\"skills.\") ) {\n    const [, key] = attr.split(\".\");\n    label = game.i18n.format(\"DND5E.SkillPassiveScore\", { skill: CONFIG.DND5E.skills[key].label });\n  }\n\n  // Spell slots.\n  else if ( attr.startsWith(\"spells.\") ) {\n    const [, key] = attr.split(\".\");\n    if ( !/spell\\d+/.test(key) ) label = `DND5E.SpellSlots${key.capitalize()}`;\n    else {\n      const plurals = new Intl.PluralRules(game.i18n.lang, {type: \"ordinal\"});\n      const level = Number(key.slice(5));\n      label = game.i18n.format(`DND5E.SpellSlotsN.${plurals.select(level)}`, { n: level });\n    }\n  }\n\n  // Currency\n  else if ( attr.startsWith(\"currency.\") ) {\n    const [, key] = attr.split(\".\");\n    label = CONFIG.DND5E.currencies[key]?.label;\n  }\n\n  // Attempt to find the attribute in a data model.\n  if ( !label ) {\n    const { CharacterData, NPCData, VehicleData, GroupData } = dnd5e.dataModels.actor;\n    for ( const model of [CharacterData, NPCData, VehicleData, GroupData] ) {\n      const field = model.schema.getField(attr);\n      if ( field ) {\n        label = field.label;\n        break;\n      }\n    }\n  }\n\n  if ( label ) {\n    label = game.i18n.localize(label);\n    _attributeLabelCache.set(attr, label);\n  }\n\n  return label;\n}\n\n/* -------------------------------------------- */\n\n/**\n * Split a semi-colon-separated list and clean out any empty entries.\n * @param {string} input\n * @returns {string}\n */\nexport function splitSemicolons(input) {\n  return input.split(\";\").map(t => t.trim()).filter(t => t);\n}\n\n/* -------------------------------------------- */\n/*  Migration                                   */\n/* -------------------------------------------- */\n\n/**\n * Synchronize the spells for all Actors in some collection with source data from an Item compendium pack.\n * @param {CompendiumCollection} actorPack      An Actor compendium pack which will be updated\n * @param {CompendiumCollection} spellsPack     An Item compendium pack which provides source data for spells\n * @returns {Promise<void>}\n */\nexport async function synchronizeActorSpells(actorPack, spellsPack) {\n\n  // Load all actors and spells\n  const actors = await actorPack.getDocuments();\n  const spells = await spellsPack.getDocuments();\n  const spellsMap = spells.reduce((obj, item) => {\n    obj[item.name] = item;\n    return obj;\n  }, {});\n\n  // Unlock the pack\n  await actorPack.configure({locked: false});\n\n  // Iterate over actors\n  SceneNavigation.displayProgressBar({label: \"Synchronizing Spell Data\", pct: 0});\n  for ( const [i, actor] of actors.entries() ) {\n    const {toDelete, toCreate} = _synchronizeActorSpells(actor, spellsMap);\n    if ( toDelete.length ) await actor.deleteEmbeddedDocuments(\"Item\", toDelete);\n    if ( toCreate.length ) await actor.createEmbeddedDocuments(\"Item\", toCreate, {keepId: true});\n    console.debug(`${actor.name} | Synchronized ${toCreate.length} spells`);\n    SceneNavigation.displayProgressBar({label: actor.name, pct: ((i / actors.length) * 100).toFixed(0)});\n  }\n\n  // Re-lock the pack\n  await actorPack.configure({locked: true});\n  SceneNavigation.displayProgressBar({label: \"Synchronizing Spell Data\", pct: 100});\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to synchronize spell data for a specific Actor.\n * @param {Actor5e} actor\n * @param {Object<string,Item5e>} spellsMap\n * @returns {{toDelete: string[], toCreate: object[]}}\n * @private\n */\nfunction _synchronizeActorSpells(actor, spellsMap) {\n  const spells = actor.itemTypes.spell;\n  const toDelete = [];\n  const toCreate = [];\n  if ( !spells.length ) return {toDelete, toCreate};\n\n  for ( const spell of spells ) {\n    const source = spellsMap[spell.name];\n    if ( !source ) {\n      console.warn(`${actor.name} | ${spell.name} | Does not exist in spells compendium pack`);\n      continue;\n    }\n\n    // Combine source data with the preparation and uses data from the actor\n    const spellData = source.toObject();\n    const {preparation, uses, save} = spell.toObject().system;\n    Object.assign(spellData.system, {preparation, uses});\n    spellData.system.save.dc = save.dc;\n    foundry.utils.setProperty(spellData, \"_stats.compendiumSource\", source.uuid);\n\n    // Record spells to be deleted and created\n    toDelete.push(spell.id);\n    toCreate.push(spellData);\n  }\n  return {toDelete, toCreate};\n}\n","import RollConfigurationDialog from \"../applications/dice/roll-configuration-dialog.mjs\";\n\nconst { DiceTerm, NumericTerm } = foundry.dice.terms;\n\n/**\n * Configuration data for the process of creating one or more basic rolls.\n *\n * @typedef {object} BasicRollProcessConfiguration\n * @property {BasicRollConfiguration[]} rolls  Configuration data for individual rolls.\n * @property {Event} [event]                   Event that triggered the rolls.\n * @property {Document} [subject]              Document that initiated this roll.\n */\n\n/**\n * Configuration data for an individual roll.\n *\n * @typedef {object} BasicRollConfiguration\n * @property {string[]} [parts=[]]         Parts used to construct the roll formula.\n * @property {object} [data={}]            Data used to resolve placeholders in the formula.\n * @property {boolean} [situational=true]  Whether the situational bonus can be added to this roll in the prompt.\n * @property {BasicRollOptions} [options]  Additional options passed through to the created roll.\n */\n\n/**\n * Options allowed on a basic roll.\n *\n * @typedef {object} BasicRollOptions\n * @property {number} [target]  The total roll result that must be met for the roll to be considered a success.\n */\n\n/* -------------------------------------------- */\n\n/**\n * Configuration data for the roll prompt.\n *\n * @typedef {object} BasicRollDialogConfiguration\n * @property {boolean} [configure=true]  Display a configuration dialog for the rolling process.\n * @property {typeof RollConfigurationDialog} [applicationClass]  Alternate configuration application to use.\n * @property {BasicRollConfigurationDialogOptions} [options]      Additional options passed to the dialog.\n */\n\n/* -------------------------------------------- */\n\n/**\n * Configuration data for creating a roll message.\n *\n * @typedef {object} BasicRollMessageConfiguration\n * @property {boolean} [create=true]  Create a message when the rolling is complete.\n * @property {string} [rollMode]      The roll mode to apply to this message from `CONFIG.Dice.rollModes`.\n * @property {object} [data={}]       Additional data used when creating the message.\n */\n\n/* -------------------------------------------- */\n\n/**\n * Custom base roll type with methods for building rolls, presenting prompts, and creating messages.\n */\nexport default class BasicRoll extends Roll {\n\n  /**\n   * Default application used for the roll configuration prompt.\n   * @type {typeof RollConfigurationDialog}\n   */\n  static DefaultConfigurationDialog = RollConfigurationDialog;\n\n  /* -------------------------------------------- */\n  /*  Static Construction                         */\n  /* -------------------------------------------- */\n\n  /**\n   * Create a roll instance from a roll config.\n   * @param {BasicRollConfiguration} config          Configuration info for the roll.\n   * @param {BasicRollProcessConfiguration} process  Configuration info for the whole rolling process.\n   * @returns {BasicRoll}\n   */\n  static fromConfig(config, process) {\n    const formula = (config.parts ?? []).join(\" + \");\n    return new this(formula, config.data, config.options);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Construct and perform a roll through the standard workflow.\n   * @param {BasicRollProcessConfiguration} [config={}]   Configuration for the rolls.\n   * @param {BasicRollDialogConfiguration} [dialog={}]    Configuration for roll prompt.\n   * @param {BasicRollMessageConfiguration} [message={}]  Configuration for message creation.\n   * @returns {BasicRoll[]}\n   */\n  static async build(config={}, dialog={}, message={}) {\n    this.applyKeybindings(config, dialog, message);\n\n    let rolls;\n    if ( dialog.configure === false ) rolls = config.rolls?.map(c => this.fromConfig(c, config)) ?? [];\n    else {\n      const DialogClass = dialog.applicationClass ?? this.DefaultConfigurationDialog;\n      rolls = await DialogClass.configure(config, dialog, message);\n    }\n\n    for ( const roll of rolls ) await roll.evaluate();\n\n    if ( rolls?.length && (message.create !== false) ) {\n      await this.toMessage(rolls, message.data, { rollMode: message.rollMode });\n    }\n\n    return rolls;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determines whether the roll process should be fast forwarded.\n   * @param {BasicRollProcessConfiguration} config   Roll configuration data.\n   * @param {BasicRollDialogConfiguration} dialog    Data for the roll configuration dialog.\n   * @param {BasicRollMessageConfiguration} message  Message configuration data.\n   */\n  static applyKeybindings(config, dialog, message) {\n    dialog.configure ??= true;\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Is the result of this roll a failure? Returns `undefined` if roll isn't evaluated.\n   * @type {boolean|void}\n   */\n  get isFailure() {\n    if ( !this._evaluated ) return;\n    if ( !Number.isNumeric(this.options.target) ) return false;\n    return this.total < this.options.target;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Is the result of this roll a success? Returns `undefined` if roll isn't evaluated.\n   * @type {boolean|void}\n   */\n  get isSuccess() {\n    if ( !this._evaluated ) return;\n    if ( !Number.isNumeric(this.options.target) ) return false;\n    return this.total >= this.options.target;\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Messages                               */\n  /* -------------------------------------------- */\n\n  /**\n   * Transform a Roll instance into a ChatMessage, displaying the roll result.\n   * This function can either create the ChatMessage directly, or return the data object that will be used to create it.\n   *\n   * @param {BasicRoll[]} rolls              Rolls to add to the message.\n   * @param {object} messageData             The data object to use when creating the message\n   * @param {options} [options]              Additional options which modify the created message.\n   * @param {string} [options.rollMode]      The template roll mode to use for the message from CONFIG.Dice.rollModes\n   * @param {boolean} [options.create=true]  Whether to automatically create the chat message, or only return the\n   *                                         prepared chatData object.\n   * @returns {Promise<ChatMessage|object>}  A promise which resolves to the created ChatMessage document if create is\n   *                                         true, or the Object of prepared chatData otherwise.\n   */\n  static async toMessage(rolls, messageData={}, { rollMode, create=true }={}) {\n    for ( const roll of rolls ) {\n      if ( !roll._evaluated ) await roll.evaluate({ allowInteractive: rollMode !== CONST.DICE_ROLL_MODES.BLIND });\n      rollMode ??= roll.options.rollMode;\n    }\n\n    // Prepare chat data\n    messageData = foundry.utils.mergeObject({ sound: CONFIG.sounds.dice }, messageData);\n    messageData.rolls = rolls;\n\n    // Process the chat data\n    const cls = getDocumentClass(\"ChatMessage\");\n    const msg = new cls(messageData);\n\n    // Either create or return the data\n    if ( create ) return cls.create(msg.toObject(), { rollMode });\n    else {\n      if ( rollMode ) msg.applyRollMode(rollMode);\n      return msg.toObject();\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Evaluate Methods                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async evaluate(options={}) {\n    this.preCalculateDiceTerms(options);\n    return super.evaluate(options);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  evaluateSync(options={}) {\n    this.preCalculateDiceTerms(options);\n    return super.evaluateSync(options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Maximize/Minimize Methods                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Replaces all dice terms that have modifiers with their maximum/minimum value.\n   *\n   * @param {object} [options={}]            Extra optional arguments which describe or modify the BasicRoll.\n   */\n  preCalculateDiceTerms(options={}) {\n    if ( this._evaluated || (!options.maximize && !options.minimize) ) return;\n    this.terms = this.terms.map(term => {\n      if ( (term instanceof DiceTerm) && term.modifiers.length ) {\n        const minimize = !options.maximize;\n        const number = this.constructor.preCalculateTerm(term, { minimize });\n        if ( Number.isFinite(number) ) return new NumericTerm({ number, options: term.options });\n      }\n      return term;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Gets information from passed die and calculates the maximum or minimum value that could be rolled.\n   *\n   * @param {DiceTerm} die                            DiceTerm to get the maximum/minimum value.\n   * @param {object} [preCalculateOptions={}]         Additional options to modify preCalculate functionality.\n   * @param {boolean} [preCalculateOptions.minimize=false]  Calculate the minimum value instead of the maximum.\n   * @returns {number|null}                                 Maximum/Minimum value that could be rolled as an integer, or\n   *                                                        null if the modifiers could not be precalculated.\n   */\n  static preCalculateTerm(die, { minimize=false }={}) {\n    let face = minimize ? 1 : die.faces;\n    let number = die.number;\n    const currentModifiers = foundry.utils.deepClone(die.modifiers);\n    const keep = new Set([\"k\", \"kh\", \"kl\"]);\n    const drop = new Set([\"d\", \"dh\", \"dl\"]);\n    const validModifiers = new Set([...keep, ...drop, \"max\", \"min\"]);\n    let matchedModifier = false;\n\n    for ( const modifier of currentModifiers ) {\n      const rgx = /(m[ai][xn]|[kd][hl]?)(\\d+)?/i;\n      const match = modifier.match(rgx);\n      if ( !match ) continue;\n      if ( match[0].length < match.input.length ) currentModifiers.push(match.input.slice(match[0].length));\n      let [, command, value] = match;\n      command = command.toLowerCase();\n      if ( !validModifiers.has(command) ) continue;\n\n      matchedModifier = true;\n      const amount = parseInt(value) || (command === \"max\" || command === \"min\" ? -1 : 1);\n      if ( amount > 0 ) {\n        if ( (command === \"max\" && minimize) || (command === \"min\" && !minimize) ) continue;\n        else if ( (command === \"max\" || command === \"min\") ) face = Math.min(die.faces, amount);\n        else if ( keep.has(command) ) number = Math.min(number, amount);\n        else if ( drop.has(command) ) number = Math.max(1, number - amount);\n      }\n    }\n\n    return matchedModifier ? face * number : null;\n  }\n\n  /* -------------------------------------------- */\n  /*  Simplification Methods                      */\n  /* -------------------------------------------- */\n\n  /**\n   * Replace number and faces of dice terms with numeric values where possible.\n   */\n  simplify() {\n    for ( const die of this.dice ) {\n      const n = die._number;\n      if ( (n instanceof BasicRoll) && n.isDeterministic ) die._number = n.evaluateSync().total;\n      const f = die._faces;\n      if ( (f instanceof BasicRoll) && f.isDeterministic ) die._faces = f.evaluateSync().total;\n\n      // Preserve flavor.\n      if ( f.terms?.[0]?.flavor ) die.options.flavor = f.terms[0].flavor;\n    }\n\n    this.resetFormula();\n  }\n}\n","import DamageRollConfigurationDialog from \"../applications/dice/damage-configuration-dialog.mjs\";\nimport { areKeysPressed } from \"../utils.mjs\";\nimport BasicRoll from \"./basic-roll.mjs\";\n\nconst { DiceTerm, FunctionTerm, NumericTerm, OperatorTerm, ParentheticalTerm, StringTerm } = foundry.dice.terms;\n\n/**\n * Configuration data for the process of rolling a damage roll.\n *\n * @typedef {BasicRollProcessConfiguration} DamageRollProcessConfiguration\n * @property {DamageRollConfiguration[]} rolls         Configuration data for individual rolls.\n * @property {CriticalDamageConfiguration} [critical]  Critical configuration for all rolls.\n * @property {number} [scaling=0]                      Scale increase above base damage.\n */\n\n/**\n * Damage roll configuration data.\n *\n * @typedef {BasicRollConfiguration} DamageRollConfiguration\n * @property {DamageRollOptions} [options] - Options passed through to the roll.\n */\n\n/**\n * Options that describe a damage roll.\n *\n * @typedef {BasicRollOptions} DamageRollOptions\n * @property {boolean} [isCritical]                    Should critical damage be calculated for this roll?\n * @property {CriticalDamageConfiguration} [critical]  Critical configuration for this roll.\n * @property {string[]} [properties]                   Physical properties of the source (e.g. magical, silvered).\n * @property {string} [type]                           Type of damage represented.\n * @property {string[]} [types]                        List of damage types selectable in the configuration app. If no\n *                                                     type is provided, then the first of these types will be used.\n */\n\n/**\n * Critical effects configuration data.\n *\n * @typedef {object} CriticalDamageConfiguration\n * @property {boolean} [allow=true]       Should critical damage be allowed?\n * @property {number} [multiplier=2]      Amount by which to multiply critical damage.\n * @property {number} [bonusDice=0]       Additional dice added to first term when calculating critical damage.\n * @property {string} [bonusDamage]       Additional, unmodified, damage formula added when calculating a critical.\n * @property {boolean} [multiplyDice]     Should dice result be multiplied rather than number of dice rolled increased?\n * @property {boolean} [multiplyNumeric]  Should numeric terms be multiplied along side dice during criticals?\n * @property {string} [powerfulCritical]  Maximize result of extra dice added by critical, rather than rolling.\n */\n\n/**\n * A type of Roll specific to a damage (or healing) roll in the 5e system.\n * @param {string} formula                  The string formula to parse.\n * @param {object} data                     The data object against which to parse attributes within the formula.\n * @param {DamageRollOptions} [options={}]  Extra optional arguments which describe or modify the DamageRoll.\n */\nexport default class DamageRoll extends BasicRoll {\n  constructor(formula, data, options) {\n    super(formula, data, options);\n    if ( !this.options.preprocessed ) this.preprocessFormula();\n    if ( !this.options.configured ) this.configureDamage();\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static DefaultConfigurationDialog = DamageRollConfigurationDialog;\n\n  /* -------------------------------------------- */\n  /*  Static Construction                         */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static fromConfig(config, process) {\n    const roll = super.fromConfig(config, process);\n    if ( process.critical ) roll.configureDamage({ critical: process.critical });\n    return roll;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static async build(config = {}, dialog = {}, message = {}) {\n    config.critical ??= {};\n    config.critical.multiplyNumeric ??= game.settings.get(\"dnd5e\", \"criticalDamageModifiers\");\n    config.critical.powerfulCritical ??= game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\");\n    return super.build(config, dialog, message);\n  }\n\n  /* -------------------------------------------- */\n\n  /** @override */\n  static applyKeybindings(config, dialog, message) {\n    const keys = {\n      normal: areKeysPressed(config.event, \"skipDialogNormal\")\n        || areKeysPressed(config.event, \"skipDialogDisadvantage\"),\n      critical: areKeysPressed(config.event, \"skipDialogAdvantage\")\n    };\n\n    // Should the roll configuration dialog be displayed?\n    dialog.configure ??= Object.values(keys).every(k => !k);\n\n    // Determine critical mode\n    for ( const roll of config.rolls ) {\n      roll.options ??= {};\n      roll.options.isCritical ??= keys.critical;\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * Is this damage critical.\n   * @type {boolean}\n   */\n  get isCritical() {\n    return this.options.isCritical === true;\n  }\n\n  /* -------------------------------------------- */\n  /*  Roll Configuration                          */\n  /* -------------------------------------------- */\n\n  /**\n   * Perform any term-merging required to ensure that criticals can be calculated successfully.\n   * @protected\n   */\n  preprocessFormula() {\n    for ( let [i, term] of this.terms.entries() ) {\n      const nextTerm = this.terms[i + 1];\n      const prevTerm = this.terms[i - 1];\n\n      // Convert shorthand dX terms to 1dX preemptively to allow them to be appropriately doubled for criticals\n      if ( (term instanceof StringTerm) && /^d\\d+/.test(term.term) && !(prevTerm instanceof ParentheticalTerm) ) {\n        const formula = `1${term.term}`;\n        const newTerm = new Roll(formula).terms[0];\n        this.terms.splice(i, 1, newTerm);\n        term = newTerm;\n      }\n\n      // Merge parenthetical terms that follow string terms to build a dice term (to allow criticals)\n      else if ( (term instanceof ParentheticalTerm) && (prevTerm instanceof StringTerm)\n        && prevTerm.term.match(/^[0-9]*d$/)) {\n        if ( term.isDeterministic ) {\n          let newFormula = `${prevTerm.term}${term.evaluate().total}`;\n          let deleteCount = 2;\n\n          // Merge in any roll modifiers\n          if ( nextTerm instanceof StringTerm ) {\n            newFormula += nextTerm.term;\n            deleteCount += 1;\n          }\n\n          const newTerm = (new Roll(newFormula)).terms[0];\n          this.terms.splice(i - 1, deleteCount, newTerm);\n          term = newTerm;\n        }\n      }\n\n      // Merge any parenthetical terms followed by string terms\n      else if ( (term instanceof ParentheticalTerm || term instanceof FunctionTerm) && (nextTerm instanceof StringTerm)\n        && nextTerm.term.match(/^d[0-9]*$/)) {\n        if ( term.isDeterministic ) {\n          const newFormula = `${term.evaluate().total}${nextTerm.term}`;\n          const newTerm = (new Roll(newFormula)).terms[0];\n          this.terms.splice(i, 2, newTerm);\n          term = newTerm;\n        }\n      }\n    }\n\n    // Re-compile the underlying formula\n    this.resetFormula();\n\n    // Mark configuration as complete\n    this.options.preprocessed = true;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply optional modifiers which customize the behavior of the d20term.\n   * @param {object} [options={}]\n   * @param {CriticalDamageConfiguration} [options.critical={}]  Critical configuration to take into account, will be\n   *                                                             superseded by the roll's configuration.\n   * @protected\n   */\n  configureDamage({ critical={} }={}) {\n    foundry.utils.mergeObject(critical, this.options.critical ?? {});\n\n    const flatBonus = new Map();\n    for ( let [i, term] of this.terms.entries() ) {\n      // Multiply dice terms\n      if ( term instanceof DiceTerm ) {\n        if ( term._number instanceof Roll ) {\n          // Complex number term.\n          if ( !term._number.isDeterministic ) continue;\n          if ( !term._number._evaluated ) term._number.evaluateSync();\n        }\n        term.options.baseNumber = term.options.baseNumber ?? term.number; // Reset back\n        term.number = term.options.baseNumber;\n        if ( this.isCritical ) {\n          let cm = critical.multiplier ?? 2;\n\n          // Powerful critical - maximize damage and reduce the multiplier by 1\n          if ( critical.powerfulCritical ) {\n            const bonus = Roll.create(term.formula).evaluateSync({ maximize: true }).total;\n            if ( bonus > 0 ) {\n              const flavor = term.flavor?.toLowerCase().trim() ?? game.i18n.localize(\"DND5E.PowerfulCritical\");\n              flatBonus.set(flavor, (flatBonus.get(flavor) ?? 0) + bonus);\n            }\n            cm = Math.max(1, cm-1);\n          }\n\n          // Alter the damage term\n          let cb = (critical.bonusDice && (i === 0)) ? critical.bonusDice : 0;\n          term.alter(cm, cb);\n          term.options.critical = true;\n        }\n      }\n\n      // Multiply numeric terms\n      else if ( critical.multiplyNumeric && (term instanceof NumericTerm) ) {\n        term.options.baseNumber = term.options.baseNumber ?? term.number; // Reset back\n        term.number = term.options.baseNumber;\n        if ( this.isCritical ) {\n          term.number *= (critical.multiplier ?? 2);\n          term.options.critical = true;\n        }\n      }\n    }\n\n    // Add powerful critical bonus\n    if ( critical.powerfulCritical && flatBonus.size ) {\n      for ( const [type, number] of flatBonus.entries() ) {\n        this.terms.push(new OperatorTerm({operator: \"+\"}));\n        this.terms.push(new NumericTerm({number, options: {flavor: type}}));\n      }\n    }\n\n    // Add extra critical damage term\n    if ( this.isCritical && critical.bonusDamage ) {\n      const extra = new Roll(critical.bonusDamage, this.data);\n      if ( !(extra.terms[0] instanceof OperatorTerm) ) this.terms.push(new OperatorTerm({operator: \"+\"}));\n      this.terms.push(...extra.terms);\n    }\n\n    // Re-compile the underlying formula\n    this.resetFormula();\n\n    // Mark configuration as complete\n    this.options.configured = true;\n  }\n\n  /* -------------------------------------------- */\n  /*  Configuration Dialog                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Dialog prompt used to configure evaluation of an existing D20Roll instance.\n   * @param {object} data                     Dialog configuration data\n   * @param {string} [data.title]               The title of the shown dialog window\n   * @param {number} [data.defaultRollMode]     The roll mode that the roll mode select element should default to\n   * @param {string} [data.defaultCritical]     Should critical be selected as default\n   * @param {string} [data.template]            A custom path to an HTML template to use instead of the default\n   * @param {boolean} [data.allowCritical=true] Allow critical hit to be chosen as a possible damage mode\n   * @param {object} options                  Additional Dialog customization options\n   * @returns {Promise<D20Roll|null>}         A resulting D20Roll object constructed with the dialog, or null if the\n   *                                          dialog was closed\n   */\n  async configureDialog(data={}, options={}) {\n    const rolls = await this.constructor.configureDialog([this], data, options);\n    return rolls[0] ?? null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Create a Dialog prompt used to configure evaluation of one or more damage rolls.\n   * @param {DamageRoll[]} rolls                Damage rolls to configure.\n   * @param {object} [data={}]                  Dialog configuration data\n   * @param {string} [data.title]               The title of the shown dialog window\n   * @param {number} [data.defaultRollMode]     The roll mode that the roll mode select element should default to\n   * @param {string} [data.defaultCritical]     Should critical be selected as default\n   * @param {string} [data.template]            A custom path to an HTML template to use instead of the default\n   * @param {boolean} [data.allowCritical=true] Allow critical hit to be chosen as a possible damage mode\n   * @param {object} options                    Additional Dialog customization options\n   * @returns {Promise<D20Roll|null>}           A resulting D20Roll object constructed with the dialog, or null if the\n   *                                            dialog was closed\n   */\n  static async configureDialog(rolls, {\n    title, defaultRollMode, defaultCritical=false, template, allowCritical=true}={}, options={}) {\n    foundry.utils.logCompatibilityWarning(\n      \"The `configureDialog` on DamageRoll has been deprecated and is now handled through `DamageRoll.build`.\",\n      { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\" }\n    );\n    const DialogClass = this.DefaultConfigurationDialog;\n    return await DialogClass.configure(\n      { critical: { allow: allowCritical } }, { options: { title } }, { rollMode: defaultRollMode }\n    );\n  }\n}\n","const {\n  Coin, DiceTerm, Die, FunctionTerm, NumericTerm, OperatorTerm, ParentheticalTerm, RollTerm\n} = foundry.dice.terms;\n\n/**\n * A standardized helper function for simplifying the constant parts of a multipart roll formula.\n *\n * @param {string} formula                          The original roll formula.\n * @param {object} [options]                        Formatting options.\n * @param {boolean} [options.preserveFlavor=false]  Preserve flavor text in the simplified formula.\n * @param {boolean} [options.deterministic]         Strip any non-deterministic terms from the result.\n *\n * @returns {string}  The resulting simplified formula.\n */\nexport default function simplifyRollFormula(formula, { preserveFlavor=false, deterministic=false } = {}) {\n  // Create a new roll and verify that the formula is valid before attempting simplification.\n  let roll;\n  try { roll = new Roll(formula); }\n  catch(err) { console.warn(`Unable to simplify formula '${formula}': ${err}`); }\n  Roll.validate(roll.formula);\n\n  // Optionally strip flavor annotations.\n  if ( !preserveFlavor ) roll.terms = Roll.parse(roll.formula.replace(RollTerm.FLAVOR_REGEXP, \"\"));\n\n  if ( deterministic ) {\n    // Perform arithmetic simplification to simplify parsing through the terms.\n    roll.terms = _simplifyOperatorTerms(roll.terms);\n\n    // Remove non-deterministic terms, their preceding operators, and dependent operators/terms.\n    const terms = [];\n    let temp = [];\n    let multiplicative = false;\n    let determ;\n\n    for ( let i = roll.terms.length - 1; i >= 0; ) {\n      let paren;\n      let term = roll.terms[i];\n      if ( term instanceof ParentheticalTerm ) {\n        paren = simplifyRollFormula(term.term, { preserveFlavor, deterministic });\n      }\n      if ( Number.isNumeric(paren) ) {\n        const termData = { number: paren };\n        if ( preserveFlavor ) termData.options = { flavor: term.flavor };\n        term = new NumericTerm(termData);\n      }\n      determ = term.isDeterministic && (!multiplicative || determ);\n      if ( determ ) temp.unshift(term);\n      else temp = [];\n      term = roll.terms[--i];\n      while ( term instanceof OperatorTerm ) {\n        if ( determ ) temp.unshift(term);\n        if ( (term.operator === \"*\") || (term.operator === \"/\") || (term.operator === \"%\") ) multiplicative = true;\n        else {\n          multiplicative = false;\n          while ( temp.length ) terms.unshift(temp.pop());\n        }\n        term = roll.terms[--i];\n      }\n    }\n    if ( determ ) {\n      while ( temp.length ) terms.unshift(temp.pop());\n    }\n    roll.terms = terms;\n  }\n\n  // Perform arithmetic simplification on the existing roll terms.\n  roll.terms = _simplifyOperatorTerms(roll.terms);\n\n  // If the formula contains multiplication or division we cannot easily simplify\n  if ( /[*/]/.test(roll.formula) ) {\n    if ( roll.isDeterministic && !/d\\(/.test(roll.formula) && (!/\\[/.test(roll.formula) || !preserveFlavor) ) {\n      return String(new Roll(roll.formula).evaluateSync().total);\n    }\n    else return roll.constructor.getFormula(roll.terms);\n  }\n\n  // Flatten the roll formula and eliminate string terms.\n  roll.terms = _expandParentheticalTerms(roll.terms);\n  roll.terms = Roll.simplifyTerms(roll.terms);\n\n  // Group terms by type and perform simplifications on various types of roll term.\n  let { poolTerms, diceTerms, mathTerms, numericTerms } = _groupTermsByType(roll.terms);\n  numericTerms = _simplifyNumericTerms(numericTerms ?? []);\n  diceTerms = _simplifyDiceTerms(diceTerms ?? []);\n\n  // Recombine the terms into a single term array and remove an initial + operator if present.\n  const simplifiedTerms = [diceTerms, poolTerms, mathTerms, numericTerms].flat().filter(Boolean);\n  if ( simplifiedTerms[0]?.operator === \"+\" ) simplifiedTerms.shift();\n  return roll.constructor.getFormula(simplifiedTerms);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to perform arithmetic simplification and remove redundant operator terms.\n * @param {RollTerm[]} terms  An array of roll terms.\n * @returns {RollTerm[]}      A new array of roll terms with redundant operators removed.\n */\nfunction _simplifyOperatorTerms(terms) {\n  return terms.reduce((acc, term) => {\n    const prior = acc[acc.length - 1];\n    const ops = new Set([prior?.operator, term.operator]);\n\n    // If one of the terms is not an operator, add the current term as is.\n    if ( ops.has(undefined) ) acc.push(term);\n\n    // Replace consecutive \"+ -\" operators with a \"-\" operator.\n    else if ( (ops.has(\"+\")) && (ops.has(\"-\")) ) acc.splice(-1, 1, new OperatorTerm({ operator: \"-\" }));\n\n    // Replace double \"-\" operators with a \"+\" operator.\n    else if ( (ops.has(\"-\")) && (ops.size === 1) ) acc.splice(-1, 1, new OperatorTerm({ operator: \"+\" }));\n\n    // Don't include \"+\" operators that directly follow \"+\", \"*\", or \"/\". Otherwise, add the term as is.\n    else if ( !ops.has(\"+\") ) acc.push(term);\n\n    return acc;\n  }, []);\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function for combining unannotated numeric terms in an array into a single numeric term.\n * @param {object[]} terms  An array of roll terms.\n * @returns {object[]}      A new array of terms with unannotated numeric terms combined into one.\n */\nfunction _simplifyNumericTerms(terms) {\n  const simplified = [];\n  const { annotated, unannotated } = _separateAnnotatedTerms(terms);\n\n  // Combine the unannotated numerical bonuses into a single new NumericTerm.\n  if ( unannotated.length ) {\n    const staticBonus = Roll.safeEval(Roll.getFormula(unannotated));\n    if ( staticBonus === 0 ) return [...annotated];\n\n    // If the staticBonus is greater than 0, add a \"+\" operator so the formula remains valid.\n    if ( staticBonus > 0 ) simplified.push(new OperatorTerm({ operator: \"+\"}));\n    simplified.push(new NumericTerm({ number: staticBonus} ));\n  }\n  return [...simplified, ...annotated];\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to group dice of the same size and sign into single dice terms.\n * @param {object[]} terms  An array of DiceTerms and associated OperatorTerms.\n * @returns {object[]}      A new array of simplified dice terms.\n */\nfunction _simplifyDiceTerms(terms) {\n  const { annotated, unannotated } = _separateAnnotatedTerms(terms);\n\n  // Split the unannotated terms into different die sizes and signs\n  const diceQuantities = unannotated.reduce((obj, curr, i) => {\n    if ( curr instanceof OperatorTerm ) return obj;\n    const isCoin = curr.constructor?.name === \"Coin\";\n    const face = isCoin ? \"c\" : curr.faces;\n    const modifiers = isCoin ? \"\" : curr.modifiers.filterJoin(\"\");\n    const key = `${unannotated[i - 1].operator}${face}${modifiers}`;\n    obj[key] ??= {};\n    if ( (curr._number instanceof Roll) && (curr._number.isDeterministic) ) curr._number.evaluateSync();\n    obj[key].number = (obj[key].number ?? 0) + curr.number;\n    if ( !isCoin ) obj[key].modifiers = (obj[key].modifiers ?? []).concat(curr.modifiers);\n    return obj;\n  }, {});\n\n  // Add new die and operator terms to simplified for each die size and sign\n  const simplified = Object.entries(diceQuantities).flatMap(([key, {number, modifiers}]) => ([\n    new OperatorTerm({ operator: key.charAt(0) }),\n    key.slice(1) === \"c\"\n      ? new Coin({ number: number })\n      : new Die({ number, faces: parseInt(key.slice(1)), modifiers: [...new Set(modifiers)] })\n  ]));\n  return [...simplified, ...annotated];\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to extract the contents of parenthetical terms into their own terms.\n * @param {object[]} terms  An array of roll terms.\n * @returns {object[]}      A new array of terms with no parenthetical terms.\n */\nfunction _expandParentheticalTerms(terms) {\n  terms = terms.reduce((acc, term) => {\n    if ( term instanceof ParentheticalTerm ) {\n      if ( term.isDeterministic ) {\n        const roll = new Roll(term.term);\n        term = new NumericTerm({ number: roll.evaluateSync().total });\n      } else {\n        const subterms = new Roll(term.term).terms;\n        term = _expandParentheticalTerms(subterms);\n      }\n    }\n    acc.push(term);\n    return acc;\n  }, []);\n  return _simplifyOperatorTerms(terms.flat());\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to group terms into PoolTerms, DiceTerms, FunctionTerms, and NumericTerms.\n * FunctionTerms are included as NumericTerms if they are deterministic.\n * @param {RollTerm[]} terms  An array of roll terms.\n * @returns {object}          An object mapping term types to arrays containing roll terms of that type.\n */\nfunction _groupTermsByType(terms) {\n  // Add an initial operator so that terms can be rearranged arbitrarily.\n  if ( !(terms[0] instanceof OperatorTerm) ) terms.unshift(new OperatorTerm({ operator: \"+\" }));\n\n  return terms.reduce((obj, term, i) => {\n    let type;\n    if ( term instanceof DiceTerm ) type = DiceTerm;\n    else if ( (term instanceof FunctionTerm) && (term.isDeterministic) ) type = NumericTerm;\n    else type = term.constructor;\n    const key = `${type.name.charAt(0).toLowerCase()}${type.name.substring(1)}s`;\n\n    // Push the term and the preceding OperatorTerm.\n    (obj[key] = obj[key] ?? []).push(terms[i - 1], term);\n    return obj;\n  }, {});\n}\n\n/* -------------------------------------------- */\n\n/**\n * A helper function to separate annotated terms from unannotated terms.\n * @param {object[]} terms     An array of DiceTerms and associated OperatorTerms.\n * @returns {Array | Array[]}  A pair of term arrays, one containing annotated terms.\n */\nfunction _separateAnnotatedTerms(terms) {\n  return terms.reduce((obj, curr, i) => {\n    if ( curr instanceof OperatorTerm ) return obj;\n    obj[curr.flavor ? \"annotated\" : \"unannotated\"].push(terms[i - 1], curr);\n    return obj;\n  }, { annotated: [], unannotated: [] });\n}\n","import aggregateDamageRolls from \"../dice/aggregate-damage-rolls.mjs\";\nimport DamageRoll from \"../dice/damage-roll.mjs\";\nimport simplifyRollFormula from \"../dice/simplify-roll-formula.mjs\";\n\nexport default class ChatMessage5e extends ChatMessage {\n\n  /* -------------------------------------------- */\n  /*  Properties                                  */\n  /* -------------------------------------------- */\n\n  /**\n   * The currently highlighted token for attack roll evaluation.\n   * @type {Token5e|null}\n   */\n  _highlighted = null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should the apply damage options appear?\n   * @type {boolean}\n   */\n  get canApplyDamage() {\n    const type = this.flags.dnd5e?.roll?.type;\n    if ( type && (type !== \"damage\") ) return false;\n    return this.isRoll && this.isContentVisible && !!canvas.tokens?.controlled.length;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should the select targets options appear?\n   * @type {boolean}\n   */\n  get canSelectTargets() {\n    if ( this.flags.dnd5e?.roll?.type !== \"attack\" ) return false;\n    return this.isRoll && this.isContentVisible;\n  }\n\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  get isRoll() {\n    return super.isRoll && !this.flags.dnd5e?.rest;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Should roll DCs and other challenge details be displayed on this card?\n   * @type {boolean}\n   */\n  get shouldDisplayChallenge() {\n    if ( game.user.isGM || (this.author === game.user) ) return true;\n    switch ( game.settings.get(\"dnd5e\", \"challengeVisibility\") ) {\n      case \"all\": return true;\n      case \"player\": return !this.author.isGM;\n      default: return false;\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Migrations                             */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  static migrateData(source) {\n    source = super.migrateData(source);\n    if ( foundry.utils.hasProperty(source, \"flags.dnd5e.itemData\") ) {\n      foundry.utils.setProperty(source, \"flags.dnd5e.item.data\", source.flags.dnd5e.itemData);\n      delete source.flags.dnd5e.itemData;\n    }\n    if ( foundry.utils.hasProperty(source, \"flags.dnd5e.use\") ) {\n      const use = source.flags.dnd5e.use;\n      foundry.utils.setProperty(source, \"flags.dnd5e.messageType\", \"usage\");\n      if ( use.type ) foundry.utils.setProperty(source, \"flags.dnd5e.item.type\", use.type);\n      if ( use.itemId ) foundry.utils.setProperty(source, \"flags.dnd5e.item.id\", use.itemId);\n      if ( use.itemUuid ) foundry.utils.setProperty(source, \"flags.dnd5e.item.uuid\", use.itemUuid);\n    }\n    return source;\n  }\n\n  /* -------------------------------------------- */\n  /*  Data Preparation                            */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  prepareData() {\n    super.prepareData();\n    this._shimFlags();\n    dnd5e.registry.messages.track(this);\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  async getHTML(...args) {\n    const html = await super.getHTML();\n\n    this._displayChatActionButtons(html);\n    this._highlightCriticalSuccessFailure(html);\n    if ( game.settings.get(\"dnd5e\", \"autoCollapseItemCards\") ) {\n      html.find(\".description.collapsible\").each((i, el) => el.classList.add(\"collapsed\"));\n    }\n\n    this._enrichChatCard(html[0]);\n    this._collapseTrays(html[0]);\n    this._activateActivityListeners(html[0]);\n\n    /**\n     * A hook event that fires after dnd5e-specific chat message modifications have completed.\n     * @function dnd5e.renderChatMessage\n     * @memberof hookEvents\n     * @param {ChatMessage5e} message  Chat message being rendered.\n     * @param {HTMLElement} html       HTML contents of the message.\n     */\n    Hooks.callAll(\"dnd5e.renderChatMessage\", this, html[0]);\n\n    return html;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle collapsing or expanding trays depending on user settings.\n   * @param {HTMLElement} html  Rendered contents of the message.\n   */\n  _collapseTrays(html) {\n    let collapse;\n    switch ( game.settings.get(\"dnd5e\", \"autoCollapseChatTrays\") ) {\n      case \"always\": collapse = true; break;\n      case \"never\": collapse = false; break;\n      // Collapse chat message trays older than 5 minutes\n      case \"older\": collapse = this.timestamp < Date.now() - (5 * 60 * 1000); break;\n    }\n    for ( const tray of html.querySelectorAll(\".card-tray, .effects-tray\") ) {\n      tray.classList.toggle(\"collapsed\", collapse);\n    }\n    for ( const element of html.querySelectorAll(\"damage-application, effect-application\") ) {\n      element.toggleAttribute(\"open\", !collapse);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Optionally hide the display of chat card action buttons which cannot be performed by the user\n   * @param {jQuery} html     Rendered contents of the message.\n   * @protected\n   */\n  _displayChatActionButtons(html) {\n    const chatCard = html.find(\".dnd5e.chat-card, .dnd5e2.chat-card\");\n    if ( chatCard.length > 0 ) {\n      const flavor = html.find(\".flavor-text\");\n      if ( flavor.text() === html.find(\".item-name\").text() ) flavor.remove();\n\n      if ( this.shouldDisplayChallenge ) chatCard[0].dataset.displayChallenge = \"\";\n\n      const actor = game.actors.get(this.speaker.actor);\n      const isCreator = game.user.isGM || actor?.isOwner || (this.author.id === game.user.id);\n      for ( const button of html[0].querySelectorAll(\".card-buttons button\") ) {\n        if ( button.dataset.visibility === \"all\" ) continue;\n\n        // GM buttons should only be visible to GMs, otherwise button should only be visible to message's creator\n        if ( ((button.dataset.visibility === \"gm\") && !game.user.isGM) || !isCreator\n          || this.getAssociatedActivity()?.shouldHideChatButton(button, this) ) button.hidden = true;\n      }\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Highlight critical success or failure on d20 rolls.\n   * @param {jQuery} html     Rendered contents of the message.\n   * @protected\n   */\n  _highlightCriticalSuccessFailure(html) {\n    if ( !this.isContentVisible || !this.rolls.length ) return;\n    const originatingMessage = this.getOriginatingMessage();\n    const displayChallenge = originatingMessage?.shouldDisplayChallenge;\n    const displayAttackResult = game.user.isGM || (game.settings.get(\"dnd5e\", \"attackRollVisibility\") !== \"none\");\n\n    /**\n     * Create an icon to indicate success or failure.\n     * @param {string} cls  The icon class.\n     * @returns {HTMLElement}\n     */\n    function makeIcon(cls) {\n      const icon = document.createElement(\"i\");\n      icon.classList.add(\"fas\", cls);\n      icon.setAttribute(\"inert\", \"\");\n      return icon;\n    }\n\n    // Highlight rolls where the first part is a d20 roll\n    for ( let [index, d20Roll] of this.rolls.entries() ) {\n\n      const d0 = d20Roll.dice[0];\n      if ( (d0?.faces !== 20) || (d0?.values.length !== 1) ) continue;\n\n      d20Roll = dnd5e.dice.D20Roll.fromRoll(d20Roll);\n      const d = d20Roll.dice[0];\n\n      const isModifiedRoll = (\"success\" in d.results[0]) || d.options.marginSuccess || d.options.marginFailure;\n      if ( isModifiedRoll ) continue;\n\n      // Highlight successes and failures\n      const total = html.find(\".dice-total\")[index];\n      if ( !total ) continue;\n      // Only attack rolls and death saves can crit or fumble.\n      const canCrit = [\"attack\", \"death\"].includes(this.getFlag(\"dnd5e\", \"roll.type\"));\n      const isAttack = this.getFlag(\"dnd5e\", \"roll.type\") === \"attack\";\n      const showResult = isAttack ? displayAttackResult : displayChallenge;\n      if ( d.options.target && showResult ) {\n        if ( d20Roll.total >= d.options.target ) total.classList.add(\"success\");\n        else total.classList.add(\"failure\");\n      }\n      if ( canCrit && d20Roll.isCritical ) total.classList.add(\"critical\");\n      if ( canCrit && d20Roll.isFumble ) total.classList.add(\"fumble\");\n\n      const icons = document.createElement(\"div\");\n      icons.classList.add(\"icons\");\n      if ( total.classList.contains(\"critical\") ) icons.append(makeIcon(\"fa-check\"), makeIcon(\"fa-check\"));\n      else if ( total.classList.contains(\"fumble\") ) icons.append(makeIcon(\"fa-xmark\"), makeIcon(\"fa-xmark\"));\n      else if ( total.classList.contains(\"success\") ) icons.append(makeIcon(\"fa-check\"));\n      else if ( total.classList.contains(\"failure\") ) icons.append(makeIcon(\"fa-xmark\"));\n      if ( icons.children.length ) total.append(icons);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Augment the chat card markup for additional styling.\n   * @param {HTMLElement} html  The chat card markup.\n   * @protected\n   */\n  _enrichChatCard(html) {\n    // Header matter\n    const actor = this.getAssociatedActor();\n\n    let img;\n    let nameText;\n    if ( this.isContentVisible ) {\n      img = actor?.img ?? this.author.avatar;\n      nameText = this.alias;\n    } else {\n      img = this.author.avatar;\n      nameText = this.author.name;\n    }\n\n    const avatar = document.createElement(\"a\");\n    avatar.classList.add(\"avatar\");\n    if ( actor ) avatar.dataset.uuid = actor.uuid;\n    avatar.innerHTML = `<img src=\"${img}\" alt=\"${nameText}\">`;\n\n    const name = document.createElement(\"span\");\n    name.classList.add(\"name-stacked\");\n    name.innerHTML = `<span class=\"title\">${nameText}</span>`;\n\n    const subtitle = document.createElement(\"span\");\n    subtitle.classList.add(\"subtitle\");\n    if ( this.whisper.length ) subtitle.innerText = html.querySelector(\".whisper-to\")?.innerText ?? \"\";\n    if ( (nameText !== this.author?.name) && !subtitle.innerText.length ) subtitle.innerText = this.author?.name ?? \"\";\n\n    name.appendChild(subtitle);\n\n    const sender = html.querySelector(\".message-sender\");\n    sender?.replaceChildren(avatar, name);\n    html.querySelector(\".whisper-to\")?.remove();\n\n    // Context menu\n    const metadata = html.querySelector(\".message-metadata\");\n    const deleteButton = metadata.querySelector(\".message-delete\");\n    if ( !game.user.isGM ) deleteButton?.remove();\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\"aria-label\", game.i18n.localize(\"DND5E.AdditionalControls\"));\n    anchor.classList.add(\"chat-control\");\n    anchor.dataset.contextMenu = \"\";\n    anchor.innerHTML = '<i class=\"fas fa-ellipsis-vertical fa-fw\"></i>';\n    metadata.appendChild(anchor);\n\n    // SVG icons\n    html.querySelectorAll(\"i.dnd5e-icon\").forEach(el => {\n      const icon = document.createElement(\"dnd5e-icon\");\n      icon.src = el.dataset.src;\n      el.replaceWith(icon);\n    });\n\n    // Enriched roll flavor\n    const roll = this.getFlag(\"dnd5e\", \"roll\");\n    const item = this.getAssociatedItem();\n    const activity = this.getAssociatedActivity();\n    if ( this.isContentVisible && item && roll ) {\n      const isCritical = (roll.type === \"damage\") && this.rolls[0]?.isCritical;\n      const subtitle = roll.type === \"damage\"\n        ? isCritical ? game.i18n.localize(\"DND5E.CriticalHit\") : game.i18n.localize(\"DND5E.DamageRoll\")\n        : roll.type === \"attack\"\n          ? (activity?.getActionLabel(roll.attackMode) ?? \"\")\n          : (item.system.type?.label ?? game.i18n.localize(CONFIG.Item.typeLabels[item.type]));\n      const flavor = document.createElement(\"div\");\n      flavor.classList.add(\"dnd5e2\", \"chat-card\");\n      flavor.innerHTML = `\n        <section class=\"card-header description ${isCritical ? \"critical\" : \"\"}\">\n          <header class=\"summary\">\n            <img class=\"gold-icon\" src=\"${item.img}\" alt=\"${item.name}\">\n            <div class=\"name-stacked\">\n              <span class=\"title\">${item.name}</span>\n              <span class=\"subtitle\">${subtitle}</span>\n            </div>\n          </header>\n        </section>\n      `;\n      html.querySelector(\".message-header .flavor-text\").remove();\n      html.querySelector(\".message-content\").insertAdjacentElement(\"afterbegin\", flavor);\n    }\n\n    // Attack targets\n    this._enrichAttackTargets(html);\n\n    // Dice rolls\n    if ( this.isContentVisible ) {\n      html.querySelectorAll(\".dice-tooltip\").forEach((el, i) => {\n        if ( !(roll instanceof DamageRoll) && this.rolls[i] ) this._enrichRollTooltip(this.rolls[i], el);\n      });\n      this._enrichDamageTooltip(this.rolls.filter(r => r instanceof DamageRoll), html);\n      this._enrichEnchantmentTooltip(html);\n      html.querySelectorAll(\".dice-roll\").forEach(el => el.addEventListener(\"click\", this._onClickDiceRoll.bind(this)));\n    } else {\n      html.querySelectorAll(\".dice-roll\").forEach(el => el.classList.add(\"secret-roll\"));\n    }\n\n    // Effects tray\n    this._enrichUsageEffects(html);\n\n    avatar.addEventListener(\"click\", this._onTargetMouseDown.bind(this));\n    avatar.addEventListener(\"pointerover\", this._onTargetHoverIn.bind(this));\n    avatar.addEventListener(\"pointerout\", this._onTargetHoverOut.bind(this));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Augment roll tooltips with some additional information and styling.\n   * @param {Roll} roll            The roll instance.\n   * @param {HTMLDivElement} html  The roll tooltip markup.\n   */\n  _enrichRollTooltip(roll, html) {\n    const constant = Number(simplifyRollFormula(roll._formula, { deterministic: true }));\n    if ( !constant ) return;\n    const sign = constant < 0 ? \"-\" : \"+\";\n    const part = document.createElement(\"section\");\n    part.classList.add(\"tooltip-part\", \"constant\");\n    part.innerHTML = `\n      <div class=\"dice\">\n        <ol class=\"dice-rolls\"></ol>\n        <div class=\"total\">\n          <span class=\"value\"><span class=\"sign\">${sign}</span>${Math.abs(constant)}</span>\n        </div>\n      </div>\n    `;\n    html.appendChild(part);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Augment attack cards with additional information.\n   * @param {HTMLLIElement} html   The chat card.\n   * @protected\n   */\n  _enrichAttackTargets(html) {\n    const attackRoll = this.rolls[0];\n    const visibility = game.settings.get(\"dnd5e\", \"attackRollVisibility\");\n    const isVisible = game.user.isGM || (visibility !== \"none\");\n    if ( !isVisible || !(attackRoll instanceof dnd5e.dice.D20Roll) ) return;\n\n    const masteryConfig = CONFIG.DND5E.weaponMasteries[attackRoll.options.mastery];\n    if ( masteryConfig ) {\n      const p = document.createElement(\"p\");\n      p.classList.add(\"supplement\");\n      let mastery = masteryConfig.label;\n      if ( masteryConfig.reference ) mastery = `\n        <a class=\"content-link\" draggable=\"true\" data-link data-uuid=\"${masteryConfig.reference}\"\n           data-tooltip=\"${mastery}\">${mastery}</a>\n      `;\n      p.innerHTML = `<strong>${game.i18n.format(\"DND5E.WEAPON.Mastery.Flavor\")}</strong> ${mastery}`;\n      (html.querySelector(\".chat-card\") ?? html.querySelector(\".message-content\"))?.appendChild(p);\n    }\n\n    const targets = this.getFlag(\"dnd5e\", \"targets\");\n    if ( !targets?.length ) return;\n    const tray = document.createElement(\"div\");\n    tray.classList.add(\"dnd5e2\");\n    tray.innerHTML = `\n      <div class=\"card-tray targets-tray collapsible collapsed\">\n        <label class=\"roboto-upper\">\n          <i class=\"fas fa-bullseye\" inert></i>\n          <span>${game.i18n.localize(\"DND5E.TargetPl\")}</span>\n          <i class=\"fas fa-caret-down\" inert></i>\n        </label>\n        <div class=\"collapsible-content\">\n          <ul class=\"dnd5e2 unlist evaluation wrapper\"></ul>\n        </div>\n      </div>\n    `;\n    const evaluation = tray.querySelector(\"ul\");\n    evaluation.innerHTML = targets.map(({ name, ac, uuid }) => {\n      if ( !game.user.isGM && (visibility !== \"all\") ) ac = \"\";\n      const isMiss = !attackRoll.isCritical && ((attackRoll.total < ac) || attackRoll.isFumble);\n      return [`\n        <li data-uuid=\"${uuid}\" class=\"target ${isMiss ? \"miss\" : \"hit\"}\">\n          <i class=\"fas ${isMiss ? \"fa-times\" : \"fa-check\"}\"></i>\n          <div class=\"name\">${name}</div>\n          ${(ac !== \"\") ? `\n          <div class=\"ac\">\n            <i class=\"fas fa-shield-halved\"></i>\n            <span>${(ac === null) ? \"&infin;\" : ac}</span>\n          </div>\n          ` : \"\"}\n        </li>\n      `, isMiss];\n    }).sort((a, b) => (a[1] === b[1]) ? 0 : a[1] ? 1 : -1).reduce((str, [li]) => str + li, \"\");\n    evaluation.querySelectorAll(\"li.target\").forEach(target => {\n      target.addEventListener(\"click\", this._onTargetMouseDown.bind(this));\n      target.addEventListener(\"pointerover\", this._onTargetHoverIn.bind(this));\n      target.addEventListener(\"pointerout\", this._onTargetHoverOut.bind(this));\n    });\n    html.querySelector(\".message-content\")?.appendChild(tray);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Coalesce damage rolls into a single breakdown.\n   * @param {DamageRoll[]} rolls  The damage rolls.\n   * @param {HTMLElement} html    The chat card markup.\n   * @protected\n   */\n  _enrichDamageTooltip(rolls, html) {\n    if ( !rolls.length ) return;\n    const aggregatedRolls = CONFIG.DND5E.aggregateDamageDisplay ? aggregateDamageRolls(rolls) : rolls;\n    let { formula, total, breakdown } = aggregatedRolls.reduce((obj, r) => {\n      obj.formula.push(CONFIG.DND5E.aggregateDamageDisplay ? r.formula : ` + ${r.formula}`);\n      obj.total += r.total;\n      obj.breakdown.push(this._simplifyDamageRoll(r));\n      return obj;\n    }, { formula: [], total: 0, breakdown: [] });\n    formula = formula.join(\"\").replace(/^ \\+ /, \"\");\n    html.querySelectorAll(\".dice-roll\").forEach(el => el.remove());\n    const roll = document.createElement(\"div\");\n    roll.classList.add(\"dice-roll\");\n\n    const tooltipContents = breakdown.reduce((str, { type, total, constant, dice }) => {\n      const config = CONFIG.DND5E.damageTypes[type] ?? CONFIG.DND5E.healingTypes[type];\n      return `${str}\n        <section class=\"tooltip-part\">\n          <div class=\"dice\">\n            <ol class=\"dice-rolls\">\n              ${dice.reduce((str, { result, classes }) => `\n                ${str}<li class=\"roll ${classes}\">${result}</li>\n              `, \"\")}\n              ${constant ? `\n              <li class=\"constant\"><span class=\"sign\">${constant < 0 ? \"-\" : \"+\"}</span>${Math.abs(constant)}</li>\n              ` : \"\"}\n            </ol>\n            <div class=\"total\">\n              ${config ? `<img src=\"${config.icon}\" alt=\"${config.label}\">` : \"\"}\n              <span class=\"label\">${config?.label ?? \"\"}</span>\n              <span class=\"value\">${total}</span>\n            </div>\n          </div>\n        </section>\n      `;\n    }, \"\");\n\n    roll.innerHTML = `\n      <div class=\"dice-result\">\n        <div class=\"dice-formula\">${formula}</div>\n        <div class=\"dice-tooltip-collapser\">\n          <div class=\"dice-tooltip\">\n            ${tooltipContents}\n          </div>\n        </div>\n        <h4 class=\"dice-total\">${total}</h4>\n      </div>\n    `;\n    html.querySelector(\".message-content\").appendChild(roll);\n\n    const damageOnSave = this.getFlag(\"dnd5e\", \"roll.damageOnSave\");\n    if ( damageOnSave ) {\n      const p = document.createElement(\"p\");\n      p.classList.add(\"supplement\");\n      p.innerHTML = `<strong>${game.i18n.format(\"DND5E.SAVE.OnSave\")}</strong> ${\n        game.i18n.localize(`DND5E.SAVE.FIELDS.damage.onSave.${damageOnSave.capitalize()}`)\n      }`;\n      html.querySelector(\".chat-card, .message-content\")?.appendChild(p);\n    }\n\n    if ( game.user.isGM ) {\n      const damageApplication = document.createElement(\"damage-application\");\n      damageApplication.classList.add(\"dnd5e2\");\n      damageApplication.damages = aggregateDamageRolls(rolls, { respectProperties: true }).map(roll => ({\n        value: roll.total,\n        type: roll.options.type,\n        properties: new Set(roll.options.properties ?? [])\n      }));\n      html.querySelector(\".message-content\").appendChild(damageApplication);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Simplify damage roll information for use by damage tooltip.\n   * @param {DamageRoll} roll   The damage roll to simplify.\n   * @returns {object}          The object holding simplified damage roll data.\n   * @protected\n   */\n  _simplifyDamageRoll(roll) {\n    const aggregate = { type: roll.options.type, total: roll.total, constant: 0, dice: [] };\n    let hasMultiplication = false;\n    for ( let i = roll.terms.length - 1; i >= 0; ) {\n      const term = roll.terms[i--];\n      if ( !(term instanceof foundry.dice.terms.NumericTerm) && !(term instanceof foundry.dice.terms.DiceTerm) ) {\n        continue;\n      }\n      const value = term.total;\n      if ( term instanceof foundry.dice.terms.DiceTerm ) aggregate.dice.push(...term.results.map(r => ({\n        result: term.getResultLabel(r), classes: term.getResultCSS(r).filterJoin(\" \")\n      })));\n      let multiplier = 1;\n      let operator = roll.terms[i];\n      while ( operator instanceof foundry.dice.terms.OperatorTerm ) {\n        if ( ![\"+\", \"-\"].includes(operator.operator) ) hasMultiplication = true;\n        if ( operator.operator === \"-\" ) multiplier *= -1;\n        operator = roll.terms[--i];\n      }\n      if ( term instanceof foundry.dice.terms.NumericTerm ) aggregate.constant += value * multiplier;\n    }\n    if ( hasMultiplication ) aggregate.constant = null;\n    return aggregate;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Display the enrichment application interface if necessary.\n   * @param {HTMLLIElement} html   The chat card.\n   * @protected\n   */\n  _enrichEnchantmentTooltip(html) {\n    const enchantmentProfile = this.getFlag(\"dnd5e\", \"use.enchantmentProfile\");\n    if ( !enchantmentProfile ) return;\n\n    // Ensure concentration is still being maintained\n    const concentrationId = this.getFlag(\"dnd5e\", \"use.concentrationId\");\n    if ( concentrationId && !this.getAssociatedActor()?.effects.get(concentrationId) ) return;\n\n    // Create the enchantment tray\n    const enchantmentApplication = document.createElement(\"enchantment-application\");\n    enchantmentApplication.classList.add(\"dnd5e2\");\n    const afterElement = html.querySelector(\".card-footer\");\n    if ( afterElement ) afterElement.insertAdjacentElement(\"beforebegin\", enchantmentApplication);\n    else html.querySelector(\".chat-card\")?.append(enchantmentApplication);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Display the effects tray with effects the user can apply.\n   * @param {HTMLLiElement} html  The chat card.\n   * @protected\n   */\n  _enrichUsageEffects(html) {\n    const item = this.getAssociatedItem();\n    let effects;\n    if ( this.getFlag(\"dnd5e\", \"messageType\") === \"usage\" ) {\n      effects = this.getFlag(\"dnd5e\", \"use.effects\")?.map(id => item?.effects.get(id));\n    } else {\n      if ( this.getFlag(\"dnd5e\", \"roll.type\") ) return;\n      effects = item?.effects.filter(e => (e.type !== \"enchantment\")\n        && !item.getFlag(\"dnd5e\", \"riders.effect\")?.includes(e.id));\n    }\n    effects = effects?.filter(e => e && (game.user.isGM || (e.transfer && (this.author.id === game.user.id))));\n    if ( !effects?.length ) return;\n\n    const effectApplication = document.createElement(\"effect-application\");\n    effectApplication.classList.add(\"dnd5e2\");\n    effectApplication.effects = effects;\n    html.querySelector(\".message-content\").appendChild(effectApplication);\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Handlers                              */\n  /* -------------------------------------------- */\n\n  /**\n   * This function is used to hook into the Chat Log context menu to add additional options to each message\n   * These options make it easy to conveniently apply damage to controlled tokens based on the value of a Roll\n   *\n   * @param {HTMLElement} html    The Chat Message being rendered\n   * @param {object[]} options    The Array of Context Menu options\n   *\n   * @returns {object[]}          The extended options Array including new context choices\n   */\n  static addChatMessageContextOptions(html, options) {\n    const canApply = ([li]) => game.messages.get(li.dataset.messageId)?.canApplyDamage;\n    const canTarget = ([li]) => game.messages.get(li.dataset.messageId)?.canSelectTargets;\n    options.push(\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextDamage\"),\n        icon: '<i class=\"fas fa-user-minus\"></i>',\n        condition: canApply,\n        callback: li => game.messages.get(li.data(\"messageId\"))?.applyChatCardDamage(li, 1),\n        group: \"damage\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextHealing\"),\n        icon: '<i class=\"fas fa-user-plus\"></i>',\n        condition: canApply,\n        callback: li => game.messages.get(li.data(\"messageId\"))?.applyChatCardDamage(li, -1),\n        group: \"damage\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextTempHP\"),\n        icon: '<i class=\"fas fa-user-clock\"></i>',\n        condition: canApply,\n        callback: li => game.messages.get(li.data(\"messageId\"))?.applyChatCardTemp(li),\n        group: \"damage\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextDoubleDamage\"),\n        icon: '<i class=\"fas fa-user-injured\"></i>',\n        condition: canApply,\n        callback: li => game.messages.get(li.data(\"messageId\"))?.applyChatCardDamage(li, 2),\n        group: \"damage\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextHalfDamage\"),\n        icon: '<i class=\"fas fa-user-shield\"></i>',\n        condition: canApply,\n        callback: li => game.messages.get(li.data(\"messageId\"))?.applyChatCardDamage(li, 0.5),\n        group: \"damage\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextSelectHit\"),\n        icon: '<i class=\"fas fa-bullseye\"></i>',\n        condition: canTarget,\n        callback: ([li]) => game.messages.get(li.dataset.messageId)?.selectTargets(li, \"hit\"),\n        group: \"attack\"\n      },\n      {\n        name: game.i18n.localize(\"DND5E.ChatContextSelectMiss\"),\n        icon: '<i class=\"fas fa-bullseye\"></i>',\n        condition: canTarget,\n        callback: ([li]) => game.messages.get(li.dataset.messageId)?.selectTargets(li, \"miss\"),\n        group: \"attack\"\n      }\n    );\n    return options;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Add event listeners for chat messages created from activities.\n   * @param {HTMLElement} html  The chat message HTML.\n   */\n  _activateActivityListeners(html) {\n    this.getAssociatedActivity()?.activateChatListeners(this, html);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle target selection and panning.\n   * @param {Event} event   The triggering event.\n   * @returns {Promise}     A promise that resolves once the canvas pan has completed.\n   * @protected\n   */\n  async _onTargetMouseDown(event) {\n    event.stopPropagation();\n    const uuid = event.currentTarget.dataset.uuid;\n    const actor = fromUuidSync(uuid);\n    const token = actor?.token?.object ?? actor?.getActiveTokens()[0];\n    if ( !token || !actor.testUserPermission(game.user, \"OBSERVER\")) return;\n    const releaseOthers = !event.shiftKey;\n    if ( token.controlled ) token.release();\n    else {\n      token.control({ releaseOthers });\n      return canvas.animatePan(token.center);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle hovering over a target in an attack roll message.\n   * @param {Event} event     Initiating hover event.\n   * @protected\n   */\n  _onTargetHoverIn(event) {\n    const uuid = event.currentTarget.dataset.uuid;\n    const actor = fromUuidSync(uuid);\n    const token = actor?.token?.object ?? actor?.getActiveTokens()[0];\n    if ( token && token.isVisible ) {\n      if ( !token.controlled ) token._onHoverIn(event, { hoverOutOthers: true });\n      this._highlighted = token;\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle hovering out of a target in an attack roll message.\n   * @param {Event} event     Initiating hover event.\n   * @protected\n   */\n  _onTargetHoverOut(event) {\n    if ( this._highlighted ) this._highlighted._onHoverOut(event);\n    this._highlighted = null;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply rolled dice damage to the token or tokens which are currently controlled.\n   * This allows for damage to be scaled by a multiplier to account for healing, critical hits, or resistance\n   *\n   * @param {HTMLElement} li      The chat entry which contains the roll data\n   * @param {number} multiplier   A damage multiplier to apply to the rolled damage.\n   * @returns {Promise}\n   */\n  applyChatCardDamage(li, multiplier) {\n    const damages = aggregateDamageRolls(this.rolls, { respectProperties: true }).map(roll => ({\n      value: roll.total,\n      type: roll.options.type,\n      properties: new Set(roll.options.properties ?? [])\n    }));\n    return Promise.all(canvas.tokens.controlled.map(t => {\n      return t.actor?.applyDamage(damages, { multiplier, invertHealing: false, ignore: true });\n    }));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Select the hit or missed targets.\n   * @param {HTMLElement} li    The chat entry which contains the roll data.\n   * @param {string} type       The type of selection ('hit' or 'miss').\n   */\n  selectTargets(li, type) {\n    if ( !canvas?.ready ) return;\n    const lis = li.closest(\"[data-message-id]\").querySelectorAll(`.evaluation li.target.${type}`);\n    const uuids = new Set(Array.from(lis).map(n => n.dataset.uuid));\n    canvas.tokens.releaseAll();\n    uuids.forEach(uuid => {\n      const actor = fromUuidSync(uuid);\n      if ( !actor ) return;\n      const tokens = actor.isToken ? [actor.token?.object] : actor.getActiveTokens();\n      for ( const token of tokens ) {\n        if ( token?.isVisible && actor.testUserPermission(game.user, \"OWNER\") ) {\n          token.control({ releaseOthers: false });\n        }\n      }\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply rolled dice as temporary hit points to the controlled token(s).\n   * @param {HTMLElement} li  The chat entry which contains the roll data\n   * @returns {Promise}\n   */\n  applyChatCardTemp(li) {\n    const total = this.rolls.reduce((acc, roll) => acc + roll.total, 0);\n    return Promise.all(canvas.tokens.controlled.map(t => {\n      return t.actor?.applyTempHP(total);\n    }));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle dice roll expansion.\n   * @param {PointerEvent} event  The triggering event.\n   * @protected\n   */\n  _onClickDiceRoll(event) {\n    event.stopPropagation();\n    const target = event.currentTarget;\n    target.classList.toggle(\"expanded\");\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle rendering a chat popout.\n   * @param {ChatPopout} app  The ChatPopout Application instance.\n   * @param {jQuery} html     The rendered Application HTML.\n   */\n  static onRenderChatPopout(app, [html]) {\n    const close = html.querySelector(\".header-button.close\");\n    close.innerHTML = '<i class=\"fas fa-times\"></i>';\n    close.dataset.tooltip = game.i18n.localize(\"Close\");\n    close.setAttribute(\"aria-label\", close.dataset.tooltip);\n    html.querySelector(\".message-metadata [data-context-menu]\")?.remove();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Wait to apply appropriate element heights until after the chat log has completed its initial batch render.\n   * @param {jQuery} html  The chat log HTML.\n   */\n  static onRenderChatLog([html]) {\n    if ( !game.settings.get(\"dnd5e\", \"autoCollapseItemCards\") ) {\n      requestAnimationFrame(() => {\n        // FIXME: Allow time for transitions to complete. Adding a transitionend listener does not appear to work, so\n        // the transition time is hard-coded for now.\n        setTimeout(() => ui.chat.scrollBottom(), 250);\n      });\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Listen for shift key being pressed to show the chat message \"delete\" icon, or released (or focus lost) to hide it.\n   */\n  static activateListeners() {\n    window.addEventListener(\"keydown\", this.toggleModifiers, { passive: true });\n    window.addEventListener(\"keyup\", this.toggleModifiers, { passive: true });\n    window.addEventListener(\"blur\", () => this.toggleModifiers({ releaseAll: true }), { passive: true });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Toggles attributes on the chatlog based on which modifier keys are being held.\n   * @param {object} [options]\n   * @param {boolean} [options.releaseAll=false]  Force all modifiers to be considered released.\n   */\n  static toggleModifiers({ releaseAll=false }={}) {\n    document.querySelectorAll(\".chat-sidebar > ol\").forEach(chatlog => {\n      for ( const key of Object.values(KeyboardManager.MODIFIER_KEYS) ) {\n        if ( game.keyboard.isModifierActive(key) && !releaseAll ) chatlog.dataset[`modifier${key}`] = \"\";\n        else delete chatlog.dataset[`modifier${key}`];\n      }\n    });\n  }\n\n  /* -------------------------------------------- */\n  /*  Socket Event Handlers                       */\n  /* -------------------------------------------- */\n\n  /** @inheritDoc */\n  _onDelete(options, userId) {\n    super._onDelete(options, userId);\n    dnd5e.registry.messages.untrack(this);\n  }\n\n  /* -------------------------------------------- */\n  /*  Helpers                                     */\n  /* -------------------------------------------- */\n\n  /**\n   * Get the Activity that created this chat card.\n   * @returns {Activity|void}\n   */\n  getAssociatedActivity() {\n    const activity = fromUuidSync(this.getFlag(\"dnd5e\", \"activity.uuid\"));\n    if ( activity ) return activity;\n    return this.getAssociatedItem()?.system.activities?.get(this.getFlag(\"dnd5e\", \"activity.id\"));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the Actor which is the author of a chat card.\n   * @returns {Actor|void}\n   */\n  getAssociatedActor() {\n    if ( this.speaker.scene && this.speaker.token ) {\n      const scene = game.scenes.get(this.speaker.scene);\n      const token = scene?.tokens.get(this.speaker.token);\n      if ( token ) return token.actor;\n    }\n    return game.actors.get(this.speaker.actor);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the item associated with this chat card.\n   * @returns {Item5e|void}\n   */\n  getAssociatedItem() {\n    const item = fromUuidSync(this.getFlag(\"dnd5e\", \"item.uuid\"));\n    if ( item ) return item;\n    const actor = this.getAssociatedActor();\n    if ( !actor ) return;\n    const storedData = this.getFlag(\"dnd5e\", \"item.data\") ?? this.getOriginatingMessage().getFlag(\"dnd5e\", \"item.data\");\n    if ( storedData ) return new Item.implementation(storedData, { parent: actor });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get a list of all chat messages containing rolls that originated from this message.\n   * @param {string} [type]  Type of rolls to get. If empty, all roll types will be fetched.\n   * @returns {ChatMessage5e[]}\n   */\n  getAssociatedRolls(type) {\n    return dnd5e.registry.messages.get(this.id, type);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the original chat message from which this message was created. If no originating message exists,\n   * will return this message.\n   * @type {ChatMessage5e}\n   */\n  getOriginatingMessage() {\n    return game.messages.get(this.getFlag(\"dnd5e\", \"originatingMessage\")) ?? this;\n  }\n\n  /* -------------------------------------------- */\n  /*  Shims                                       */\n  /* -------------------------------------------- */\n\n  /**\n   * Apply shims to maintain access to the old `use` and `itemData` flags.\n   * @internal\n   */\n  _shimFlags() {\n    const flags = foundry.utils.getProperty(this, \"flags.dnd5e\");\n    if ( (flags?.messageType === \"usage\") && flags?.use ) {\n      const message = \"The item data in the `dnd5e.use` flag on `ChatMessage` is now `dnd5e.item.type`, \"\n      + \"`dnd5e.item.id`, and `dnd5e.item.uuid`. Checking for usage can now be done using the \"\n      + \"`dnd5e.messageType` flag.\";\n      Object.defineProperty(flags.use, \"type\", {\n        get() {\n          foundry.utils.logCompatibilityWarning(message, { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true });\n          return flags.item?.type;\n        },\n        configurable: true,\n        enumerable: false\n      });\n      Object.defineProperty(flags.use, \"itemId\", {\n        get() {\n          foundry.utils.logCompatibilityWarning(message, { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true });\n          return flags.item?.id;\n        },\n        configurable: true,\n        enumerable: false\n      });\n      Object.defineProperty(flags.use, \"itemUuid\", {\n        get() {\n          foundry.utils.logCompatibilityWarning(message, { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true });\n          return flags.item?.uuid;\n        },\n        configurable: true,\n        enumerable: false\n      });\n    }\n\n    else if ( (flags?.messageType === \"roll\") && flags?.roll ) {\n      const message = \"The item data in the `dnd5e.roll` flag on `ChatMessage` is now `dnd5e.item.id` and \"\n      + \"`dnd5e.item.uuid`.\";\n      Object.defineProperty(flags.roll, \"itemId\", {\n        get() {\n          foundry.utils.logCompatibilityWarning(message, { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true });\n          return flags.item?.id;\n        },\n        configurable: true,\n        enumerable: false\n      });\n      Object.defineProperty(flags.roll, \"itemUuid\", {\n        get() {\n          foundry.utils.logCompatibilityWarning(message, { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true });\n          return flags.item?.uuid;\n        },\n        configurable: true,\n        enumerable: false\n      });\n    }\n\n    if ( flags?.item?.data ) Object.defineProperty(flags, \"itemData\", {\n      get() {\n        foundry.utils.logCompatibilityWarning(\n          \"The `dnd5e.itemData` flag on `ChatMessage` is now `dnd5e.item.data`.\",\n          { since: \"DnD5e 4.0\", until: \"DnD5e 4.4\", once: true }\n        );\n        return this.item.data;\n      },\n      configurable: true,\n      enumerable: false\n    });\n  }\n}\n","import { LogUtil } from \"./LogUtil.mjs\";\nimport { ActivityUtil } from  \"./ActivityUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { MODULE_SHORT, ROLL_TYPES } from \"../constants/General.mjs\";\nimport ChatMessage5e from \"../../dnd5e/module/documents/chat-message.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { SETTINGS } from \"../constants/Settings.mjs\";\nimport { Main } from \"./Main.mjs\";\n\nexport class RollUtil{\n  // ddbglCls, itemId, actionName, msg, msgConfig\n  static streamlineDDBRoll = async (ddbglCls, itemId, actionName, msg, msgData) => {\n    let selectedActivity = null, castActivity = null;\n    let user = game.user;\n    let item = actionName ? GeneralUtil.findItemFromActor(msgData.speaker.actor, itemId, actionName) : null;\n\n    msg.rolls = msg.rolls.map(rollData => Roll.fromJSON(rollData));\n    LogUtil.log(\"streamlineDDBRoll A\", [ddbglCls, itemId, actionName, msg, msgData]); \n    LogUtil.log(\"TEST REBUILD\", [...msg.rolls]);\n    let config = {}, originalRoll = msg.rolls[0];\n\n    config.message = {\n      flavor: msg.flavor,\n      speaker: msg.speaker,\n      whisper: msg.whisper,\n      user: user,\n      blind: msg.blind || GeneralUtil.isPrivateRoll(msgData.rollMode),\n      rollMode: msgData.rollMode\n    }\n\n    config.dialog = {\n      configure: true\n    }; \n    LogUtil.log(\"streamlineDDBRoll B\", [config]); \n\n    config.roll = {\n      formula: originalRoll.formula,\n      consume: { resources: false, spellSlot: false },\n      user: user,\n      rolls: [],\n      flags: {\n        ...msg.flags, \n        [MODULE_SHORT]: { processed: true },\n        dnd5e: {\n          ...msg.flags.dnd5e,\n          // messageType: \"roll\" \n        },\n        rsr5e: { processed: true, quickRoll: false }\n      }\n    };\n    msg.flags = config.roll.flags;\n    LogUtil.log(\"streamlineDDBRoll C\", [ddbglCls===DDBGL_CLS.toHit.cls, ddbglCls, DDBGL_CLS.toHit.cls, config]); \n\n    try{\n      switch(true){ \n        case ddbglCls===DDBGL_CLS.toHit.cls: // is attack roll\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null; \n          LogUtil.log(\"streamlineDDBRoll D\", [item, ddbglCls, selectedActivity]); \n          await RollUtil.triggerAttack(selectedActivity, msg, msgData, config);\n          \n          break; \n        case ddbglCls===DDBGL_CLS.damage.cls :\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null;\n          await RollUtil.triggerDamage(selectedActivity, msg, msgData, config);\n          \n          break; \n        case ddbglCls===DDBGL_CLS.save.cls \n              || ddbglCls===DDBGL_CLS.check.cls:\n          selectedActivity = null;\n          await RollUtil.triggerAbilityTest(ddbglCls, msg, msgData, config);\n\n          break; \n        case ddbglCls===DDBGL_CLS.heal.cls:\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null;\n          await RollUtil.triggerHeal(selectedActivity, msg, msgData, config);\n\n          break;\n        case ddbglCls===DDBGL_CLS.custom.cls:\n          selectedActivity = null;\n          await RollUtil.triggerCustomRoll(config, msg, actionName, msgData);\n\n          break;\n        default: \n          LogUtil.log(\"streamlineDDBRoll\",[ddbglCls]);\n          // \n      } \n    }catch(e){ \n      LogUtil.error(\"Error intercepting DDB roll\", [e], { ui:false, console:true, permanent:false });\n      ui.notifications.warn(\"Could not intercept the DDB roll\");\n      return false; \n    }\n    return true;\n  } \n\n  /**\n   * If DDB Gamelog message is an attack roll, find the associated activity\n   * and roll the attack to trigger animations and automations\n   * @param {Activity} selectedActivity \n   * @param {ChatMessage5e} msg \n   * @param {object} msgData \n   * @returns \n   */\n  static triggerAttack  = async(selectedActivity, msg, msgData, config) => {\n    let usageResults;\n    if(!selectedActivity){ throw new Error('No associated activity found.') }\n\n    // config specific to attack rolls\n    config.roll.flags.rsr5e = { processed: true  };\n    config.roll.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: config.message.user}); \n    config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.attack }; \n    // config.roll.flags.dnd5e.activity = {\n    //   ...config.roll.flags.dnd5e.activity,\n    //   type: ROLL_TYPES.attack\n    // }\n    // config.message.flags = config.roll.flags;\n\n    LogUtil.log(\"triggerAttack\", [config, selectedActivity]);\n\n    let activityRolls = await selectedActivity.rollAttack(config.roll, config.dialog, { \n      create: false,\n      data: {\n        ...config.message \n      }\n    });\n    if(activityRolls.length < 1){ return; }\n\n    // copy terms from the original roll and recalculate\n    RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n\n    // set the template for the chat message\n    const oldTemplate = selectedActivity.metadata.usage.chatCard;\n    selectedActivity.metadata.usage.chatCard = `modules/${MODULE_SHORT}/templates/ddb-attack-info.hbs`;\n\n    // usageResults.message.user = config.message.user;\n    usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n      create: false,\n      data: { \n        rollMsg: msg.content, \n        rolls: activityRolls,\n        user: config.message.user,\n        speaker: config.message.speaker,\n        flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                    `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`,\n        flags: {\n          rsr5e: config.roll.flags.rsr5e,\n          [MODULE_SHORT]: { \n            processed: true, \n            rollMode: msgData.rollMode,\n            cls: msg.flags[\"ddb-game-log\"].cls,\n            flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                    `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n          }\n        }\n      }\n    });\n    usageResults.message.rolls = activityRolls;\n    usageResults.message.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: config.message.user});\n    usageResults.message.flags = usageResults.message.flags ?? {};\n\n    LogUtil.log(\"USAGE RESULTS\", [usageResults, config.message, selectedActivity.metadata]);\n\n    await ChatMessage5e.create(usageResults.message, {rollMode: msgData.rollMode });\n    // await ChatMessage5e.create(usageResults.message, {rollMode: msgData.rollMode });\n    // await activityRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n\n    // set the template back to normal\n    selectedActivity.metadata.usage.chatCard = oldTemplate;\n  }\n\n  /**\n   * If DDB Gamelog message is a damage roll, find the activity\n   * and roll the appropriate method to trigger associated automations \n   * @param {Activity} selectedActivity \n   * @param {ChatMessage5e} msg \n   * @param {object} msgData \n   * @param {object} config \n   * @returns \n   */\n  static triggerDamage = async(selectedActivity, msg, msgData, config) => {\n    let usageResults;\n    if(!selectedActivity){\n      throw new Error('No associated activity found.');\n    }\n\n    if(!selectedActivity.attack){\n\n      usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n        create: false\n      });\n      await ChatMessage5e.create(usageResults.message, {rollMode: msgData.rollMode }); \n    }\n    LogUtil.log(\"triggerDamage\", [config, selectedActivity])\n\n    let activityRolls = await selectedActivity.rollDamage(config.roll, config.dialog, { \n      create: false, // data: { flags: config.message.flags }   \n    });\n\n    if(activityRolls.length < 1){ return; }\n    RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n    \n    if(!usageResults){\n      usageResults = { message: config.message }\n    }\n\n    usageResults.message.rolls = activityRolls; \n    usageResults.message.flags = usageResults.message.flags ?? {}; \n    usageResults.message.flags.rsr5e = {\n      processed: true,\n      quickRoll: false\n    }\n\n    config.roll.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: config.message.user});\n    config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.damage }; \n    config.message.flags = config.roll.flags;\n    config.message.flags = {\n      ...config.message,\n      dnd5e: config.roll.flags.dnd5e,\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    // await ChatMessage5e.create(config.message, {rollMode: msgData.rollMode }); \n    await activityRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n    \n    if(!selectedActivity.attack){\n      config.message.user.targets.forEach(token => { \n        // if(token.actor.testUserPermission(config.message.user, \"OWNER\")){ \n        token.control({releaseOthers: false})\n        // } \n      }); \n    }\n    setTimeout(() => {\n      GeneralUtil.removeTemplateForItem(selectedActivity.item);\n    }, 3000); \n  }\n  \n  /**\n   * If DDB Gamelog message is an ability test (skill, save, check), trigger the appropriate roll\n   * Note: In theory, we could just post the original roll, but we'll \n   * use the appropriate roll method here for compatibility with other modules\n   * @param {string} testType \n   * @param {ChatMessage5e} msg \n   * @param {object} msgData \n   * @param {object} config \n   * @returns \n   */\n  static triggerAbilityTest = async(testType, msg, msgData, config) => {\n    const ability = GeneralUtil.parseDDBGLAbility(msg.flags[\"ddb-game-log\"].flavor);\n    let testRolls;\n\n    config.roll.flags.dnd5e.roll = {\n      type: testType===DDBGL_CLS.check.cls ? \"ability\" : \"save\"\n    };\n\n    if(ability){\n      config.roll.flags.dnd5e.roll = { \n        type: testType===DDBGL_CLS.check.cls ? ROLL_TYPES.abilityCheck : ROLL_TYPES.abilitySave,\n        ability: ability.abbrev\n      }; \n    }\n    config.message.flags = {\n      // ...config.message,\n      dnd5e: config.roll.flags.dnd5e,\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    // roll attack from activity without creating ChatMessage\n    if(testType===DDBGL_CLS.save.cls){\n      testRolls = await msgData.actor.rollSavingThrow({ ability: ability?.abbrev }, config.dialog, { create: false }); \n    }else if(testType===DDBGL_CLS.check.cls){\n      testRolls = await msgData.actor.rollAbilityCheck({ ability: ability?.abbrev }, config.dialog, { create: false }); \n      LogUtil.log(\"triggerAbilityTest\", [ testRolls, config.message ]); \n    }\n    \n    if(testRolls.length < 1){ return; }\n\n    // copy terms from the original roll and recalculate\n    RollUtil.replaceTerms(testRolls[0], msg.rolls[0]);\n\n    // Create message with the provided roll and msg data\n    await testRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n  }\n\n  /**\n   * If DDB Gamelog message is a heal roll, find the activity\n   * and roll the appropriate method to trigger associated automations \n   * @param {Activity} selectedActivity \n   * @param {object} config \n   * @returns \n   */\n  static triggerHeal = async(selectedActivity, msg, msgData, config) => {\n    let usageResults;\n    if(!selectedActivity){\n      throw new Error('No associated activity found.');\n    }\n\n    usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n      create: false\n    });\n    LogUtil.log(\"ACTIVITY\", [usageResults]);\n    await ChatMessage5e.create(usageResults.message, {rollMode: msgData.rollMode }); \n\n    let activityRolls = await selectedActivity.rollDamage(config.roll, config.dialog, { \n      create: false, data: { flags: config.message.flags } \n    });\n\n    if(activityRolls.length < 1){ return; }\n    RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n  \n    if(!usageResults){\n      usageResults = { message: config.message }\n    }\n\n    usageResults.message.rolls = activityRolls; \n    usageResults.message.flags = usageResults.message.flags ?? {}; \n    usageResults.message.flags.rsr5e = {\n      processed: true,\n      quickRoll: false\n    }\n\n    // config specific to damage rolls\n    config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.healing };\n    config.roll.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: config.message.user});\n    // config.message.flags = config.roll.flags;\n    config.message.flags = {\n      ...config.message,\n      dnd5e: config.roll.flags.dnd5e,\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    await activityRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n  }\n\n  /**\n   * If DDB Gamelog message is a custom roll, just post it\n   * @param {object} config \n   */\n  static triggerCustomRoll = async(config, msg, actionName, msgData) => {\n    // config.message.flags = config.roll.flags;\n    config.message = {\n      ...config.message,\n      dnd5e: {\n        ...config.roll.flags.dnd5e,\n        // roll: { \n        //   ...config.roll.flags.dnd5e.roll,\n        //   type: ROLL_TYPES.custom\n        // }\n      },\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    // Create message with the provided roll and msg data, without modifications\n    await msg.rolls[0].toMessage(config.message, { ...msgData });\n  }\n\n  /**\n   * Recalculate roll without rerolling\n   * @param {Roll} roll \n   * @returns \n   */\n  static resetRollGetters(roll) {\n    roll._total = roll._evaluateTotal();\n    roll.resetFormula();\n    return roll;\n  }\n\n  /**\n   * Modify the result of a roll\n   * @param {Roll} roll // roll whose terms will be replaced\n   * @param {Roll} replacer // Roll to use the terms from \n   * @returns {Roll}\n   */\n  static replaceTerms(roll, replacer){\n    roll.terms = replacer.terms;\n    roll._total = roll._evaluateTotal();\n    roll.resetFormula();\n    return roll;\n  }\n\n  static getDialogSetting(defaultOption, config){\n    const skipConfig = SettingsUtil.get(SETTINGS.skipRollConfig.tag); \n    LogUtil.log(\"getDialogSetting\", [\"skip mode: \" + skipConfig, Main.keysPressed, config]); \n\n    if(config.flags?.[\"ddb-game-log\"] !== undefined){ \n      return false; // ddb gamelog is always skipped\n    }else{\n      switch(skipConfig){ \n        case 1: \n          return Main.keysPressed.indexOf(\"Shift\")==-1 ? false : true; // skip unless shift is pressed\n        default:\n          return defaultOption;\n      }\n    }\n  \n  }\n}\n","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n    static socket;\n\n    /**\n     * Initializes the socket module and registers it with socketlib.\n     * This should be called once during FoundryVTT initialization.\n     * \n     * @param {Function} callbackFunc - Optional callback to execute after registration.\n     */\n    static initialize = (callbackFunc) => {\n        Hooks.once(HOOKS_SOCKET.READY, () => { \n          LogUtil.log(`Attempting to register module...`);\n\n          // Check if socketlib is available before registering the module\n          if (typeof socketlib === \"undefined\") {\n            LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n            return;\n          }\n\n          try { \n            // Register the module with socketlib\n            SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n            // Execute callback function if provided\n            if (callbackFunc) {\n              callbackFunc();\n            }\n\n            LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n          } catch (e) {\n              LogUtil.log(`Problem registering module`, e);\n          }\n        });\n    }\n\n    /**\n     * Registers a callback function that can be called remotely via the socket.\n     * \n     * @param {string} name - The name of the remote function.\n     * @param {Function} func - The function to be executed remotely.\n     */\n    static registerCall = (name, func) => {\n        if (SocketUtil.socket) {\n          SocketUtil.socket.register(name, func);\n          LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n        } else {\n          LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n        }\n    }\n\n    /**\n     * Sends a message via the socket (currently only logs it and calls a callback).\n     * \n     * @param {*} value - The message or data to send.\n     * @param {Function} callback - The callback function to execute after sending.\n     */\n    static sendMessage = (value, callback) => {\n      LogUtil.log(`SocketUtil - sendMessage`, [value]);\n      if (callback) {\n          callback();\n      }\n    }\n\n    /**\n     * Executes a function as the GM.\n     * \n     * @param {Function} handler - The function to execute.\n     * @param {...*} parameters - The parameters to pass to the function.\n     * @returns {Promise} A promise resolving when the function executes.\n     */\n    static execAsGM = async (handler, ...parameters) => {\n      if (!SocketUtil.socket) {\n          LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n          return;\n      }\n      return await SocketUtil.socket.executeAsGM(handler, ...parameters);\n    }\n\n    /**\n     * Executes a function as the specified user.\n     * @param {Function} handler - The function to execute.\n     * @param {String} userId - the id of the user that should execute this function\n     * @param {...*} parameters - The parameters to pass to the function.\n     * @returns {Promise} A promise resolving when the function executes.\n     */\n    static execAsUser = async (handler, userId, ...parameters) => {\n      if (!SocketUtil.socket) {\n          LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n          return;\n      }\n      const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n      LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n      return resp;\n      // SocketUtil.socket.executeAsGM(handler, ...parameters);\n    }\n\n    /**\n     * Executes a function for all connected clients.\n     * \n     * @param {Function} handler - The function to execute.\n     * @param {...*} parameters - The parameters to pass to the function.\n     * @returns {Promise} A promise resolving when the function executes for all clients.\n     */\n    static execForAll = async (handler, ...parameters) => {\n        if (!SocketUtil.socket) {\n            LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n            return;\n        }\n        return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n    }\n}\n","import { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { MODULE_SHORT } from \"../constants/General.mjs\";\n\nimport { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { SETTINGS } from \"../constants/Settings.mjs\";\nimport { ChatUtil } from \"./ChatUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\n\nexport class Main {\n  static keysPressed = [];\n  static isMidiOn = false;\n\n  static init(){\n    Main.setupKeyListeners();\n    Main.registerHooks();\n  }\n\n  static registerHooks(){\n    SocketUtil.initialize(() => {\n      LogUtil.log(\"SocketUtil - initialized with socket\", [SocketUtil.socket]);\n    });\n    Hooks.once(HOOKS_CORE.INIT,()=>{\n      Main.isMidiOn = GeneralUtil.isModuleOn(\"midi-qol\");\n      LogUtil.log(\"Initiating module\", [], true);\n      \n      Main.registerActivityHooks();\n      Main.registerRollHooks();\n      Main.registerChatHooks();\n      Main.registerTemplateHooks(); \n    })\n\n    Hooks.once(HOOKS_CORE.READY, () => { \n      // Check if Foundry has socket support enabled\n      if (!game.socket) {\n        ui.notifications.error(\"⚠️ DDB Bridge: Foundry needs to be restarted to enable socket functionality.\", { permanent: true });\n        LogUtil.error(\"Foundry restart required to enable sockets.\");\n        return;\n      }\n\n      SettingsUtil.registerSettings();\n      SettingsUtil.resetGamelogSettings();\n      Main.registerSocketFunction();\n    });\n\n    Hooks.on(HOOKS_CORE.CLOSE_SETTINGS_CONFIG, () => {\n      SettingsUtil.resetGamelogSettings();\n    })\n  }\n\n  /**\n   * \n   */\n  static registerSocketFunction(){\n    SocketUtil.registerCall('DDBRoll', RollUtil.streamlineDDBRoll);\n  }\n\n  /**\n   * Listen to activity usage hooks\n   */\n  static registerActivityHooks(){\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, onPreUseActivity);\n    Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, onPostUseActivity);\n  }\n\n  /**\n   * Listen to roll hooks\n   */\n  static registerRollHooks(){\n    Hooks.on(HOOKS_DND5E.ROLL_ATTACK_V2, onRollAttack);\n    Hooks.on(HOOKS_DND5E.ROLL_DAMAGE_V2, onRollDamage);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, onPreRoll);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, onPreRollAttack);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, onPreRollDamage);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, onPreRollSavingThrow);\n  }\n\n  /**\n   * Listen to ChatMessage hooks\n   */\n  static registerChatHooks(){\n    Hooks.on(HOOKS_DND5E.RENDER_CHAT_MESSAGE, onRenderChatMessage); \n    Hooks.on(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, onPreCreateChatMessage); \n    Hooks.on(HOOKS_CORE.CREATE_CHAT_MESSAGE, onCreateChatMessage); \n  }\n\n  /**\n   * Listen to template hooks\n   */\n  static registerTemplateHooks(){\n    Hooks.on(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, onRefreshTemplate); \n  }\n\n  static setupKeyListeners(){\n    // Listen to keydown event and store keys\n    window.addEventListener('keydown', (event) => {\n      const keyPressed = event.key;\n      const index = Main.keysPressed.indexOf(keyPressed);\n\n      if(index < 0){\n        Main.keysPressed.push(keyPressed);\n      }\n      // LogUtil.log(\"Keydown\", [Main.keysPressed]);\n    });\n\n    // Listen to keyup event and remove keys\n    window.addEventListener('keyup', (event) => {\n      const keyReleased = event.key;\n      const index = Main.keysPressed.indexOf(keyReleased);\n\n      if(index >= 0){\n        Main.keysPressed.splice(index,1);\n      }\n      // LogUtil.log(\"Keyup\", [Main.keysPressed]); \n    });\n  }\n\n}\n\n/**\n * Before activity.use() is fulfilled\n * @param {object} activity \n * @param {object} usageConfig \n * @param {object} dialogConfig \n * @param {object} msgConfig \n * @returns {Boolean}\n */\nconst onPreUseActivity = async (\n  activity, usageConfig, dialogConfig, msgConfig\n) => {\n\n  // By default, configuration dialog is disabled to speed up roll\n  // Allow configuration if Shift key is pressed\n  // if(Main.keysPressed.indexOf(\"Shift\")==-1){\n  //   dialogConfig.configure = false;\n  // }else{\n  //   dialogConfig.configure = true;\n  // }\n  // dialogConfig.configure = RollUtil.getDialogSetting(dialogConfig.configure, usageConfig);\n\n  LogUtil.log(HOOKS_DND5E.PRE_USE_ACTIVITY, [ usageConfig, dialogConfig, msgConfig, Main.keysPressed ]);\n\n  return true;\n}\n\n/**\n * After activity.use() is fulfilled\n * @param {*} activity \n * @param {*} usageConfig \n * @param {*} result \n * @returns {Boolean}\n */\nconst onPostUseActivity = async(\n  activity, usageConfig, result\n) => {\n  LogUtil.log(HOOKS_DND5E.POST_USE_ACTIVITY, [activity, usageConfig, result]);\n  return true;\n}\n\n/**\n * Right before a message is created. \n * @param {ChatMessage5e} chatMessage \n * @param {GenericObject} msgConfig \n * @param {GenericObject} options\n * @param {String} userId\n * @returns {Boolean}\n */\nconst onPreCreateChatMessage = (chatMessage, msgConfig, options, userId) => {\n  let isDDBGL = false;\n  let actor, ddbglCls, itemId, item, isProcessed=false;\n  \n  const msg = { ...chatMessage };\n  ddbglCls = GeneralUtil.isModuleOn(\"ddb-game-log\") ? chatMessage.getFlag(\"ddb-game-log\",\"cls\")?.toLowerCase() || \"\" : \"\"; // does the flag exist?\n  isProcessed = chatMessage.getFlag(MODULE_SHORT, \"processed\") || false;\n\n  LogUtil.log(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, [ \n    ddbglCls, chatMessage, {...msgConfig}, options\n  ]);\n\n  if(ddbglCls && !isProcessed){ \n    actor = msgConfig.actor || game.actors.get(msgConfig.speaker.actor) || null;\n    itemId =  msgConfig.flags?.[\"ddb-game-log\"]?.[\"itemId\"] || \"\"; \n\n    if(actor){\n      isDDBGL = true; \n      msg.flags = {\n        ...msg.flags,\n        ...msgConfig.flags\n      }\n      if(msg.flags[MODULE_SHORT]){\n        msg.flags[MODULE_SHORT].processed = true;\n        isProcessed = true;\n      }\n      const flavorElem = document.createElement(\"div\");\n      flavorElem.innerHTML = msgConfig.flavor;\n      let actionName = flavorElem?.querySelector(\"span:first-child\")?.innerHTML.replace(\":\",\"\");\n\n      item = actionName ? GeneralUtil.findItemFromActor(msgConfig.speaker.actor, itemId, actionName) : null;\n/*\n      item = itemId ? actor.items.find((it) => {\n        // LogUtil.log(\"item\",[it]); \n        return it.id === itemId; \n      }) : null; \n\n      if(!item){ \n        // match exact name\n        item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n        // if no exact name, look for the name with \"(Legacy)\" tag\n        if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n      } \n*/\n      if(!item && \n        ( ddbglCls === DDBGL_CLS.toHit.cls || \n          ddbglCls === DDBGL_CLS.damage.cls || \n          ddbglCls === DDBGL_CLS.heal.cls) ){ \n        LogUtil.error(\"Could not find an item for the roll\", [ddbglCls, actionName, actor.items]);\n        return true; \n      }else{\n        // destructure the roll before sending via socket\n        msg.rolls = msg.rolls.map(roll => JSON.stringify(roll.toJSON()));\n        const user = GeneralUtil.getUserFromActor(msg.speaker?.actor);\n        const playerMakesRoll = SettingsUtil.get(SETTINGS.ddbRollOwnership.tag) == 2;\n\n        LogUtil.log(\"playerMakesRoll\", [SettingsUtil.get(SETTINGS.ddbRollOwnership.tag)]);\n        if(user && playerMakesRoll){\n          SocketUtil.execAsUser('DDBRoll', user.id, ddbglCls, itemId, actionName, msg, msgConfig); \n        }else{\n          RollUtil.streamlineDDBRoll(ddbglCls, itemId, actionName, msg, msgConfig);\n          //ddbglCls, item, actionName, msg, msgConfig); \n        }\n      }\n    }else{ \n      LogUtil.warn(\"Could not find the actor from DDB Gamelog roll\");\n      return true;\n    }\n  }\n\n  return !isDDBGL || isProcessed;\n}\n\nconst onCreateChatMessage = (chatMessage, options, userId) => {\n  LogUtil.log(HOOKS_CORE.CREATE_CHAT_MESSAGE,[chatMessage, options, userId]);   \n}\n\n/**\n * Triggered when a message is rendered\n * @param {ChatMessage} msg\n * @param {HTMLElement} html\n */\nconst onRenderChatMessage = (chatMessage, html) => { \n  LogUtil.log(HOOKS_DND5E.RENDER_CHAT_MESSAGE,[chatMessage, html]);\n\n  ChatUtil.enrichCard(chatMessage, html);\n}\n\nconst onPreRoll = (rollConfig, dialogConfig, messageConfig) => {\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_V2, [rollConfig, dialogConfig, messageConfig]);\n\n  // dialogConfig.configure = false;\n  dialogConfig.configure = RollUtil.getDialogSetting(dialogConfig.configure, rollConfig);\n\n  return;\n}\n\nconst onPreRollSavingThrow = (rollConfig, dialogConfig, messageConfig) => {\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, [rollConfig, dialogConfig, messageConfig]);\n\n  return;\n}\n\n/**\n * Before the attack roll\n * @param {*} config \n * @param {*} dialog \n * @param {*} message \n * @returns \n */\nconst onPreRollAttack = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, [message, dialogConfig, config]);\n\n  return true;\n}\n\n/**\n * Before the damage roll\n * @param {*} config \n * @param {*} dialog \n * @param {*} message \n * @returns \n */\nconst onPreRollDamage = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, [config, dialogConfig, message, Main.keysPressed]);\n  // By default, configuration dialog is disabled to speed up roll\n  // Allow configuration if Shift key is pressed\n  // if(Main.keysPressed.indexOf(\"Shift\")==-1){\n  //   dialogConfig.configure = false;\n  // }\n  return true;\n}\n\nconst onRollDamage = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.ROLL_DAMAGE_V2, [game]);\n  // canvas.templates.deleteMany(canvas.templates.placeables.map(o =>o.id),{});\n}\n\n/**\n * rollAttackV2 hook callback\n * @param {D20Roll[]} rolls \n * @param {AttackRollData} data\n */\nconst onRollAttack = async(rolls, data) => {\n  LogUtil.log(HOOKS_DND5E.ROLL_ATTACK_V2, [rolls, data]);\n}\n\n/**\n * TEMPLATES\n */\nconst onRefreshTemplate = (template, options) => {\n  // LogUtil.log(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, [template, options]);\n\n  if(!template.isOwner){ return; }\n\n  const templateTargeting = SettingsUtil.get(\"template-auto-target\");\n  let maxDisposition = 3;\n\n  switch(templateTargeting){\n    case 1:\n      maxDisposition = 3; break;\n    case 2: \n      maxDisposition = 0; break;\n    default: \n      return;\n  }\n\n  canvas.tokens.placeables[0]?.setTarget(false, { releaseOthers: true });\n  for(let token of canvas.tokens.placeables){\n    if(token.document.disposition <= maxDisposition && template.shape.contains(token.center.x-template.x,token.center.y-template.y)){\n      token.setTarget(!token.isTargeted, { releaseOthers: false });\n    }\n  }\n}","import \"./styles/chat.css\";\nimport \"./styles/main.css\";\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();"],"names":["DDBGL_CLS","MODULE_ID","MODULE_SHORT","DEBUG_TAG","ROLL_TYPES","CHAR_ABILITIES","HOOKS_CORE","HOOKS_DND5E","HOOKS_SOCKET","SETTING_INPUT","SETTING_SCOPE","SETTINGS","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","_a","module","flavorStr","abilityObj","ddbglStr","ab","mode","item","LogUtil","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","__publicField","selectedTargets","target","_b","targets","token","name","img","system","uuid","statuses","ac","itemId","actionName","it","entry","setting","settingObj","value","settingName","selectedSetting","newValue","settingTag","itemDescriptionsOn","forceSettingsOn","ref","data","bypassSettings","debugSetting","strRef","options","ChatUtil","chatMessage","html","_c","_d","_e","_f","_g","rollType","flavorText","newFlavor","ActivityUtil","ddbglCls","selectedActivity","activities","hasAttack","hasSave","activityByType","type","activity","act","usage","dialog","message","triggerFinalActions","usageConfig","dialogConfig","messageConfig","e","updates","results","effect","deleted","context","rollData","_buildRollData","card","rolls","r","tooltipHtml","OperatorTerm","RollTerm","aggregateDamageRolls","respectProperties","makeHash","properties","types","roll","chunk","chunkTerms","key","newRolls","terms","pushChunk","currentChunk","chunks","negative","isValidType","t","term","flavor","ApplicationV2","HandlebarsApplicationMixin","Application5e","frame","subtitle","icon","newIcon","select","tag","hint","label","element","DiceTerm","_config","_message","_rolls","_RollConfigurationDialog_instances","buildRolls_fn","_RollConfigurationDialog_static","handleFormSubmission_fn","_RollConfigurationDialog","config","__privateAdd","__privateSet","__privateMethod","__privateGet","dice","shouldDisplay","identifyTerm","identifyDice","byDenom","obj","denomination","d","count","partId","l","formData","index","situational","v","action","formConfig","event","resolve","app","RollType","form","RollConfigurationDialog","_DamageRollConfigurationDialog","allowCritical","allTypes","_","damageType","__superGet","DamageRollConfigurationDialog","areKeysPressed","activeModifiers","addModifiers","pressed","n","b","m","NumericTerm","_BasicRoll","process","formula","c","messageData","rollMode","create","cls","msg","minimize","number","die","face","currentModifiers","keep","drop","validModifiers","matchedModifier","modifier","rgx","match","command","amount","f","BasicRoll","FunctionTerm","ParentheticalTerm","StringTerm","DamageRoll","keys","k","nextTerm","prevTerm","newTerm","newFormula","deleteCount","critical","flatBonus","cm","bonus","cb","extra","title","defaultRollMode","defaultCritical","template","Coin","Die","simplifyRollFormula","preserveFlavor","deterministic","err","_simplifyOperatorTerms","temp","multiplicative","determ","paren","termData","_expandParentheticalTerms","poolTerms","diceTerms","mathTerms","numericTerms","_groupTermsByType","_simplifyNumericTerms","_simplifyDiceTerms","simplifiedTerms","acc","prior","ops","simplified","annotated","unannotated","_separateAnnotatedTerms","staticBonus","diceQuantities","curr","isCoin","modifiers","subterms","ChatMessage5e","source","use","args","el","collapse","tray","chatCard","isCreator","button","originatingMessage","displayChallenge","displayAttackResult","makeIcon","d20Roll","d0","total","canCrit","showResult","icons","nameText","avatar","sender","metadata","deleteButton","anchor","isCritical","constant","sign","part","attackRoll","visibility","masteryConfig","p","mastery","evaluation","isMiss","a","str","li","aggregatedRolls","breakdown","tooltipContents","result","classes","damageOnSave","damageApplication","aggregate","hasMultiplication","multiplier","operator","concentrationId","enchantmentApplication","afterElement","effects","id","effectApplication","canApply","canTarget","releaseOthers","damages","lis","uuids","tokens","close","releaseAll","chatlog","userId","scene","storedData","flags","_RollUtil","replacer","defaultOption","skipConfig","Main","msgData","originalRoll","usageResults","activityRolls","oldTemplate","testType","ability","testRolls","RollUtil","_SocketUtil","callbackFunc","func","callback","handler","parameters","resp","SocketUtil","_Main","onPreUseActivity","onPostUseActivity","onRollAttack","onRollDamage","onPreRoll","onPreRollAttack","onPreRollDamage","onPreRollSavingThrow","onRenderChatMessage","onPreCreateChatMessage","onCreateChatMessage","onRefreshTemplate","keyPressed","keyReleased","msgConfig","isDDBGL","isProcessed","flavorElem","playerMakesRoll","rollConfig","templateTargeting","maxDisposition"],"mappings":"mnBAAO,MAAMA,EAAY,CACvB,MAAO,CAAE,KAAM,QAAS,IAAK,SAAU,WAAY,SAAU,SAAU,QAAU,EACjF,OAAQ,CAAE,KAAM,SAAU,IAAK,SAAU,WAAY,SAAU,SAAU,QAAU,EACnF,KAAM,CAAE,KAAM,OAAQ,IAAK,OAAQ,WAAY,OAAQ,SAAU,MAAQ,EACzE,KAAM,CAAE,KAAM,OAAQ,IAAK,OAAQ,WAAY,OAAQ,SAAU,SAAW,EAC5E,MAAO,CAAE,KAAM,QAAS,IAAK,QAAS,WAAY,QAAS,SAAU,SAAW,EAChF,OAAQ,CAAE,KAAM,SAAU,IAAK,OAAQ,WAAY,OAAQ,SAAU,QAAU,EAC/E,KAAM,CAAE,KAAM,OAAQ,IAAK,OAAQ,WAAY,OAAQ,SAAU,MAAQ,CAC3E,ECRaC,EAAY,oBAEZC,EAAe,oBACfC,GAAY,CACvB,2BACA,qCACA,GACF,EAMaC,EAAa,CACxB,aAAc,UACd,YAAa,OACb,OAAQ,SACR,MAAO,QACP,cAAe,gBACf,OAAQ,SACR,UAAW,QACX,QAAS,UACT,QAAS,OACT,OAAQ,OACR,WAAY,QACZ,UAAW,MACb,EAEaC,GAAiB,CAC5B,CAAE,OAAQ,MAAO,KAAM,UAAY,EACnC,CAAE,OAAQ,MAAO,KAAM,WAAa,EACpC,CAAE,OAAQ,MAAO,KAAM,cAAgB,EACvC,CAAE,OAAQ,MAAO,KAAM,cAAgB,EACvC,CAAE,OAAQ,MAAO,KAAM,QAAU,EACjC,CAAE,OAAQ,MAAO,KAAM,UAAY,CACrC,EC9BaC,EAAa,CACxB,aAAc,cACd,KAAM,OACN,MAAO,QACP,wBAAyB,uBACzB,oBAAqB,oBACrB,oBAAqB,oBACrB,yBAA0B,yBAC1B,0BAA2B,0BAC3B,sBAAuB,qBACzB,EAMaC,EAAa,CAEtB,YAAa,kBACb,sBAAuB,2BACvB,sBAAuB,2BACvB,sBAAuB,2BACvB,mBAAoB,wBACpB,0BAA2B,8BAC3B,uBAAwB,6BACxB,mBAAoB,wBACpB,oBAAqB,yBACrB,oBAAqB,yBACrB,oBAAqB,wBACrB,oBAAqB,0BACrB,wBAAyB,4BACzB,qBAAsB,0BACtB,eAAgB,qBAChB,oBAAqB,yBACrB,aAAc,mBACd,kBAAmB,wBACnB,kBAAmB,wBACnB,eAAgB,qBAChB,sBAAuB,2BACvB,mBAAoB,0BACpB,gBAAiB,sBACjB,eAAgB,qBAChB,gBAAiB,sBACjB,gBAAiB,qBACjB,gBAAiB,uBACjB,oBAAqB,yBACrB,iBAAkB,uBAClB,WAAY,kBACZ,gBAAiB,sBAGjB,aAAc,yBACd,oBAAqB,yBACrB,oBAAqB,0BAGrB,cAAe,oBACf,mBAAoB,wBACpB,eAAgB,qBAChB,eAAgB,qBAGhB,qBAAsB,4BACtB,0BAA2B,gCAC3B,0BAA2B,+BAC3B,kBAAmB,wBACnB,yBAA0B,+BAC1B,yBAA0B,8BAC1B,iBAAkB,sBAEtB,EAaaC,GAAe,CAC1B,MAAO,iBACT,EC1FaC,EAAgB,CAC3B,OAAQ,SACR,SAAU,UACZ,EACaC,EAAgB,CAC3B,OAAQ,SACR,MAAO,OACT,EAEaC,EAAW,CACtB,iBAAkB,CAChB,IAAK,qBACL,MAAO,kCACP,KAAM,8NACN,SAAU,QACV,UAAWF,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,GACR,eAAgB,EACjB,EAED,iBAAkB,CAChB,IAAK,qBACL,MAAO,iBACP,KAAM,uQACN,SAAU,OACV,QAAS,CACP,EAAG,cACH,EAAG,2BACJ,EACD,UAAWD,EAAc,OACzB,QAAS,EACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,WAAY,CACV,IAAK,uBACL,MAAO,6BACP,KAAM,8JACN,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,eAAgB,CACd,IAAK,kBACL,MAAO,oCACP,KAAM,2KACN,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAaD,mBAAoB,CAClB,IAAK,uBACL,MAAO,0BACP,KAAM,iIACN,SAAU,OACV,QAAS,CACP,EAAG,uBACH,EAAG,yBACH,EAAG,uBACJ,EACD,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,eAAgB,CACd,IAAK,mBACL,MAAO,2BACP,KAAM,uNACN,SAAU,OACV,QAAS,CACP,EAAG,wBACH,EAAG,+BACJ,EACD,UAAWD,EAAc,OACzB,QAAS,EACT,MAAOC,EAAc,MACrB,OAAQ,EACT,EAED,UAAW,CACT,IAAK,aACL,MAAO,aACP,KAAM,sDACN,SAAU,QACV,UAAWD,EAAc,SACzB,QAAS,GACT,MAAOC,EAAc,OACrB,OAAQ,EACT,CAEH,EC5GO,MAAME,CAAY,CAMvB,OAAO,WAAWC,EAAM,CACtB,IAAIC,EAAK,KAAK,MAAM,KAAKC,GAAIA,EAAG,OAAO,EAAI,EACvCC,EAAeH,EAAK,SAAWC,EAAG,QAEtC,OAAO,IAAI,IAAI,CAAC,GAAGE,CAAY,CAAC,CACjC,CAwDD,OAAO,iBAAiBC,EAAS,CAC/B,MAAMC,EAAUD,EAAS,MAAM,GAAG,EAAE,CAAC,EAGrC,OAFc,KAAK,OAAO,IAAIC,CAAO,CAGtC,CA0BD,OAAO,WAAWC,EAAW,CJtGxB,IAAAC,EIuGH,MAAMC,GAASD,EAAA,KAAK,UAAL,YAAAA,EAAc,IAAID,GACjC,MAAO,GAAAE,GAAA,MAAAA,EAAQ,OAChB,CAQD,OAAO,kBAAkBC,EAAU,CACjC,IAAIC,EAAa,KACjB,MAAMC,EAAW,GAAGF,CAAS,GAE7B,OAAAjB,GAAe,QAAQoB,GAAI,CACtBD,EAAS,YAAa,EAAC,SAASC,EAAG,IAAI,IACxCF,EAAaE,GAEhB,EACMF,CACR,CAMD,OAAO,cAAcG,EAAK,CACxB,OAAOA,IAAS,MAAM,gBAAgB,OAASA,IAAS,MAAM,gBAAgB,OAC/E,CAMD,OAAO,sBAAuBC,EAAM,CAClCC,EAAQ,IAAI,4BAA6B,CAACD,CAAI,CAAC,EAC/C,MAAME,EAA0BC,EAAa,IAAI,iBAAiB,EAElE,GADAF,EAAQ,IAAI,4BAA6B,CAACC,CAAuB,CAAC,EAC/D,CAACA,EAA0B,OAC9B,MAAME,EAAY,OAAO,UAAU,QAAQ,SAAS,OAAOC,GAClDA,EAAG,SAAS,MAAM,MAAM,QAASL,GAAA,YAAAA,EAAM,KAC/C,EAED,OAAO,MAAM,wBAAwB,mBAAoBI,EAAU,IAAIE,GAAGA,EAAE,EAAE,CAAC,CAChF,CAED,OAAO,iBAAiBf,EAAQ,CAC9B,IAAIgB,EACJ,GAAG,CAAChB,EAAU,OAAO,KACrB,MAAMiB,EAAQjB,EAAU,KAAK,OAAO,IAAIA,CAAO,EAAI,KAKnD,OAAAgB,EAHqB,KAAK,MAAM,QAAQ,KAAKE,GACpCA,EAAG,SAAW,IAAQA,EAAG,UAAU,KAAOlB,CAClD,EAGGgB,GAEF,KAAK,MAAM,QAAQ,QAAQE,GAAM,CAC5BA,EAAG,QAAUD,EAAM,mBAAmBC,EAAI,QAAQ,MAAM,0BAA0B,MAAO,CAAE,MAAM,EAAM,CAAA,IACxGF,EAAQE,EAElB,CAAO,EAIHR,EAAQ,IAAI,mBAAoB,CAACV,EAASgB,CAAK,CAAC,EAEzCA,CACR,CAGD,OAAO,KAAKG,EAAQC,EAAU,CAC5B,OAAOD,EAAO,cAAcC,CAAQ,CACrC,CACH,CAjKEC,EAbW3B,EAaJ,mBAAmB,IAAM,CAC9B,GAAI,CAAC,KAAK,KAAM,MAAO,GAGvB,MAAM4B,EAAkB,MAAM,KAAK,KAAK,KAAK,OAAO,EAEpD,OAAAZ,EAAQ,IAAI,mBAAoB,CAC9B,KAAK,KAAK,GACVY,EACAA,EAAgB,OAAOC,GAAUA,EAAO,KAAK,CACnD,CAAK,EACMD,CACX,GAQED,EAjCW3B,EAiCJ,uBAAuB,IAAM,CJrC/B,IAAAQ,EAAAsB,EIsCH,MAAMC,EAAU,IAAI,IACpB,UAAYC,KAAS,KAAK,KAAK,QAAU,CACvC,KAAM,CAAE,KAAAC,CAAM,EAAGD,EACX,CAAE,IAAAE,EAAK,OAAAC,EAAQ,KAAAC,EAAM,SAAAC,CAAQ,EAAKL,EAAM,OAAS,GACvD,GAAKI,EAAO,CACV,MAAME,EAAKD,EAAS,IAAI,YAAY,EAAI,MAAOP,GAAAtB,EAAA2B,EAAO,aAAP,YAAA3B,EAAmB,KAAnB,YAAAsB,EAAuB,MACtEC,EAAQ,IAAIK,EAAM,CAAE,KAAAH,EAAM,IAAAC,EAAK,KAAAE,EAAM,GAAIE,GAAM,IAAI,CAAE,CACtD,CACF,CACD,OAAO,MAAM,KAAKP,EAAQ,OAAQ,CAAA,CACnC,GA8BDJ,EA1EW3B,EA0EJ,oBAAoB,CAACM,EAASiC,EAAQC,IAAe,CAC1D,MAAMjB,EAAQ,KAAK,OAAO,IAAIjB,CAAO,EAErC,GADAU,EAAQ,IAAI,oBAAqB,CAACuB,EAAQC,CAAU,CAAC,EAClD,CAACjB,EAAO,OAAO,KAElB,IAAIR,EAAOwB,EAAShB,EAAM,MAAM,KAAMkB,GAC7BA,EAAG,KAAOF,CAClB,EAAI,KAEL,OAAIxB,IAEFA,EAAOyB,EAAajB,EAAM,MAAM,KAAMkB,GAAOA,EAAG,KAAK,YAAW,IAAOD,EAAW,YAAa,CAAA,EAAI,KAE/FzB,IAAOA,EAAOQ,EAAM,MAAM,KAAMkB,GAAOA,EAAG,KAAK,YAAW,KAAQD,EAAa,aAAa,YAAa,CAAA,IAGxGzB,CACR,GCzFI,MAAMG,CAAa,CAItB,OAAO,kBAAkB,CACvB,SAAS,cAAc,MAAM,EAAE,UAAU,IAAI5B,CAAY,EAKpC,OAAO,QAAQS,CAAQ,EAC/B,QAAQ,MAAM2C,GAAU,CACnC,MAAMC,EAAUD,EAAM,CAAC,EACvB1B,EAAQ,IAAI,kBAAkB,CAAC0B,CAAK,CAAC,EAErC,MAAME,EAAa,CACjB,KAAMD,EAAQ,MACd,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,KAAMA,EAAQ,SACd,MAAOA,EAAQ,MACf,OAAQA,EAAQ,OAChB,eAAgBA,EAAQ,gBAAkB,GAC1C,SAAUE,GAAS3B,EAAa,MAAMyB,EAAQ,IAAKE,CAAK,CACzD,EACEF,EAAQ,UACTC,EAAW,QAAUD,EAAQ,SAG/B,MAAM,KAAK,SAAS,SAAStD,EAAWsD,EAAQ,IAAKC,CAAU,EAG5D1B,EAAa,IAAIyB,EAAQ,GAAG,IAAI,QACjCzB,EAAa,IAAIyB,EAAQ,IAAKA,EAAQ,OAAO,EAE/C3B,EAAQ,IAAI,mBAAmB,CAAC2B,EAAQ,IAAKzB,EAAa,IAAIyB,EAAQ,GAAG,CAAC,CAAC,CACnF,CAAO,EAGEzB,EAAa,IAAInB,EAAS,iBAAiB,GAAG,GAC/C,SAAS,cAAc,MAAM,EAAE,UAAU,IAAI,aAAa,CAG7D,CAQD,OAAO,IAAI+C,EAAavC,EAAWlB,EAAU,CAC3C,GAAG,CAACyD,EAAc,OAAO,KAEzB,IAAIH,EAAU,GAEd,GAAGpC,IAAalB,EACdsD,EAAU,KAAK,SAAS,IAAIpC,EAAYuC,CAAW,MAChD,CAEH,IAAIC,EADW,KAAK,SAAS,QAAQ,IAAI,QAAQ,EACpB,GAAGxC,CAAU,IAAIuC,CAAW,EAAE,EAExDC,IAAkB,SAEnBA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGxC,CAAU,IAAIuC,CAAW,EAAE,GAEnEH,EAAUI,GAAA,YAAAA,EAAiB,MAC3B/B,EAAQ,IAAI,cAAe,CAAC+B,EAAiBJ,CAAO,CAAC,CACtD,CAED,OAAOA,CACR,CAOD,OAAO,IAAIG,EAAaE,EAAUzC,EAAWlB,EAAU,CACrD,GAAG,CAACyD,EAAc,MAAO,GAEzB,IAAIC,EAAkB,KAAK,SAAS,QAAQ,IAAI,QAAQ,EAAE,GAAGxC,CAAU,IAAIuC,CAAW,EAAE,EAEpFC,IAEFA,EADc,KAAK,SAAS,QAAQ,IAAI,OAAO,EACvB,WAAW,GAAGxC,CAAU,IAAIuC,CAAW,EAAE,GAGnE,GAAG,CACEC,GAEDA,EAAgB,OAAO,CAAC,MAAOC,CAAQ,CAAC,EAE1ChC,EAAQ,IAAI,yBAAyB,CAAC8B,EAAaC,CAAe,CAAC,CACpE,MAAQ,CACP/B,EAAQ,IAAI,2BAA2B,CAAC8B,EAAaC,CAAe,CAAC,CACtE,CAED,MAAO,EAER,CAKD,OAAO,MAAME,EAAYJ,EAAM,CAC7B,OAAOI,EAAU,CACf,KAAKlD,EAAS,WAAW,IACvBmB,EAAa,qBAAoB,EACjC,KAGH,CACF,CAED,OAAO,sBAAsB,CAE3B,GAAG,CADelB,EAAY,WAAW,cAAc,EACvC,OAEhB,MAAMkD,EAAqBhC,EAAa,IAAI,mBAAoB,cAAc,EACxEiC,EAAkBjC,EAAa,IAAInB,EAAS,WAAW,GAAG,EAEhEiB,EAAQ,IAAI,uBAAwB,CAACkC,EAAoBC,CAAe,CAAC,EAEtE,CAACD,GAAsBC,GACxBjC,EAAa,IAAI,mBAAoB,GAAM,cAAc,CAE5D,CACL,CCnIO,MAAMF,CAAQ,CAMjB,OAAO,IAAIoC,EAAI,GAAIC,EAAK,CAAE,EAAEC,EAAe,GAAM,CAC/C,GAAG,CACD,MAAMC,EAAerC,EAAa,IAAI,SAAS,UAAU,GAAG,EAE5D,GAAG,EADmBoC,GAAkBC,GACpB,OAEpB,QAAQ,IAAI,GAAGhE,GAAW6D,EAAK,GAAGC,CAAI,CACvC,MAAQ,CACP,QAAQ,IAAI,GAAG9D,GAAW6D,EAAK,GAAGC,CAAI,CACvC,CACF,CAOD,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAG,CAC1B,QAAQ,KAAK,GAAG9D,GAAW6D,EAAK,GAAGC,CAAI,CACxC,CAOD,OAAO,MAAMG,EAAQH,EAAK,CAAA,EAAII,EAAQ,CAAE,GAAG,GAAO,QAAQ,GAAM,UAAU,EAAK,EAAG,CNnC/E,IAAAjD,EMoCIiD,EAAQ,MAEPjD,EAAA,GAAG,gBAAH,MAAAA,EAAkB,MAAMgD,EAAQ,CAAE,SAAU,GAAM,UAAWC,EAAQ,SAAS,IAE/EA,EAAQ,SAAS,QAAQ,MAAM,GAAGlE,GAAWiE,EAAQ,GAAGH,CAAI,CAClE,CACL,CCtCO,MAAMK,EAAS,CAEpB,OAAO,WAAWC,EAAaC,EAAK,CPN/B,IAAApD,EAAAsB,EAAA+B,EAAAC,EAAAC,EAAAC,EAAAC,EOOH,MAAMC,IAAWL,GAAA/B,GAAAtB,EAAAmD,EAAY,QAAZ,YAAAnD,EAAmB,QAAnB,YAAAsB,EAA0B,WAA1B,YAAA+B,EAAoC,SAAQG,GAAAD,GAAAD,EAAAH,EAAY,QAAZ,YAAAG,EAAmB,QAAnB,YAAAC,EAA0B,OAA1B,YAAAC,EAAgC,OAAQ,SACrGJ,EAAK,UAAU,OAAO,wBAAwB,EAC9CA,EAAK,UAAU,IAAI,QAAQ,EAC3BA,EAAK,UAAU,IAAIM,CAAQ,GAoBxBD,EAAAN,EAAY,QAAZ,MAAAM,EAAoB,iBACrBL,EAAK,UAAU,IAAI,OAAO,CAE7B,CAMD,OAAO,iBAAiBO,EAAYR,EAAaO,EAAS,CPvCrD,IAAA1D,EAAAsB,EAAA+B,EAAAC,EOwCH,MAAMvC,EAAQ,KAAK,OAAO,MAAIf,EAAAmD,EAAY,UAAZ,YAAAnD,EAAqB,QAAS,EAAE,GAAK,KAC7DO,GAAOQ,GAAA,YAAAA,EAAO,MAAM,MAAIuC,GAAAD,GAAA/B,EAAA6B,EAAY,QAAZ,YAAA7B,EAAmB,QAAnB,YAAA+B,EAA0B,OAA1B,YAAAC,EAAgC,KAAM,MAAO,KAC3E,IAAIM,EAAYD,GAAc,UAE9B,OAAGD,IAAW1E,EAAW,QACvBwB,EAAQ,IAAI,oBAAqB,CAACO,EAAOR,CAAI,CAAC,EAC3CA,IACDqD,EAAY,4BAA6BrD,GAAA,YAAAA,EAAM,MAC/CqD,EAAYA,EAAY,+CAEnBF,IAAW1E,EAAW,QAC7BwB,EAAQ,IAAI,oBAAqB,CAACO,EAAOR,CAAI,CAAC,EAC3CA,IACDqD,EAAY,4BAA6BrD,GAAA,YAAAA,EAAM,MAC/CqD,EAAYA,EAAY,gDAEnBF,IAAW1E,EAAW,SAC7BwB,EAAQ,IAAI,oBAAqB,CAACO,EAAOR,CAAI,CAAC,EAC3CA,IACDqD,EAAY,6BAA8BrD,GAAA,YAAAA,EAAM,OAAQ,UACxDqD,EAAYA,EAAY,4CAEnBD,EAAW,SAAS,aAAa,GACxCC,EAAY,2BAA6BD,EACzCC,EAAYA,EAAU,QAAQ,cAAc,2CAA2C,GAChFD,EAAW,SAAS,eAAe,GAC1CC,EAAY,2BAA6BD,EACzCC,EAAYA,EAAU,QAAQ,gBAAgB,2CAA2C,GAClFD,EAAW,SAAS,cAAc,GACzCC,EAAY,2BAA6BD,EACzCC,EAAYA,EAAU,QAAQ,eAAe,yCAAyC,IAC9EF,IAAW,QAAUA,IAAW,UAAYC,EAAW,SAAS,OAAO,GAC/EC,EAAY,2BAA6BD,EACzCC,EAAYA,EAAU,QAAQ,QAAQ,2CAA2C,GAC1ErD,EACPqD,EAAY,2BAA2BrD,EAAK,IAAI,UACxCqD,IACRA,EAAY,uCAGPA,CACR,CACH,CC9EO,MAAMC,CAAa,CASxB,OAAO,oBAAoBtD,EAAMuD,EAAS,CRbrC,IAAA9D,EQcH,IAAI+D,EAAmB,KACvB,GAAG,CAACxD,EAAO,OAAOwD,EAElB,MAAMC,GAAahE,EAAAO,EAAK,SAAL,YAAAP,EAAa,WAC1BiE,EAAY1D,EAAK,UACjB2D,EAAU3D,EAAK,QAErBC,EAAQ,IAAI,sBAAuB,CAACwD,EAAY,OAAOA,EAAY,MAAM,QAAQA,CAAU,CAAC,CAAC,EAE7F,MAAMG,EAAkBC,GAAS,CAE/B,MAAMC,EAAWL,EAAW,KAAKM,GACxBA,EAAI,MAAQF,CACpB,EACD,OAAA5D,EAAQ,IAAI,iBAAkB,CAACD,EAAM6D,EAAMJ,EAAW,KAAMK,CAAQ,CAAC,EAC9DA,CACR,EAED,OAAOP,EAAQ,CACb,KAAKlF,EAAU,MAAM,IACnBmF,EAAmBI,EAAevF,EAAU,MAAM,UAAU,EAC5D,MACF,KAAKA,EAAU,OAAO,IACjBqF,EACDF,EAAmBI,EAAevF,EAAU,MAAM,UAAU,EACrDsF,EACPH,EAAmBI,EAAevF,EAAU,KAAK,UAAU,EAE3DmF,EAAmBI,EAAevF,EAAU,OAAO,UAAU,EAE/D,MACF,KAAKA,EAAU,MAAM,IACnBmF,EAAmBI,EAAevF,EAAU,MAAM,UAAU,EAC5D,MACF,KAAKA,EAAU,KAAK,IAClBmF,EAAmBI,EAAevF,EAAU,KAAK,UAAU,EAC3D,MACF,KAAKA,EAAU,KAAK,IAClBmF,EAAmBI,EAAevF,EAAU,KAAK,UAAU,EAC3D,MACF,KAAKA,EAAU,KAAK,IAClBmF,EAAmBI,EAAevF,EAAU,KAAK,UAAU,EAC3D,KAGH,CAED,OAAOmF,GAAoB,MAAM,KAAKC,EAAW,MAAM,EAAE,CAAC,GAAK,IAChE,CAWD,aAAa,SAASK,EAAUE,EAAM,GAAIC,EAAO,CAAE,EAAEC,EAAQ,CAAA,EAAIC,EAAoB,GAAO,CRzEvF,IAAA1E,EAAAsB,EAAA+B,EAAAC,EAAAC,EAAAC,EQ0EH,GAAG,CAACa,EAAS,CACX,GAAG,cAAc,MAAM,oBAAqB,CAAE,SAAU,EAAK,CAAE,EAC/D,MACD,CACD,GAAK,CAACA,EAAS,KAAK,YAAcA,EAAS,KAAK,KAAO,OACvD,GAAK,CAACA,EAAS,KAAK,QAAU,CAC5B,GAAG,cAAc,MAAM,wBAAyB,CAAE,SAAU,EAAI,CAAE,EAClE,MACD,CACD,GAAK,CAACA,EAAS,OAAS,CACtB,GAAG,cAAc,MAAM,yCAA0C,CAAE,SAAU,EAAI,CAAE,EACnF,MACD,CAGD,IAAI9D,EAAO8D,EAAS,KAAK,MAAM,CAAA,EAAI,CAAE,OAAQ,EAAI,CAAE,EAEnD,MAAMM,EAAcN,EAAS,oBAAoBE,CAAK,GAEnDvE,EAAA2E,EAAY,SAAZ,MAAA3E,EAAoB,oBACrBsB,EAAA,GAAG,gBAAH,MAAAA,EAAkB,KAAK,8EAA+E,CAAE,SAAU,EAAK,IAGzH,MAAMsD,EAAe,QAAQ,MAAM,YAAY,CAC7C,UAAW,GACX,iBAAkBP,EAAS,SAAS,MAAM,MAC3C,EAAEG,CAAM,EAEHK,EAAgB,QAAQ,MAAM,YAAY,CAC9C,OAAQ,GACR,KAAM,CACJ,MAAO,CACL,MAAO,CACL,GAAGR,EAAS,aACZ,YAAa,QACb,IAAK,CACH,SAAShB,EAAAgB,EAAS,oBAAT,YAAAhB,EAA4B,IAAIyB,GAAKA,EAAE,GACjD,CACF,EACD,MAAO,CAAE,UAAW,GAAM,UAAW,EAAO,CAC7C,CACF,EACD,eAAgBH,EAAY,cAC7B,EAAEF,CAAO,EAYV,GAAK,MAAM,KAAK,uBAAwBJ,EAAUM,EAAaC,EAAcC,CAAa,IAAM,GAAQ,OAGxG,MAAMR,EAAS,qBAAqBM,EAAaE,EAAetE,CAAI,EACpE8D,EAAW9D,EAAK,OAAO,WAAW,IAAI8D,EAAS,EAAE,EAGjD,MAAMU,EAAU,MAAMV,EAAS,QAAQM,EAAaE,CAAa,EACjE,GAAKE,IAAY,GAAQ,OACzB,MAAMC,EAAU,CAAE,QAAS,CAAA,EAAI,UAAW,CAAA,EAAI,QAAAD,GAG9C,IAAKzB,EAAAqB,EAAY,gBAAZ,MAAArB,EAA2B,MAAQ,CACtC,MAAM2B,EAAS,MAAM1E,EAAK,MAAM,mBAAmB8D,EAAU,CAAE,sBAAuBM,EAAY,OAAO,CAAE,EAO3G,GALKM,IACHD,EAAQ,UAARA,EAAQ,QAAY,IACpBA,EAAQ,QAAQ,KAAKC,CAAM,EAC3B,QAAQ,MAAM,YAAYJ,EAAc,KAAM,kCAAmCI,EAAO,EAAE,IAEvF1B,EAAAoB,EAAY,gBAAZ,MAAApB,EAA2B,IAAM,CACpC,MAAM2B,EAAU,MAAM3E,EAAK,MAAM,iBAAiBoE,EAAY,cAAc,GAAG,EAC/EK,EAAQ,QAAQ,KAAK,GAAGE,CAAO,CAChC,CACF,CAiBD,OAdAL,EAAc,KAAK,OAASA,EAAc,KAAK,OAAS,IAAI,OAAOE,EAAQ,KAAK,EAChFC,EAAQ,QAAU,MAAMnB,EAAa,mBAAmBQ,EAAUQ,CAAa,EAE/ErE,EAAQ,IAAI,gBAAiB,CAAEiE,EAASO,EAAQ,OAAO,CAAC,EACxDA,EAAQ,QAAQ,QAAQxB,EAAAqB,EAAc,QAAd,YAAArB,EAAqB,QAAS,GACtDwB,EAAQ,QAAQ,MAAM,QAAUxF,EAAY,qBAAqB,CAAE,QAASwF,EAAQ,QAAQ,QAAQ,KAAO,CAAA,EAC3GA,EAAQ,QAAQ,MAAQ,CACtB,GAAGA,EAAQ,QAAQ,MACnB,MAAO,CAAE,UAAW,EAAM,CAC3B,EAGD,MAAMX,EAAS,eAAeM,EAAaK,CAAO,EAE7C,MAAM,KAAK,wBAAyBX,EAAUM,EAAaK,CAAO,IAAM,IAG1EN,GAAuBL,EAAS,2BACjCA,EAAS,0BAA0BM,EAAaK,CAAO,EAGlDA,CACR,CAUD,aAAa,mBAAmBX,EAAUI,EAAS,CACjD,IAAIU,EAAU,MAAMd,EAAS,kBAAkBI,CAAO,EAElDW,EAAW,MAAMC,GAAeZ,EAAQ,KAAK,KAAe,EAChEU,EAAU,CACR,GAAGA,EACH,MAAOC,CACR,EAED5E,EAAQ,IAAI,qBAAsB,CAAC6D,EAAS,SAAS,MAAM,SAAUc,CAAO,CAAC,EAE7E,MAAMN,EAAgB,QAAQ,MAAM,YAAY,CAC9C,SAAU,KAAK,SAAS,IAAI,OAAQ,UAAU,EAC9C,KAAM,CACJ,QAAS,MAAM,eAAeR,EAAS,SAAS,MAAM,SAAUc,CAAO,EACvE,QAAS,YAAY,WAAW,CAAE,MAAOd,EAAS,KAAK,MAAO,EAC9D,MAAO,CACL,KAAM,CAAE,UAAW,EAAM,EACzB,MAAO,CAAE,UAAW,EAAM,CAC3B,CACF,CACF,EAAEI,CAAO,EAEV,MAAM,QAAQ,8BAA+BJ,EAAUQ,CAAa,EAEpE,YAAY,cAAcA,EAAc,KAAMA,EAAc,QAAQ,EACpE,MAAMS,EAAOT,EAAc,SAAW,GAAQA,EAAc,KAAO,MAAM,YAAY,OAAOA,EAAc,IAAI,EAE9G,aAAM,QAAQ,+BAAgCR,EAAUiB,CAAI,EAErDA,CACR,CACH,CAEA,MAAMD,GAAiB,MAAME,EAAOlB,IAAa,CAC/C,IAAIe,EAAW,CAAA,EAEf,OAAAA,EAAW,MAAM,QAAQ,IAAIG,EAAM,IAAI,MAAMC,GAAI,CAC/C,MAAMC,EAAc,MAAMD,EAAE,aAC5B,MAAO,CACL,GAAGA,EACH,QAASA,EAAE,QACX,MAAOA,EAAE,MACT,YAAaC,CACd,CACF,CAAA,CAAC,EAGKL,CACT,EC7OM,CAAA,aAAEM,GAAY,SAAEC,EAAQ,EAAK,QAAQ,KAAK,MASjC,SAASC,GAAqBL,EAAO,CAAE,kBAAAM,CAAiB,EAAG,CAAA,EAAI,CAC5E,MAAMC,EAAW,CAAC1B,EAAM2B,EAAW,CAAA,IAAO,CAAC3B,EAAM,GAAIyB,EAAoB,MAAM,KAAKE,CAAU,EAAE,KAAI,EAAK,CAAA,CAAG,EAAE,OAGxGC,EAAQ,IAAI,IAClB,UAAYC,KAAQV,EAAQ,CAC1B,GAAK,CAACU,EAAK,WAAa,MAAM,IAAI,MAAM,yCAAyC,EACjF,UAAYC,KAASC,GAAWF,EAAK,MAAOA,EAAK,QAAQ,IAAI,EAAI,CAC/D,MAAMG,EAAMN,EAASI,EAAM,KAAMD,EAAK,QAAQ,UAAU,EAClDD,EAAM,IAAII,CAAG,GAAIJ,EAAM,IAAII,EAAK,CAAE,KAAMF,EAAM,KAAM,WAAY,IAAI,IAAO,MAAO,CAAE,CAAA,CAAE,EAC5F,MAAMrD,EAAOmD,EAAM,IAAII,CAAG,EAC1BvD,EAAK,MAAM,KAAK,IAAI6C,GAAa,CAAE,SAAUQ,EAAM,SAAW,IAAM,GAAK,CAAA,EAAG,GAAGA,EAAM,KAAK,EACrFD,EAAK,QAAQ,aAAapD,EAAK,WAAaA,EAAK,WAAW,MAAM,IAAI,IAAIoD,EAAK,QAAQ,UAAU,CAAC,EACxG,CACF,CAGD,MAAMI,EAAW,CAAA,EACjB,UAAYjC,KAAQ4B,EAAM,SAAW,CACnC,MAAMC,EAAO,IAAI,OAAO,KAAK,WAC7BA,EAAK,MAAQ7B,EAAK,MAClB6B,EAAK,OAASA,EAAK,iBACnBA,EAAK,WAAa,GAClBA,EAAK,QAAU,CAAE,KAAM7B,EAAK,KAAM,WAAY,MAAM,KAAKA,EAAK,UAAU,CAAC,EACzE6B,EAAK,aAAY,EACjBI,EAAS,KAAKJ,CAAI,CACnB,CAED,OAAOI,CACT,CAYA,SAASF,GAAWG,EAAOlC,EAAM,CTlD1B,IAAApE,ESmDL,MAAMuG,EAAY,IAAM,CACtBC,EAAa,OAAbA,EAAa,KAASpC,GACtBqC,EAAO,KAAKD,CAAY,EACxBA,EAAe,KACfE,EAAW,EACf,EACQC,EAAcC,GAAOA,KAAK,OAAO,MAAM,aAAiBA,KAAK,OAAO,MAAM,aAC1EH,EAAS,CAAA,EACf,IAAID,EACAE,EAAW,GAEf,QAAUG,KAAQP,EAAQ,CAExB,GAAMO,aAAgBnB,IAAiB,CAAC,IAAK,GAAG,EAAE,SAASmB,EAAK,QAAQ,EAAI,CACrEL,GAAeD,IACfM,EAAK,WAAa,MAAMH,EAAW,CAACA,GACzC,QACD,CAGDG,EAAOlB,GAAS,SAAS,QAAQ,MAAM,UAAUkB,EAAK,OAAQ,CAAA,CAAC,EAC/DL,MAAiB,CAAE,MAAO,CAAA,EAAI,SAAAE,EAAU,KAAM,OAC9CF,EAAa,MAAM,KAAKK,CAAI,EAC5B,MAAMC,GAAS9G,EAAA6G,EAAK,SAAL,YAAA7G,EAAa,cAAc,OACrC2G,EAAYG,CAAM,IACrBN,EAAa,OAAbA,EAAa,KAASM,GACtBD,EAAK,QAAQ,OAAS,GAEzB,CAED,OAAKL,GAAeD,IACbE,CACT,CCnFA,KAAM,CAAE,cAAAM,GAAe,2BAAAC,EAA0B,EAAK,QAAQ,aAAa,IAK5D,MAAMC,WAAsBD,GAA2BD,EAAa,CAAE,CAiBnF,IAAI,UAAW,CACb,OAAO,KAAK,KAAK,SAAS,KAAK,QAAQ,OAAO,UAAY,EAAE,CAC7D,CAOD,wBAAwB9D,EAAS,CV/B5B,IAAAjD,EUgCH,MAAM,wBAAwBiD,CAAO,EAChCA,EAAQ,eAAiB,KAAK,WACjCA,EAAQ,SAARA,EAAQ,OAAW,KACnBjD,EAAAiD,EAAQ,QAAO,WAAfjD,EAAe,SAAa,KAAK,UAEpC,CAKD,MAAM,gBAAgBiD,EAAS,CAC7B,MAAMkC,EAAU,MAAM,MAAM,gBAAgBlC,CAAO,EACnD,OAAAkC,EAAQ,OAAS,OAAO,MACxBA,EAAQ,OAAS,CAAE,GAAG,QAAQ,aAAa,OAAQ,GAAG,MAAM,aAAa,QAClEA,CACR,CAKD,MAAM,aAAalC,EAAS,CVpDvB,IAAAjD,EAAAsB,EUqDH,MAAM4F,EAAQ,MAAM,MAAM,aAAajE,CAAO,EAGxCkE,EAAW,SAAS,cAAc,IAAI,EAK5C,GAJAA,EAAS,UAAU,IAAI,iBAAiB,EACxCD,EAAM,cAAc,eAAe,EAAE,sBAAsB,WAAYC,CAAQ,KAGzEnH,EAAAiD,EAAQ,SAAR,YAAAjD,EAAgB,OAAQ,IAAI,SAAS,GAAG,EAAI,CAChD,MAAMoH,EAAOF,EAAM,cAAc,cAAc,EACzCG,EAAU,SAAS,eAAc/F,EAAA2B,EAAQ,OAAO,OAAf,MAAA3B,EAAqB,SAAS,QAAU,aAAe,KAAK,EACnG+F,EAAQ,UAAU,IAAI,aAAa,EACnCA,EAAQ,IAAMpE,EAAQ,OAAO,KAC7BmE,EAAK,YAAYC,CAAO,CACzB,CAED,OAAOH,CACR,CAKD,aAAajE,EAAS,CACpB,MAAM,aAAaA,CAAO,EACrBA,EAAQ,QAAW,aAAcA,EAAQ,SAC5C,KAAK,QAAQ,cAAc,mCAAmC,EAAE,UAAYA,EAAQ,OAAO,SAE9F,CAKD,UAAUkC,EAASlC,EAAS,CAC1B,MAAM,UAAUkC,EAASlC,CAAO,EAGhC,KAAK,QAAQ,iBAAiB,cAAc,EAAE,QAAQqE,GAAU,CACzDA,EAAO,UACZA,EAAO,iBAAiB,MAAM,EAAE,QAAQC,GAAO,CV3F9C,IAAAvH,EU4FCuH,EAAI,UAAU,IAAI,QAAQ,GAC1BvH,EAAAuH,EAAI,cAAc,eAAe,IAAjC,MAAAvH,EAAoC,UAAU,IAAI,SAC1D,CAAO,CACP,CAAK,EAGD,KAAK,QAAQ,iBAAiB,qBAAqB,EAAE,QAAQwH,GAAQ,CACnE,MAAMC,EAAQD,EAAK,cAAc,cAAc,gBAAgB,EACzDC,IACND,EAAK,UAAYA,EAAK,UACtBA,EAAK,QAAQ,QAAUA,EAAK,UAC5BA,EAAK,UAAY,GACjBC,EAAM,sBAAsB,YAAaD,CAAI,EACnD,CAAK,CACF,CAOD,gBAAiB,CACf,MAAMtG,EAAW,uBAAuB,CACtC,QAAS,SAAU,WAAY,SAAU,iBAAkB,eAAgB,gBAC3E,cAAe,aAAc,eAAgB,eAAgB,eAAgB,aAC9E,EAAC,KAAK,IAAI,CAAC,yBACZ,UAAYwG,KAAW,KAAK,QAAQ,iBAAiBxG,CAAQ,EACtDwG,EAAQ,UAAY,WAAaA,EAAQ,SAAW,GACpDA,EAAQ,SAAW,EAE3B,CACH,CApHEvG,EAFmB8F,GAEZ,kBAAkB,CACvB,QAAS,CAAC,QAAQ,EAClB,OAAQ,CACN,SAAU,EACX,CACL,GCVA,KAAM,CAAA,SAAEU,EAAU,EAAG,QAAQ,KAAK,MXF3B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GWgCQ,MAAMC,EAAN,MAAMA,UAAgClB,EAAc,CACjE,YAAYmB,EAAO,CAAE,EAAE3D,EAAQ,CAAE,EAAExB,EAAQ,GAAI,CAC7C,MAAMA,CAAO,EAFFoF,EAAA,KAAAN,GAmEbM,EAAA,KAAAT,GAYAS,EAAA,KAAAR,GAYAQ,EAAA,KAAAP,GAvFEQ,EAAA,KAAKV,EAAUQ,GACfE,EAAA,KAAKT,EAAWpD,GAChB8D,GAAA,KAAKR,EAAAC,IAAL,UAAiB,QAAQ,MAAM,UAAUQ,EAAA,KAAKZ,EAAO,EACtD,CAgDD,WAAW,UAAW,CACpB,OAAO,OAAO,KAAK,SACpB,CAYD,IAAI,QAAS,CACX,OAAOY,EAAA,KAAKZ,EACb,CAUD,IAAI,SAAU,CACZ,OAAOY,EAAA,KAAKX,EACb,CAUD,IAAI,OAAQ,CACV,OAAOW,EAAA,KAAKV,EACb,CAQD,IAAI,UAAW,CACb,OAAO,KAAK,QAAQ,UAAY,KAAK,YAAY,QAClD,CAWD,oBAAqB,CACnB,IAAIW,EAAO,CAAA,EACPC,EAAgB,GAOpB,MAAMC,EAAe9B,GAAQ,CAC3B,GAAOA,aAAgBc,GAKvB,IAHK,CAAC,OAAO,SAASd,EAAK,MAAM,GAAK,CAAC,OAAO,SAASA,EAAK,KAAK,GAG5D,CAAC,KAAK,QAAQ,UAAU,KAAK,cAAc,IAAIA,EAAK,YAAY,EAAI,OAAO6B,EAAgB,GAChG,QAAU7H,EAAI,EAAGA,EAAIgG,EAAK,OAAQhG,IAAM4H,EAAK,KAAK,CAChD,KAAM,gCAAgC5B,EAAK,YAAY,OACvD,MAAOA,EAAK,aACZ,aAAcA,EAAK,YAC3B,CAAO,EACP,EAMU+B,EAAe,CAACtC,EAAM,KAAO,CACjC,UAAYO,KAAQP,EAClBqC,EAAa9B,CAAI,EACZ,SAAUA,GAAO+B,EAAa/B,EAAK,IAAI,CAEpD,EAGI,GADA,KAAK,MAAM,QAAQZ,GAAQ2C,EAAa3C,EAAK,KAAK,CAAC,EAC9CwC,EAAK,OAAS,KAAK,QAAQ,UAAU,KAAK,IAAM,CAEnD,MAAMI,EAAUJ,EAAK,OAAO,CAACK,EAAK,CAAE,KAAA1B,EAAM,aAAA2B,MACxCD,EAAAC,KAAAD,EAAAC,GAAsB,CAAE,KAAA3B,EAAM,MAAO,CAAC,GACtC0B,EAAIC,CAAY,EAAE,QACXD,GACN,CAAE,CAAA,EACLL,EAAO,OAAO,QAAQI,CAAO,EAAE,IAAI,CAAC,CAACG,EAAG,CAAE,KAAA5B,EAAM,MAAA6B,CAAO,CAAA,KAAO,CAAE,KAAA7B,EAAM,MAAO,GAAG6B,CAAK,GAAGD,CAAC,EAAI,EAAC,EACzFP,EAAK,OAAS,KAAK,QAAQ,UAAU,KAAK,MAAMC,EAAgB,GACtE,MACUD,EAAK,SAASC,EAAgB,IACzC,OAAOA,EAAgBD,EAAO,EAC/B,CAKD,MAAM,oBAAoBS,EAAQ/D,EAASlC,EAAS,CAElD,OADAkC,EAAU,MAAM,MAAM,oBAAoB+D,EAAQ/D,EAASlC,CAAO,EACzDiG,EAAM,CACb,IAAK,UACH,OAAO,KAAK,uBAAuB/D,EAASlC,CAAO,EACrD,IAAK,gBACH,OAAO,KAAK,6BAA6BkC,EAASlC,CAAO,EAC3D,IAAK,WACH,OAAO,KAAK,wBAAwBkC,EAASlC,CAAO,EACtD,QACE,OAAOkC,CACV,CACF,CAWD,MAAM,uBAAuBA,EAASlC,EAAS,CAC7C,OAAAkC,EAAQ,QAAU,CAChB,KAAM,CACJ,KAAM,mCACN,MAAO,KAAK,KAAK,SAAS,YAAY,CACvC,CACP,EACWA,CACR,CAWD,MAAM,6BAA6BA,EAASlC,EAAS,CXlPhD,IAAAjD,EWmPH,OAAAmF,EAAQ,OAAS,CAAC,CAChB,MAAO,IAAI,QAAQ,KAAK,OAAO,YAAY,CAAE,MAAO,KAAK,KAAK,SAAS,gBAAgB,CAAC,CAAE,EAC1F,KAAM,WACN,MAAO,KAAK,QAAQ,YAAYnF,EAAA,KAAK,QAAQ,UAAb,YAAAA,EAAsB,UACtD,QAAS,OAAO,QAAQ,OAAO,KAAK,SAAS,EAAE,IAAI,CAAC,CAACqC,EAAO8G,CAAC,KAAO,CAAE,MAAA9G,EAAO,MAAO,KAAK,KAAK,SAAS8G,CAAC,CAAC,EAAG,CAClH,CAAK,EACMhE,CACR,CAWD,MAAM,wBAAwBA,EAASlC,EAAS,CAC9C,OAAAkC,EAAQ,MAAQ,KAAK,MAAM,IAAIc,IAAS,CAAE,KAAAA,CAAM,EAAC,EACjDd,EAAQ,KAAO,KAAK,mBAAkB,GAAM,CAAA,EACrCA,CACR,CA4BD,aAAaiD,EAAQgB,EAAUC,EAAO,CACpCjB,EAAS,QAAQ,MAAM,YAAY,CAAE,MAAO,CAAA,EAAI,KAAM,CAAE,EAAE,QAAS,EAAI,EAAEA,CAAM,EAW/E,MAAM,QAAQ,wBAAyB,KAAMA,EAAQgB,EAAUC,CAAK,EAEpE,MAAMC,EAAcF,GAAA,YAAAA,EAAU,IAAI,QAAQC,CAAK,gBAC/C,OAAKC,GAAgBlB,EAAO,cAAgB,IAC1CA,EAAO,MAAM,KAAK,cAAc,EAChCA,EAAO,KAAK,YAAckB,GAE1BlB,EAAO,MAAM,WAAWmB,GAAKA,IAAM,cAAc,EAG5CnB,CACR,CAUD,eAAeoB,EAAQ,CACrB,OAAO,KAAK,KACb,CAOD,SAAU,CACR,KAAK,cAAc,KAAK,QAAQ,KAAM,IAAI,MAAM,QAAQ,CAAC,CAC1D,CAqBD,cAAcC,EAAYC,EAAO,CAC/B,MAAM,cAAcD,EAAYC,CAAK,EAErC,MAAMN,EAAW,IAAI,iBAAiB,KAAK,OAAO,EAC7CA,EAAS,IAAI,UAAU,IAAI,KAAK,QAAQ,SAAWA,EAAS,IAAI,UAAU,GAC/Eb,GAAA,KAAKR,EAAAC,IAAL,UAAiB,QAAQ,MAAM,UAAUQ,EAAA,KAAKZ,EAAO,EAAGwB,GACxD,KAAK,OAAO,CAAE,MAAO,CAAC,UAAU,CAAG,CAAA,CACpC,CAKD,SAASnG,EAAQ,GAAI,CXlXhB,IAAAjD,GWmXGA,EAAAiD,EAAQ,QAAR,MAAAjD,EAAe,WAAYsI,EAAA,KAAKR,EAAS,GAChD,CAaD,aAAa,UAAUM,EAAO,CAAE,EAAE5D,EAAO,CAAE,EAAEC,EAAQ,GAAI,CACvD,OAAO,IAAI,QAAQkF,GAAW,CAC5B,MAAMC,EAAM,IAAI,KAAKxB,EAAQ3D,EAASD,EAAO,OAAO,EACpDoF,EAAI,iBAAiB,QAAS,IAAMD,EAAQC,EAAI,KAAK,EAAG,CAAE,KAAM,EAAI,CAAE,EACtEA,EAAI,OAAO,CAAE,MAAO,EAAM,CAAA,CAChC,CAAK,CACF,CACH,EArSEhC,EAAA,YAYAC,EAAA,YAYAC,EAAA,YA3FaC,EAAA,YAoPbC,GAAW,SAACI,EAAQgB,EAAU,CXpRzB,IAAApJ,EWqRH,MAAM6J,EAAW,KAAK,SACtBvB,EAAA,KAAKR,IAAS9H,EAAAoI,EAAO,QAAP,YAAApI,EAAc,IAAI,CAACoI,EAAQiB,IACvCQ,EAAS,WAAW,KAAK,aAAazB,EAAQgB,EAAUC,CAAK,EAAG,KAAK,MAAM,KACxE,GACN,EAzPYpB,GAAA,YA8TAC,GAAqB,eAACwB,EAAOI,EAAMV,EAAU,CX9VrD,IAAApJ,EAAAsB,EW+VHgH,EAAA,KAAKR,EAAS,KAAK,gBAAexG,GAAAtB,EAAA0J,EAAM,YAAN,YAAA1J,EAAiB,UAAjB,YAAAsB,EAA0B,MAAM,GAClE,MAAM,KAAK,MAAM,CAAE,MAAO,CAAE,UAAW,EAAM,CAAA,CAAE,CAChD,EAjUY+G,EAAMF,EAANF,IAYb9G,EAZmBgH,EAYZ,kBAAkB,CACvB,QAAS,CAAC,qBAAsB,eAAe,EAC/C,IAAK,OACL,OAAQ,CACN,MAAO,gCACP,KAAM,mBACN,YAAa,EACd,EACD,KAAM,CACJ,QAASI,GAAAJ,EAAwBF,GAAAC,GAClC,EACD,SAAU,CACR,MAAO,GACR,EACD,UAAW,CACT,KAAM,CACJ,IAAK,EACL,cAAe,IAAI,IAAI,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,KAAK,CAAC,CAC/D,CACF,CACL,GAKE/G,EArCmBgH,EAqCZ,QAAQ,CACb,SAAU,CACR,SAAU,gDACX,EACD,cAAe,CACb,SAAU,qDACX,EACD,QAAS,CACP,SAAU,+CACX,CACL,GA/Ce,IAAM4B,GAAN5B,ECvBA,MAAM6B,EAAN,MAAMA,UAAsCD,EAAwB,CAajF,WAAW,UAAW,CACpB,OAAO,OAAO,KAAK,UACpB,CAOD,MAAM,uBAAuB5E,EAASlC,EAAS,CZ/B1C,IAAAjD,EYgCH,MAAMiK,IAAgBjK,EAAA,KAAK,OAAO,WAAZ,YAAAA,EAAsB,SAAU,GACtD,OAAAmF,EAAQ,QAAU,CAChB,SAAU,CACR,KAAM,mCACN,MAAO,KAAK,KAAK,SAAS,mBAAmB,CAC9C,EACD,OAAQ,CACN,KAAM,mCACN,MAAO,KAAK,KAAK,SAAS8E,EAAgB,eAAiB,YAAY,CACxE,CACP,EACUA,GAAgB,OAAO9E,EAAQ,QAAQ,SACtCA,CACR,CAKD,MAAM,wBAAwBA,EAASlC,EAAS,CAC9CkC,EAAU,MAAM,MAAM,wBAAwBA,EAASlC,CAAO,EAC9D,MAAMiH,EAAW,QAAQ,MAAM,YAAY,OAAO,MAAM,YAAa,OAAO,MAAM,aAAc,CAAE,QAAS,EAAO,CAAA,EAClH,OAAA/E,EAAQ,MAAQA,EAAQ,MAAM,IAAI,CAAC,CAAE,KAAAc,KAAY,CZrD9C,IAAAjG,EAAAsB,EYqD8C,OAC/C,KAAA2E,EACA,aAAciE,EAASjE,EAAK,QAAQ,IAAI,GAAKiE,GAASlK,EAAAiG,EAAK,QAAQ,QAAb,YAAAjG,EAAqB,EAAE,EAC7E,cAAasB,EAAA2E,EAAK,QAAQ,QAAb,YAAA3E,EAAoB,QAAS,EAAI,OAAO,QAAQ4I,CAAQ,EAAE,IAAI,CAAC,CAAC9D,EAAKgC,CAAM,IAAM,CZxD7F,IAAApI,EYyDC,OAAMA,EAAAiG,EAAK,QAAQ,QAAb,MAAAjG,EAAoB,SAASoG,GAC5B,CAAE,MAAOA,EAAK,MAAOgC,EAAO,KAAK,EADS,IAElD,CAAA,EAAE,OAAO+B,GAAKA,CAAC,EAAI,IACrB,EAAC,EACKhF,CACR,CAOD,aAAaiD,EAAQgB,EAAUC,EAAO,CACpCjB,EAAS,MAAM,aAAaA,EAAQgB,EAAUC,CAAK,EACnD,MAAMe,EAAahB,GAAA,YAAAA,EAAU,IAAI,QAAQC,CAAK,eAC9C,OAAKe,IAAahC,EAAO,QAAQ,KAAOgC,GACjChC,CACR,CAKD,eAAeoB,EAAQ,CACrB,OAAO,KAAK,MAAM,IAAIvD,IACpBA,EAAK,QAAQ,WAAauD,IAAW,WACrCvD,EAAK,gBAAgB,CAAE,SAAU,KAAK,OAAO,QAAQ,CAAE,EAChDA,EACR,CACF,CACH,EA1EE9E,EAHmB6I,EAGZ,QAAQ,CACb,GAAGK,GAAAL,IAAM,SACT,SAAU,CACR,SAAU,kDACX,CACL,GARe,IAAMM,GAANN,ECsOR,SAASO,GAAeb,EAAOF,EAAQ,CAC5C,GAAK,CAACE,EAAQ,MAAO,GACrB,MAAMc,EAAkB,CAAA,EAClBC,EAAe,CAACrE,EAAKsE,IAAY,CACrCF,EAAgBpE,CAAG,EAAIsE,EACvB,gBAAgB,eAAetE,CAAG,EAAE,QAAQuE,GAAKH,EAAgBG,CAAC,EAAID,CAAO,CACjF,EACE,OAAAD,EAAa,gBAAgB,cAAc,QAASf,EAAM,SAAWA,EAAM,OAAO,EAClFe,EAAa,gBAAgB,cAAc,MAAOf,EAAM,QAAQ,EAChEe,EAAa,gBAAgB,cAAc,IAAKf,EAAM,MAAM,EACrD,KAAK,YAAY,IAAI,QAASF,CAAM,EAAE,KAAKoB,GAC3C,KAAK,SAAS,SAAS,IAAIA,EAAE,GAAG,GAAKA,EAAE,UAAU,MAAMC,GAAKL,EAAgBK,CAAC,CAAC,EAAW,GACzFD,EAAE,UAAU,OAAgB,GAC1BJ,EAAgBI,EAAE,GAAG,CAC7B,CACH,CC5PA,KAAM,CAAA,SAAEjD,GAAQ,YAAEmD,EAAW,EAAK,QAAQ,KAAK,MAuD1BC,EAAN,MAAMA,UAAkB,IAAK,CAkB1C,OAAO,WAAW3C,EAAQ4C,EAAS,CACjC,MAAMC,GAAW7C,EAAO,OAAS,CAAA,GAAI,KAAK,KAAK,EAC/C,OAAO,IAAI,KAAK6C,EAAS7C,EAAO,KAAMA,EAAO,OAAO,CACrD,CAWD,aAAa,MAAMA,EAAO,CAAE,EAAE5D,EAAO,CAAE,EAAEC,EAAQ,GAAI,CdzFhD,IAAAzE,Ec0FH,KAAK,iBAAiBoI,EAAQ5D,EAAQC,CAAO,EAE7C,IAAIc,EACCf,EAAO,YAAc,GAAQe,IAAQvF,EAAAoI,EAAO,QAAP,YAAApI,EAAc,IAAIkL,GAAK,KAAK,WAAWA,EAAG9C,CAAM,KAAM,CAAA,EAG9F7C,EAAQ,MADYf,EAAO,kBAAoB,KAAK,4BAC1B,UAAU4D,EAAQ5D,EAAQC,CAAO,EAG7D,UAAYwB,KAAQV,EAAQ,MAAMU,EAAK,SAAQ,EAE/C,OAAKV,GAAA,MAAAA,EAAO,QAAWd,EAAQ,SAAW,IACxC,MAAM,KAAK,UAAUc,EAAOd,EAAQ,KAAM,CAAE,SAAUA,EAAQ,QAAQ,CAAE,EAGnEc,CACR,CAUD,OAAO,iBAAiB6C,EAAQ5D,EAAQC,EAAS,CAC/CD,EAAO,YAAPA,EAAO,UAAc,GACtB,CAUD,IAAI,WAAY,CACd,GAAM,KAAK,WACX,OAAM,OAAO,UAAU,KAAK,QAAQ,MAAM,EACnC,KAAK,MAAQ,KAAK,QAAQ,OADoB,EAEtD,CAQD,IAAI,WAAY,CACd,GAAM,KAAK,WACX,OAAM,OAAO,UAAU,KAAK,QAAQ,MAAM,EACnC,KAAK,OAAS,KAAK,QAAQ,OADmB,EAEtD,CAmBD,aAAa,UAAUe,EAAO4F,EAAY,CAAE,EAAE,CAAE,SAAAC,EAAU,OAAAC,EAAO,EAAM,EAAC,GAAI,CAC1E,UAAYpF,KAAQV,EACZU,EAAK,YAAa,MAAMA,EAAK,SAAS,CAAE,iBAAkBmF,IAAa,MAAM,gBAAgB,KAAO,CAAA,EAC1GA,MAAanF,EAAK,QAAQ,UAI5BkF,EAAc,QAAQ,MAAM,YAAY,CAAE,MAAO,OAAO,OAAO,MAAQA,CAAW,EAClFA,EAAY,MAAQ5F,EAGpB,MAAM+F,EAAM,iBAAiB,aAAa,EACpCC,EAAM,IAAID,EAAIH,CAAW,EAG/B,OAAKE,EAAgBC,EAAI,OAAOC,EAAI,SAAU,EAAE,CAAE,SAAAH,CAAQ,CAAE,GAErDA,GAAWG,EAAI,cAAcH,CAAQ,EACnCG,EAAI,WAEd,CAOD,MAAM,SAAStI,EAAQ,GAAI,CACzB,YAAK,sBAAsBA,CAAO,EAC3B,MAAM,SAASA,CAAO,CAC9B,CAKD,aAAaA,EAAQ,GAAI,CACvB,YAAK,sBAAsBA,CAAO,EAC3B,MAAM,aAAaA,CAAO,CAClC,CAWD,sBAAsBA,EAAQ,GAAI,CAC3B,KAAK,YAAe,CAACA,EAAQ,UAAY,CAACA,EAAQ,WACvD,KAAK,MAAQ,KAAK,MAAM,IAAI4D,GAAQ,CAClC,GAAMA,aAAgBc,IAAad,EAAK,UAAU,OAAS,CACzD,MAAM2E,EAAW,CAACvI,EAAQ,SACpBwI,EAAS,KAAK,YAAY,iBAAiB5E,EAAM,CAAE,SAAA2E,CAAQ,CAAE,EACnE,GAAK,OAAO,SAASC,CAAM,EAAI,OAAO,IAAIX,GAAY,CAAE,OAAAW,EAAQ,QAAS5E,EAAK,OAAS,CAAA,CACxF,CACD,OAAOA,CACb,CAAK,EACF,CAaD,OAAO,iBAAiB6E,EAAK,CAAE,SAAAF,EAAS,EAAK,EAAG,CAAA,EAAI,CAClD,IAAIG,EAAOH,EAAW,EAAIE,EAAI,MAC1BD,EAASC,EAAI,OACjB,MAAME,EAAmB,QAAQ,MAAM,UAAUF,EAAI,SAAS,EACxDG,EAAO,IAAI,IAAI,CAAC,IAAK,KAAM,IAAI,CAAC,EAChCC,EAAO,IAAI,IAAI,CAAC,IAAK,KAAM,IAAI,CAAC,EAChCC,EAAiB,IAAI,IAAI,CAAC,GAAGF,EAAM,GAAGC,EAAM,MAAO,KAAK,CAAC,EAC/D,IAAIE,EAAkB,GAEtB,UAAYC,KAAYL,EAAmB,CACzC,MAAMM,EAAM,+BACNC,EAAQF,EAAS,MAAMC,CAAG,EAChC,GAAK,CAACC,EAAQ,SACTA,EAAM,CAAC,EAAE,OAASA,EAAM,MAAM,QAASP,EAAiB,KAAKO,EAAM,MAAM,MAAMA,EAAM,CAAC,EAAE,MAAM,CAAC,EACpG,GAAI,EAAGC,EAAS/J,CAAK,EAAI8J,EAEzB,GADAC,EAAUA,EAAQ,cACb,CAACL,EAAe,IAAIK,CAAO,EAAI,SAEpCJ,EAAkB,GAClB,MAAMK,EAAS,SAAShK,CAAK,IAAM+J,IAAY,OAASA,IAAY,MAAQ,GAAK,GACjF,GAAKC,EAAS,EAAI,CAChB,GAAMD,IAAY,OAASZ,GAAcY,IAAY,OAAS,CAACZ,EAAY,SAChEY,IAAY,OAASA,IAAY,MAAST,EAAO,KAAK,IAAID,EAAI,MAAOW,CAAM,EAC5ER,EAAK,IAAIO,CAAO,EAAIX,EAAS,KAAK,IAAIA,EAAQY,CAAM,EACpDP,EAAK,IAAIM,CAAO,IAAIX,EAAS,KAAK,IAAI,EAAGA,EAASY,CAAM,EACnE,CACF,CAED,OAAOL,EAAkBL,EAAOF,EAAS,IAC1C,CASD,UAAW,CdjRN,IAAAzL,EAAAsB,EckRH,UAAYoK,KAAO,KAAK,KAAO,CAC7B,MAAMf,EAAIe,EAAI,QACRf,aAAaI,GAAcJ,EAAE,kBAAkBe,EAAI,QAAUf,EAAE,aAAc,EAAC,OACpF,MAAM2B,EAAIZ,EAAI,OACRY,aAAavB,GAAcuB,EAAE,kBAAkBZ,EAAI,OAASY,EAAE,aAAc,EAAC,QAG9EhL,GAAAtB,EAAAsM,EAAE,QAAF,YAAAtM,EAAU,KAAV,MAAAsB,EAAc,SAASoK,EAAI,QAAQ,OAASY,EAAE,MAAM,CAAC,EAAE,OAC7D,CAED,KAAK,aAAY,CAClB,CACH,EA/NEnL,EANmB4J,EAMZ,6BAA6BhB,IANvB,IAAMwC,GAANxB,ECrDf,KAAM,UAAEpD,GAAQ,aAAE6E,GAAc1B,YAAAA,gBAAapF,GAAY,kBAAE+G,GAAmB,WAAAC,IAAe,QAAQ,KAAK,MAiD3F,MAAMC,WAAmBJ,EAAU,CAChD,YAAYtB,EAASpI,EAAMI,EAAS,CAClC,MAAMgI,EAASpI,EAAMI,CAAO,EACtB,KAAK,QAAQ,cAAe,KAAK,kBAAiB,EAClD,KAAK,QAAQ,YAAa,KAAK,gBAAe,CACrD,CAYD,OAAO,WAAWmF,EAAQ4C,EAAS,CACjC,MAAM/E,EAAO,MAAM,WAAWmC,EAAQ4C,CAAO,EAC7C,OAAKA,EAAQ,UAAW/E,EAAK,gBAAgB,CAAE,SAAU+E,EAAQ,QAAQ,CAAE,EACpE/E,CACR,CAKD,aAAa,MAAMmC,EAAS,CAAE,EAAE5D,EAAS,CAAE,EAAEC,EAAU,GAAI,Cf/EtD,IAAAzE,EAAAsB,EegFH,OAAA8G,EAAO,WAAPA,EAAO,SAAa,KACpBpI,EAAAoI,EAAO,UAAS,kBAAhBpI,EAAgB,gBAAoB,KAAK,SAAS,IAAI,QAAS,yBAAyB,IACxFsB,EAAA8G,EAAO,UAAS,mBAAhB9G,EAAgB,iBAAqB,KAAK,SAAS,IAAI,QAAS,uBAAuB,GAChF,MAAM,MAAM8G,EAAQ5D,EAAQC,CAAO,CAC3C,CAKD,OAAO,iBAAiB2D,EAAQ5D,EAAQC,EAAS,CfzF5C,IAAAzE,Ee0FH,MAAM4M,EAAO,CACX,OAAQrC,GAAenC,EAAO,MAAO,kBAAkB,GAClDmC,GAAenC,EAAO,MAAO,wBAAwB,EAC1D,SAAUmC,GAAenC,EAAO,MAAO,qBAAqB,CAClE,EAGI5D,EAAO,YAAPA,EAAO,UAAc,OAAO,OAAOoI,CAAI,EAAE,MAAMC,GAAK,CAACA,CAAC,GAGtD,UAAY5G,KAAQmC,EAAO,MACzBnC,EAAK,UAALA,EAAK,QAAY,KACjBjG,EAAAiG,EAAK,SAAQ,aAAbjG,EAAa,WAAe4M,EAAK,SAEpC,CAUD,IAAI,YAAa,CACf,OAAO,KAAK,QAAQ,aAAe,EACpC,CAUD,mBAAoB,CAClB,OAAU,CAAC/L,EAAGgG,CAAI,IAAK,KAAK,MAAM,UAAY,CAC5C,MAAMiG,EAAW,KAAK,MAAMjM,EAAI,CAAC,EAC3BkM,EAAW,KAAK,MAAMlM,EAAI,CAAC,EAGjC,GAAMgG,aAAgB6F,IAAe,QAAQ,KAAK7F,EAAK,IAAI,GAAK,EAAEkG,aAAoBN,IAAqB,CACzG,MAAMxB,EAAU,IAAIpE,EAAK,IAAI,GACvBmG,EAAU,IAAI,KAAK/B,CAAO,EAAE,MAAM,CAAC,EACzC,KAAK,MAAM,OAAOpK,EAAG,EAAGmM,CAAO,EAC/BnG,EAAOmG,CACR,SAGUnG,aAAgB4F,IAAuBM,aAAoBL,IACjEK,EAAS,KAAK,MAAM,WAAW,GAClC,GAAKlG,EAAK,gBAAkB,CAC1B,IAAIoG,EAAa,GAAGF,EAAS,IAAI,GAAGlG,EAAK,SAAQ,EAAG,KAAK,GACrDqG,EAAc,EAGbJ,aAAoBJ,KACvBO,GAAcH,EAAS,KACvBI,GAAe,GAGjB,MAAMF,EAAW,IAAI,KAAKC,CAAU,EAAG,MAAM,CAAC,EAC9C,KAAK,MAAM,OAAOpM,EAAI,EAAGqM,EAAaF,CAAO,EAC7CnG,EAAOmG,CACR,WAIQnG,aAAgB4F,IAAqB5F,aAAgB2F,KAAkBM,aAAoBJ,IACjGI,EAAS,KAAK,MAAM,WAAW,GAC7BjG,EAAK,gBAAkB,CAC1B,MAAMoG,EAAa,GAAGpG,EAAK,SAAQ,EAAG,KAAK,GAAGiG,EAAS,IAAI,GACrDE,EAAW,IAAI,KAAKC,CAAU,EAAG,MAAM,CAAC,EAC9C,KAAK,MAAM,OAAOpM,EAAG,EAAGmM,CAAO,EAC/BnG,EAAOmG,CACR,CAEJ,CAGD,KAAK,aAAY,EAGjB,KAAK,QAAQ,aAAe,EAC7B,CAWD,gBAAgB,CAAE,SAAAG,EAAS,CAAE,CAAA,EAAG,CAAA,EAAI,Cf1L/B,IAAAnN,Ee2LH,QAAQ,MAAM,YAAYmN,EAAU,KAAK,QAAQ,UAAY,CAAA,CAAE,EAE/D,MAAMC,EAAY,IAAI,IACtB,OAAU,CAACvM,EAAGgG,CAAI,IAAK,KAAK,MAAM,UAEhC,GAAKA,aAAgBc,GAAW,CAC9B,GAAKd,EAAK,mBAAmB,KAAO,CAElC,GAAK,CAACA,EAAK,QAAQ,gBAAkB,SAC/BA,EAAK,QAAQ,YAAaA,EAAK,QAAQ,cAC9C,CAGD,GAFAA,EAAK,QAAQ,WAAaA,EAAK,QAAQ,YAAcA,EAAK,OAC1DA,EAAK,OAASA,EAAK,QAAQ,WACtB,KAAK,WAAa,CACrB,IAAIwG,EAAKF,EAAS,YAAc,EAGhC,GAAKA,EAAS,iBAAmB,CAC/B,MAAMG,EAAQ,KAAK,OAAOzG,EAAK,OAAO,EAAE,aAAa,CAAE,SAAU,EAAM,CAAA,EAAE,MACzE,GAAKyG,EAAQ,EAAI,CACf,MAAMxG,IAAS9G,EAAA6G,EAAK,SAAL,YAAA7G,EAAa,cAAc,SAAU,KAAK,KAAK,SAAS,wBAAwB,EAC/FoN,EAAU,IAAItG,GAASsG,EAAU,IAAItG,CAAM,GAAK,GAAKwG,CAAK,CAC3D,CACDD,EAAK,KAAK,IAAI,EAAGA,EAAG,CAAC,CACtB,CAGD,IAAIE,EAAMJ,EAAS,WAActM,IAAM,EAAMsM,EAAS,UAAY,EAClEtG,EAAK,MAAMwG,EAAIE,CAAE,EACjB1G,EAAK,QAAQ,SAAW,EACzB,CACF,MAGSsG,EAAS,iBAAoBtG,aAAgBiE,KACrDjE,EAAK,QAAQ,WAAaA,EAAK,QAAQ,YAAcA,EAAK,OAC1DA,EAAK,OAASA,EAAK,QAAQ,WACtB,KAAK,aACRA,EAAK,QAAWsG,EAAS,YAAc,EACvCtG,EAAK,QAAQ,SAAW,KAM9B,GAAKsG,EAAS,kBAAoBC,EAAU,KAC1C,SAAY,CAAChJ,EAAMqH,CAAM,IAAK2B,EAAU,QAAO,EAC7C,KAAK,MAAM,KAAK,IAAI1H,GAAa,CAAC,SAAU,GAAG,CAAC,CAAC,EACjD,KAAK,MAAM,KAAK,IAAIoF,GAAY,CAAC,OAAAW,EAAQ,QAAS,CAAC,OAAQrH,CAAI,CAAC,CAAC,CAAC,EAKtE,GAAK,KAAK,YAAc+I,EAAS,YAAc,CAC7C,MAAMK,EAAQ,IAAI,KAAKL,EAAS,YAAa,KAAK,IAAI,EAC/CK,EAAM,MAAM,CAAC,YAAa9H,IAAgB,KAAK,MAAM,KAAK,IAAIA,GAAa,CAAC,SAAU,GAAG,CAAC,CAAC,EAClG,KAAK,MAAM,KAAK,GAAG8H,EAAM,KAAK,CAC/B,CAGD,KAAK,aAAY,EAGjB,KAAK,QAAQ,WAAa,EAC3B,CAkBD,MAAM,gBAAgB3K,EAAK,GAAII,EAAQ,CAAA,EAAI,CAEzC,OADc,MAAM,KAAK,YAAY,gBAAgB,CAAC,IAAI,EAAGJ,EAAMI,CAAO,GAC7D,CAAC,GAAK,IACpB,CAiBD,aAAa,gBAAgBsC,EAAO,CAClC,MAAAkI,EAAO,gBAAAC,EAAiB,gBAAAC,EAAgB,GAAO,SAAAC,EAAU,cAAA3D,EAAc,EAAI,EAAE,CAAA,EAAIhH,EAAQ,GAAI,CAC7F,eAAQ,MAAM,wBACZ,yGACA,CAAE,MAAO,YAAa,MAAO,WAAa,CAChD,EAEW,MADa,KAAK,2BACA,UACvB,CAAE,SAAU,CAAE,MAAOgH,CAAe,CAAA,EAAI,CAAE,QAAS,CAAE,MAAAwD,CAAO,CAAA,EAAI,CAAE,SAAUC,CAAiB,CACnG,CACG,CACH,CA7OEvM,EAVmBwL,GAUZ,6BAA6BrC,IC/DtC,KAAM,CACJ,KAAAuD,GAAM,SAAAlG,GAAU,IAAAmG,GAAK,aAAAtB,GAAc,YAAA1B,GAAa,aAAApF,EAAc,kBAAA+G,GAAmB,SAAA9G,EACnF,EAAI,QAAQ,KAAK,MAYF,SAASoI,GAAoB9C,EAAS,CAAE,eAAA+C,EAAe,GAAO,cAAAC,EAAc,EAAO,EAAG,GAAI,ChBdlG,IAAAjO,EgBgBL,IAAIiG,EACJ,GAAI,CAAEA,EAAO,IAAI,KAAKgF,CAAO,CAAI,OAC3BiD,EAAK,CAAE,QAAQ,KAAK,+BAA+BjD,CAAO,MAAMiD,CAAG,EAAE,CAAI,CAM/E,GALA,KAAK,SAASjI,EAAK,OAAO,EAGpB+H,IAAiB/H,EAAK,MAAQ,KAAK,MAAMA,EAAK,QAAQ,QAAQN,GAAS,cAAe,EAAE,CAAC,GAE1FsI,EAAgB,CAEnBhI,EAAK,MAAQkI,GAAuBlI,EAAK,KAAK,EAG9C,MAAMK,EAAQ,CAAA,EACd,IAAI8H,EAAO,CAAA,EACPC,EAAiB,GACjBC,EAEJ,QAAUzN,EAAIoF,EAAK,MAAM,OAAS,EAAGpF,GAAK,GAAK,CAC7C,IAAI0N,EACA1H,EAAOZ,EAAK,MAAMpF,CAAC,EAIvB,GAHKgG,aAAgB4F,KACnB8B,EAAQR,GAAoBlH,EAAK,KAAM,CAAE,eAAAmH,EAAgB,cAAAC,CAAa,CAAE,GAErE,OAAO,UAAUM,CAAK,EAAI,CAC7B,MAAMC,EAAW,CAAE,OAAQD,GACtBP,IAAiBQ,EAAS,QAAU,CAAE,OAAQ3H,EAAK,SACxDA,EAAO,IAAIiE,GAAY0D,CAAQ,CAChC,CAKD,IAJAF,EAASzH,EAAK,kBAAoB,CAACwH,GAAkBC,GAChDA,EAASF,EAAK,QAAQvH,CAAI,EAC1BuH,EAAO,CAAA,EACZvH,EAAOZ,EAAK,MAAM,EAAEpF,CAAC,EACbgG,aAAgBnB,GAAe,CAErC,GADK4I,GAASF,EAAK,QAAQvH,CAAI,EACzBA,EAAK,WAAa,KAASA,EAAK,WAAa,KAASA,EAAK,WAAa,IAAOwH,EAAiB,OAGpG,KADAA,EAAiB,GACTD,EAAK,QAAS9H,EAAM,QAAQ8H,EAAK,IAAG,CAAE,EAEhDvH,EAAOZ,EAAK,MAAM,EAAEpF,CAAC,CACtB,CACF,CACD,GAAKyN,EACH,KAAQF,EAAK,QAAS9H,EAAM,QAAQ8H,EAAK,IAAG,CAAE,EAEhDnI,EAAK,MAAQK,CACd,CAMD,GAHAL,EAAK,MAAQkI,GAAuBlI,EAAK,KAAK,EAGzC,OAAO,KAAKA,EAAK,OAAO,EAC3B,OAAKA,EAAK,iBAAmB,CAAC,MAAM,KAAKA,EAAK,OAAO,IAAM,CAAC,KAAK,KAAKA,EAAK,OAAO,GAAK,CAAC+H,GAC/E,OAAO,IAAI,KAAK/H,EAAK,OAAO,EAAE,aAAY,EAAG,KAAK,EAE/CA,EAAK,YAAY,WAAWA,EAAK,KAAK,EAIpDA,EAAK,MAAQwI,GAA0BxI,EAAK,KAAK,EACjDA,EAAK,MAAQ,KAAK,cAAcA,EAAK,KAAK,EAG1C,GAAI,CAAE,UAAAyI,EAAW,UAAAC,EAAW,UAAAC,EAAW,aAAAC,CAAY,EAAKC,GAAkB7I,EAAK,KAAK,EACpF4I,EAAeE,GAAsBF,GAAgB,CAAA,CAAE,EACvDF,EAAYK,GAAmBL,GAAa,CAAA,CAAE,EAG9C,MAAMM,EAAkB,CAACN,EAAWD,EAAWE,EAAWC,CAAY,EAAE,KAAM,EAAC,OAAO,OAAO,EAC7F,QAAK7O,EAAAiP,EAAgB,CAAC,IAAjB,YAAAjP,EAAoB,YAAa,KAAMiP,EAAgB,QACrDhJ,EAAK,YAAY,WAAWgJ,CAAe,CACpD,CASA,SAASd,GAAuB7H,EAAO,CACrC,OAAOA,EAAM,OAAO,CAAC4I,EAAKrI,IAAS,CACjC,MAAMsI,EAAQD,EAAIA,EAAI,OAAS,CAAC,EAC1BE,EAAM,IAAI,IAAI,CAACD,GAAA,YAAAA,EAAO,SAAUtI,EAAK,QAAQ,CAAC,EAGpD,OAAKuI,EAAI,IAAI,MAAS,EAAIF,EAAI,KAAKrI,CAAI,EAG5BuI,EAAI,IAAI,GAAG,GAAOA,EAAI,IAAI,GAAG,EAAKF,EAAI,OAAO,GAAI,EAAG,IAAIxJ,EAAa,CAAE,SAAU,GAAK,CAAA,CAAC,EAGvF0J,EAAI,IAAI,GAAG,GAAOA,EAAI,OAAS,EAAKF,EAAI,OAAO,GAAI,EAAG,IAAIxJ,EAAa,CAAE,SAAU,GAAK,CAAA,CAAC,EAGzF0J,EAAI,IAAI,GAAG,GAAIF,EAAI,KAAKrI,CAAI,EAEhCqI,CACR,EAAE,CAAE,CAAA,CACP,CASA,SAASH,GAAsBzI,EAAO,CACpC,MAAM+I,EAAa,CAAA,EACb,CAAE,UAAAC,EAAW,YAAAC,CAAa,EAAGC,GAAwBlJ,CAAK,EAGhE,GAAKiJ,EAAY,OAAS,CACxB,MAAME,EAAc,KAAK,SAAS,KAAK,WAAWF,CAAW,CAAC,EAC9D,GAAKE,IAAgB,EAAI,MAAO,CAAC,GAAGH,CAAS,EAGxCG,EAAc,GAAIJ,EAAW,KAAK,IAAI3J,EAAa,CAAE,SAAU,GAAG,CAAC,CAAC,EACzE2J,EAAW,KAAK,IAAIvE,GAAY,CAAE,OAAQ2E,CAAW,CAAC,CAAE,CACzD,CACD,MAAO,CAAC,GAAGJ,EAAY,GAAGC,CAAS,CACrC,CASA,SAASN,GAAmB1I,EAAO,CACjC,KAAM,CAAE,UAAAgJ,EAAW,YAAAC,CAAa,EAAGC,GAAwBlJ,CAAK,EAG1DoJ,EAAiBH,EAAY,OAAO,CAACzG,EAAK6G,EAAM9O,IAAM,ChBzJvD,IAAAb,EgB0JH,GAAK2P,aAAgBjK,EAAe,OAAOoD,EAC3C,MAAM8G,IAAS5P,EAAA2P,EAAK,cAAL,YAAA3P,EAAkB,QAAS,OACpC2L,EAAOiE,EAAS,IAAMD,EAAK,MAC3BE,EAAYD,EAAS,GAAKD,EAAK,UAAU,WAAW,EAAE,EACtDvJ,EAAM,GAAGmJ,EAAY1O,EAAI,CAAC,EAAE,QAAQ,GAAG8K,CAAI,GAAGkE,CAAS,GAC7D,OAAA/G,EAAA1C,KAAA0C,EAAA1C,GAAa,IACPuJ,EAAK,mBAAmB,MAAUA,EAAK,QAAQ,iBAAmBA,EAAK,QAAQ,aAAY,EACjG7G,EAAI1C,CAAG,EAAE,QAAU0C,EAAI1C,CAAG,EAAE,QAAU,GAAKuJ,EAAK,OAC1CC,IAAS9G,EAAI1C,CAAG,EAAE,WAAa0C,EAAI1C,CAAG,EAAE,WAAa,CAAE,GAAE,OAAOuJ,EAAK,SAAS,GAC7E7G,CACR,EAAE,CAAE,CAAA,EASL,MAAO,CAAC,GANW,OAAO,QAAQ4G,CAAc,EAAE,QAAQ,CAAC,CAACtJ,EAAK,CAAC,OAAAqF,EAAQ,UAAAoE,CAAS,CAAC,IAAO,CACzF,IAAInK,EAAa,CAAE,SAAUU,EAAI,OAAO,CAAC,EAAG,EAC5CA,EAAI,MAAM,CAAC,IAAM,IACb,IAAIyH,GAAK,CAAE,OAAQpC,EAAQ,EAC3B,IAAIqC,GAAI,CAAE,OAAArC,EAAQ,MAAO,SAASrF,EAAI,MAAM,CAAC,CAAC,EAAG,UAAW,CAAC,GAAG,IAAI,IAAIyJ,CAAS,CAAC,EAAG,CAC1F,CAAC,EACqB,GAAGP,CAAS,CACrC,CASA,SAASb,GAA0BnI,EAAO,CACxC,OAAAA,EAAQA,EAAM,OAAO,CAAC4I,EAAKrI,IAAS,CAClC,GAAKA,aAAgB4F,GACnB,GAAK5F,EAAK,gBAAkB,CAC1B,MAAMZ,EAAO,IAAI,KAAKY,EAAK,IAAI,EAC/BA,EAAO,IAAIiE,GAAY,CAAE,OAAQ7E,EAAK,aAAc,EAAC,KAAK,CAAE,CACpE,KAAa,CACL,MAAM6J,EAAW,IAAI,KAAKjJ,EAAK,IAAI,EAAE,MACrCA,EAAO4H,GAA0BqB,CAAQ,CAC1C,CAEH,OAAAZ,EAAI,KAAKrI,CAAI,EACNqI,CACR,EAAE,CAAE,CAAA,EACEf,GAAuB7H,EAAM,KAAI,CAAE,CAC5C,CAUA,SAASwI,GAAkBxI,EAAO,CAEhC,OAAOA,EAAM,CAAC,YAAaZ,GAAgBY,EAAM,QAAQ,IAAIZ,EAAa,CAAE,SAAU,GAAG,CAAE,CAAC,EAErFY,EAAM,OAAO,CAACwC,EAAKjC,EAAMhG,IAAM,CACpC,IAAIuD,EACCyC,aAAgBc,GAAWvD,EAAOuD,GAC5Bd,aAAgB2F,IAAkB3F,EAAK,gBAAmBzC,EAAO0G,GACvE1G,EAAOyC,EAAK,YACjB,MAAMT,EAAM,GAAGhC,EAAK,KAAK,OAAO,CAAC,EAAE,YAAW,CAAE,GAAGA,EAAK,KAAK,UAAU,CAAC,CAAC,IAGzE,OAAC0E,EAAI1C,CAAG,EAAI0C,EAAI1C,CAAG,GAAK,CAAA,GAAI,KAAKE,EAAMzF,EAAI,CAAC,EAAGgG,CAAI,EAC5CiC,CACR,EAAE,CAAE,CAAA,CACP,CASA,SAAS0G,GAAwBlJ,EAAO,CACtC,OAAOA,EAAM,OAAO,CAACwC,EAAK6G,EAAM9O,KACzB8O,aAAgBjK,GACrBoD,EAAI6G,EAAK,OAAS,YAAc,aAAa,EAAE,KAAKrJ,EAAMzF,EAAI,CAAC,EAAG8O,CAAI,EAC/D7G,GACN,CAAE,UAAW,CAAA,EAAI,YAAa,CAAA,CAAI,CAAA,CACvC,CC1Oe,MAAMiH,WAAsB,WAAY,CAAxC,kCAUb5O,EAAA,oBAAe,MAQf,IAAI,gBAAiB,CjBtBhB,IAAAnB,EAAAsB,EAAA+B,EiBuBH,MAAMe,GAAO9C,GAAAtB,EAAA,KAAK,MAAM,QAAX,YAAAA,EAAkB,OAAlB,YAAAsB,EAAwB,KACrC,OAAK8C,GAASA,IAAS,SAAmB,GACnC,KAAK,QAAU,KAAK,kBAAoB,CAAC,GAACf,EAAA,OAAO,SAAP,MAAAA,EAAe,WAAW,OAC5E,CAQD,IAAI,kBAAmB,CjBlClB,IAAArD,EAAAsB,EiBmCH,QAAKA,GAAAtB,EAAA,KAAK,MAAM,QAAX,YAAAA,EAAkB,OAAlB,YAAAsB,EAAwB,QAAS,SAAkB,GACjD,KAAK,QAAU,KAAK,gBAC5B,CAKD,IAAI,QAAS,CjB1CR,IAAAtB,EiB2CH,OAAO,MAAM,QAAU,GAACA,EAAA,KAAK,MAAM,QAAX,MAAAA,EAAkB,KAC3C,CAQD,IAAI,wBAAyB,CAC3B,GAAK,KAAK,KAAK,MAAS,KAAK,SAAW,KAAK,KAAQ,MAAO,GAC5D,OAAS,KAAK,SAAS,IAAI,QAAS,qBAAqB,EAAC,CACxD,IAAK,MAAO,MAAO,GACnB,IAAK,SAAU,MAAO,CAAC,KAAK,OAAO,KACnC,QAAS,MAAO,EACjB,CACF,CAOD,OAAO,YAAYgQ,EAAQ,CAMzB,GALAA,EAAS,MAAM,YAAYA,CAAM,EAC5B,QAAQ,MAAM,YAAYA,EAAQ,sBAAsB,IAC3D,QAAQ,MAAM,YAAYA,EAAQ,wBAAyBA,EAAO,MAAM,MAAM,QAAQ,EACtF,OAAOA,EAAO,MAAM,MAAM,UAEvB,QAAQ,MAAM,YAAYA,EAAQ,iBAAiB,EAAI,CAC1D,MAAMC,EAAMD,EAAO,MAAM,MAAM,IAC/B,QAAQ,MAAM,YAAYA,EAAQ,0BAA2B,OAAO,EAC/DC,EAAI,MAAO,QAAQ,MAAM,YAAYD,EAAQ,wBAAyBC,EAAI,IAAI,EAC9EA,EAAI,QAAS,QAAQ,MAAM,YAAYD,EAAQ,sBAAuBC,EAAI,MAAM,EAChFA,EAAI,UAAW,QAAQ,MAAM,YAAYD,EAAQ,wBAAyBC,EAAI,QAAQ,CAC5F,CACD,OAAOD,CACR,CAOD,aAAc,CACZ,MAAM,YAAW,EACjB,KAAK,WAAU,EACf,MAAM,SAAS,SAAS,MAAM,IAAI,CACnC,CAOD,MAAM,WAAWE,EAAM,CACrB,MAAM9M,EAAO,MAAM,MAAM,UAEzB,YAAK,0BAA0BA,CAAI,EACnC,KAAK,iCAAiCA,CAAI,EACrC,KAAK,SAAS,IAAI,QAAS,uBAAuB,GACrDA,EAAK,KAAK,0BAA0B,EAAE,KAAK,CAACvC,EAAGsP,IAAOA,EAAG,UAAU,IAAI,WAAW,CAAC,EAGrF,KAAK,gBAAgB/M,EAAK,CAAC,CAAC,EAC5B,KAAK,eAAeA,EAAK,CAAC,CAAC,EAC3B,KAAK,2BAA2BA,EAAK,CAAC,CAAC,EASvC,MAAM,QAAQ,0BAA2B,KAAMA,EAAK,CAAC,CAAC,EAE/CA,CACR,CAQD,eAAeA,EAAM,CACnB,IAAIgN,EACJ,OAAS,KAAK,SAAS,IAAI,QAAS,uBAAuB,EAAC,CAC1D,IAAK,SAAUA,EAAW,GAAM,MAChC,IAAK,QAASA,EAAW,GAAO,MAEhC,IAAK,QAASA,EAAW,KAAK,UAAY,KAAK,IAAK,EAAI,EAAI,GAAK,IAAO,KACzE,CACD,UAAYC,KAAQjN,EAAK,iBAAiB,2BAA2B,EACnEiN,EAAK,UAAU,OAAO,YAAaD,CAAQ,EAE7C,UAAY1I,KAAWtE,EAAK,iBAAiB,wCAAwC,EACnFsE,EAAQ,gBAAgB,OAAQ,CAAC0I,CAAQ,CAE5C,CASD,0BAA0BhN,EAAM,CjBxJ3B,IAAApD,EiByJH,MAAMsQ,EAAWlN,EAAK,KAAK,qCAAqC,EAChE,GAAKkN,EAAS,OAAS,EAAI,CACzB,MAAMxJ,EAAS1D,EAAK,KAAK,cAAc,EAClC0D,EAAO,SAAW1D,EAAK,KAAK,YAAY,EAAE,KAAM,GAAG0D,EAAO,SAE1D,KAAK,yBAAyBwJ,EAAS,CAAC,EAAE,QAAQ,iBAAmB,IAE1E,MAAMvP,EAAQ,KAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,EAC1CwP,EAAY,KAAK,KAAK,OAAQxP,GAAA,YAAAA,EAAO,UAAY,KAAK,OAAO,KAAO,KAAK,KAAK,GACpF,UAAYyP,KAAUpN,EAAK,CAAC,EAAE,iBAAiB,sBAAsB,EAC9DoN,EAAO,QAAQ,aAAe,QAG5BA,EAAO,QAAQ,aAAe,MAAS,CAAC,KAAK,KAAK,MAAS,CAACD,IAC9DvQ,EAAA,KAAK,sBAAuB,IAA5B,MAAAA,EAA8B,qBAAqBwQ,EAAQ,SAAQA,EAAO,OAAS,GAE3F,CACF,CASD,iCAAiCpN,EAAM,CACrC,GAAK,CAAC,KAAK,kBAAoB,CAAC,KAAK,MAAM,OAAS,OACpD,MAAMqN,EAAqB,KAAK,wBAC1BC,EAAmBD,GAAA,YAAAA,EAAoB,uBACvCE,EAAsB,KAAK,KAAK,MAAS,KAAK,SAAS,IAAI,QAAS,sBAAsB,IAAM,OAOtG,SAASC,EAAStF,EAAK,CACrB,MAAMlE,EAAO,SAAS,cAAc,GAAG,EACvC,OAAAA,EAAK,UAAU,IAAI,MAAOkE,CAAG,EAC7BlE,EAAK,aAAa,QAAS,EAAE,EACtBA,CACR,CAGD,OAAU,CAACiC,EAAOwH,CAAO,IAAK,KAAK,MAAM,UAAY,CAEnD,MAAMC,EAAKD,EAAQ,KAAK,CAAC,EACzB,IAAMC,GAAA,YAAAA,EAAI,SAAU,KAAQA,GAAA,YAAAA,EAAI,OAAO,UAAW,EAAK,SAEvDD,EAAU,MAAM,KAAK,QAAQ,SAASA,CAAO,EAC7C,MAAM7H,EAAI6H,EAAQ,KAAK,CAAC,EAGxB,GADwB,YAAa7H,EAAE,QAAQ,CAAC,GAAMA,EAAE,QAAQ,eAAiBA,EAAE,QAAQ,cACrE,SAGtB,MAAM+H,EAAQ3N,EAAK,KAAK,aAAa,EAAEiG,CAAK,EAC5C,GAAK,CAAC0H,EAAQ,SAEd,MAAMC,EAAU,CAAC,SAAU,OAAO,EAAE,SAAS,KAAK,QAAQ,QAAS,WAAW,CAAC,EAEzEC,EADW,KAAK,QAAQ,QAAS,WAAW,IAAM,SAC1BN,EAAsBD,EAC/C1H,EAAE,QAAQ,QAAUiI,IAClBJ,EAAQ,OAAS7H,EAAE,QAAQ,OAAS+H,EAAM,UAAU,IAAI,SAAS,EACjEA,EAAM,UAAU,IAAI,SAAS,GAE/BC,GAAWH,EAAQ,YAAaE,EAAM,UAAU,IAAI,UAAU,EAC9DC,GAAWH,EAAQ,UAAWE,EAAM,UAAU,IAAI,QAAQ,EAE/D,MAAMG,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAU,IAAI,OAAO,EACtBH,EAAM,UAAU,SAAS,UAAU,EAAIG,EAAM,OAAON,EAAS,UAAU,EAAGA,EAAS,UAAU,CAAC,EACzFG,EAAM,UAAU,SAAS,QAAQ,EAAIG,EAAM,OAAON,EAAS,UAAU,EAAGA,EAAS,UAAU,CAAC,EAC5FG,EAAM,UAAU,SAAS,SAAS,EAAIG,EAAM,OAAON,EAAS,UAAU,CAAC,EACvEG,EAAM,UAAU,SAAS,SAAS,GAAIG,EAAM,OAAON,EAAS,UAAU,CAAC,EAC5EM,EAAM,SAAS,QAASH,EAAM,OAAOG,CAAK,CAChD,CACF,CASD,gBAAgB9N,EAAM,CjBhPjB,IAAApD,EAAAsB,EAAA+B,EAAAC,EAAAC,EAAAC,GiBkPH,MAAMzC,EAAQ,KAAK,qBAEnB,IAAIW,EACAyP,EACC,KAAK,kBACRzP,GAAMX,GAAA,YAAAA,EAAO,MAAO,KAAK,OAAO,OAChCoQ,EAAW,KAAK,QAEhBzP,EAAM,KAAK,OAAO,OAClByP,EAAW,KAAK,OAAO,MAGzB,MAAMC,EAAS,SAAS,cAAc,GAAG,EACzCA,EAAO,UAAU,IAAI,QAAQ,EACxBrQ,IAAQqQ,EAAO,QAAQ,KAAOrQ,EAAM,MACzCqQ,EAAO,UAAY,aAAa1P,CAAG,UAAUyP,CAAQ,KAErD,MAAM1P,EAAO,SAAS,cAAc,MAAM,EAC1CA,EAAK,UAAU,IAAI,cAAc,EACjCA,EAAK,UAAY,uBAAuB0P,CAAQ,UAEhD,MAAMhK,EAAW,SAAS,cAAc,MAAM,EAC9CA,EAAS,UAAU,IAAI,UAAU,EAC5B,KAAK,QAAQ,SAASA,EAAS,YAAYnH,EAAAoD,EAAK,cAAc,aAAa,IAAhC,YAAApD,EAAmC,YAAa,IAC1FmR,MAAa7P,EAAA,KAAK,SAAL,YAAAA,EAAa,OAAS,CAAC6F,EAAS,UAAU,SAASA,EAAS,YAAY9D,EAAA,KAAK,SAAL,YAAAA,EAAa,OAAQ,IAEhH5B,EAAK,YAAY0F,CAAQ,EAEzB,MAAMkK,EAASjO,EAAK,cAAc,iBAAiB,EACnDiO,GAAA,MAAAA,EAAQ,gBAAgBD,EAAQ3P,IAChC6B,EAAAF,EAAK,cAAc,aAAa,IAAhC,MAAAE,EAAmC,SAGnC,MAAMgO,EAAWlO,EAAK,cAAc,mBAAmB,EACjDmO,EAAeD,EAAS,cAAc,iBAAiB,EACvD,KAAK,KAAK,MAAOC,GAAA,MAAAA,EAAc,SACrC,MAAMC,EAAS,SAAS,cAAc,GAAG,EACzCA,EAAO,aAAa,aAAc,KAAK,KAAK,SAAS,0BAA0B,CAAC,EAChFA,EAAO,UAAU,IAAI,cAAc,EACnCA,EAAO,QAAQ,YAAc,GAC7BA,EAAO,UAAY,iDACnBF,EAAS,YAAYE,CAAM,EAG3BpO,EAAK,iBAAiB,cAAc,EAAE,QAAQ+M,GAAM,CAClD,MAAM/I,EAAO,SAAS,cAAc,YAAY,EAChDA,EAAK,IAAM+I,EAAG,QAAQ,IACtBA,EAAG,YAAY/I,CAAI,CACzB,CAAK,EAGD,MAAMnB,EAAO,KAAK,QAAQ,QAAS,MAAM,EACnC1F,EAAO,KAAK,oBACZ8D,EAAW,KAAK,wBACtB,GAAK,KAAK,kBAAoB9D,GAAQ0F,EAAO,CAC3C,MAAMwL,EAAcxL,EAAK,OAAS,YAAa1C,EAAA,KAAK,MAAM,CAAC,IAAZ,YAAAA,EAAe,YACxD4D,EAAWlB,EAAK,OAAS,SAC3BwL,EAAa,KAAK,KAAK,SAAS,mBAAmB,EAAI,KAAK,KAAK,SAAS,kBAAkB,EAC5FxL,EAAK,OAAS,UACX5B,GAAA,YAAAA,EAAU,eAAe4B,EAAK,cAAe,KAC7CzC,GAAAjD,EAAK,OAAO,OAAZ,YAAAiD,GAAkB,QAAS,KAAK,KAAK,SAAS,OAAO,KAAK,WAAWjD,EAAK,IAAI,CAAC,EAChFuG,GAAS,SAAS,cAAc,KAAK,EAC3CA,GAAO,UAAU,IAAI,SAAU,WAAW,EAC1CA,GAAO,UAAY;AAAA,kDACyB2K,EAAa,WAAa,EAAE;AAAA;AAAA,0CAEpClR,EAAK,GAAG,UAAUA,EAAK,IAAI;AAAA;AAAA,oCAEjCA,EAAK,IAAI;AAAA,uCACN4G,CAAQ;AAAA;AAAA;AAAA;AAAA,QAKzC/D,EAAK,cAAc,8BAA8B,EAAE,OAAM,EACzDA,EAAK,cAAc,kBAAkB,EAAE,sBAAsB,aAAc0D,EAAM,CAClF,CAGD,KAAK,qBAAqB1D,CAAI,EAGzB,KAAK,kBACRA,EAAK,iBAAiB,eAAe,EAAE,QAAQ,CAAC+M,EAAItP,IAAM,CACnD,EAAEoF,aAAgB0G,KAAe,KAAK,MAAM9L,CAAC,GAAI,KAAK,mBAAmB,KAAK,MAAMA,CAAC,EAAGsP,CAAE,CACvG,CAAO,EACD,KAAK,qBAAqB,KAAK,MAAM,OAAO3K,GAAKA,aAAamH,EAAU,EAAGvJ,CAAI,EAC/E,KAAK,0BAA0BA,CAAI,EACnCA,EAAK,iBAAiB,YAAY,EAAE,QAAQ+M,GAAMA,EAAG,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,CAAC,GAEhH/M,EAAK,iBAAiB,YAAY,EAAE,QAAQ+M,GAAMA,EAAG,UAAU,IAAI,aAAa,CAAC,EAInF,KAAK,oBAAoB/M,CAAI,EAE7BgO,EAAO,iBAAiB,QAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACnEA,EAAO,iBAAiB,cAAe,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACvEA,EAAO,iBAAiB,aAAc,KAAK,kBAAkB,KAAK,IAAI,CAAC,CACxE,CASD,mBAAmBnL,EAAM7C,EAAM,CAC7B,MAAMsO,EAAW,OAAO3D,GAAoB9H,EAAK,SAAU,CAAE,cAAe,EAAM,CAAA,CAAC,EACnF,GAAK,CAACyL,EAAW,OACjB,MAAMC,EAAOD,EAAW,EAAI,IAAM,IAC5BE,EAAO,SAAS,cAAc,SAAS,EAC7CA,EAAK,UAAU,IAAI,eAAgB,UAAU,EAC7CA,EAAK,UAAY;AAAA;AAAA;AAAA;AAAA,mDAI8BD,CAAI,UAAU,KAAK,IAAID,CAAQ,CAAC;AAAA;AAAA;AAAA,MAI/EtO,EAAK,YAAYwO,CAAI,CACtB,CASD,qBAAqBxO,EAAM,CjBtXtB,IAAApD,EAAAsB,EiBuXH,MAAMuQ,EAAa,KAAK,MAAM,CAAC,EACzBC,EAAa,KAAK,SAAS,IAAI,QAAS,sBAAsB,EAEpE,GAAK,EADa,KAAK,KAAK,MAASA,IAAe,SACjC,EAAED,aAAsB,MAAM,KAAK,SAAW,OAEjE,MAAME,EAAgB,OAAO,MAAM,gBAAgBF,EAAW,QAAQ,OAAO,EAC7E,GAAKE,EAAgB,CACnB,MAAMC,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,UAAU,IAAI,YAAY,EAC5B,IAAIC,EAAUF,EAAc,MACvBA,EAAc,YAAYE,EAAU;AAAA,wEACyBF,EAAc,SAAS;AAAA,2BACpEE,CAAO,KAAKA,CAAO;AAAA,SAExCD,EAAE,UAAY,WAAW,KAAK,KAAK,OAAO,6BAA6B,CAAC,aAAaC,CAAO,IAC3FjS,EAAAoD,EAAK,cAAc,YAAY,GAAKA,EAAK,cAAc,kBAAkB,IAAzE,MAAApD,EAA6E,YAAYgS,EAC3F,CAED,MAAMzQ,EAAU,KAAK,QAAQ,QAAS,SAAS,EAC/C,GAAK,EAACA,GAAA,MAAAA,EAAS,QAAS,OACxB,MAAM8O,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAU,IAAI,QAAQ,EAC3BA,EAAK,UAAY;AAAA;AAAA;AAAA;AAAA,kBAIH,KAAK,KAAK,SAAS,gBAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlD,MAAM6B,EAAa7B,EAAK,cAAc,IAAI,EAC1C6B,EAAW,UAAY3Q,EAAQ,IAAI,CAAC,CAAE,KAAAE,EAAM,GAAAK,EAAI,KAAAF,KAAW,CACpD,CAAC,KAAK,KAAK,MAASkQ,IAAe,QAAShQ,EAAK,IACtD,MAAMqQ,EAAS,CAACN,EAAW,aAAgBA,EAAW,MAAQ/P,GAAO+P,EAAW,UAChF,MAAO,CAAC;AAAA,yBACWjQ,CAAI,mBAAmBuQ,EAAS,OAAS,KAAK;AAAA,0BAC7CA,EAAS,WAAa,UAAU;AAAA,8BAC5B1Q,CAAI;AAAA,YACrBK,IAAO,GAAM;AAAA;AAAA;AAAA,oBAGLA,IAAO,KAAQ,UAAYA,CAAE;AAAA;AAAA,YAEpC,EAAE;AAAA;AAAA,QAEPqQ,CAAM,CACV,CAAA,EAAE,KAAK,CAACC,EAAGxH,IAAOwH,EAAE,CAAC,IAAMxH,EAAE,CAAC,EAAK,EAAIwH,EAAE,CAAC,EAAI,EAAI,EAAE,EAAE,OAAO,CAACC,EAAK,CAACC,CAAE,IAAMD,EAAMC,EAAI,EAAE,EACzFJ,EAAW,iBAAiB,WAAW,EAAE,QAAQ7Q,GAAU,CACzDA,EAAO,iBAAiB,QAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACnEA,EAAO,iBAAiB,cAAe,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACvEA,EAAO,iBAAiB,aAAc,KAAK,kBAAkB,KAAK,IAAI,CAAC,CAC7E,CAAK,GACDC,EAAA8B,EAAK,cAAc,kBAAkB,IAArC,MAAA9B,EAAwC,YAAY+O,EACrD,CAUD,qBAAqB9K,EAAOnC,EAAM,CjB1b7B,IAAApD,EiB2bH,GAAK,CAACuF,EAAM,OAAS,OACrB,MAAMgN,EAAkB,OAAO,MAAM,uBAAyB3M,GAAqBL,CAAK,EAAIA,EAC5F,GAAI,CAAE,QAAA0F,EAAS,MAAA8F,EAAO,UAAAyB,CAAS,EAAKD,EAAgB,OAAO,CAACzJ,EAAKtD,KAC/DsD,EAAI,QAAQ,KAAK,OAAO,MAAM,uBAAyBtD,EAAE,QAAU,MAAMA,EAAE,OAAO,EAAE,EACpFsD,EAAI,OAAStD,EAAE,MACfsD,EAAI,UAAU,KAAK,KAAK,oBAAoBtD,CAAC,CAAC,EACvCsD,GACN,CAAE,QAAS,GAAI,MAAO,EAAG,UAAW,CAAE,CAAA,CAAE,EAC3CmC,EAAUA,EAAQ,KAAK,EAAE,EAAE,QAAQ,QAAS,EAAE,EAC9C7H,EAAK,iBAAiB,YAAY,EAAE,QAAQ+M,GAAMA,EAAG,OAAM,CAAE,EAC7D,MAAMlK,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAU,IAAI,WAAW,EAE9B,MAAMwM,EAAkBD,EAAU,OAAO,CAACH,EAAK,CAAE,KAAAjO,EAAM,MAAA2M,EAAO,SAAAW,EAAU,KAAAjJ,KAAW,CACjF,MAAML,EAAS,OAAO,MAAM,YAAYhE,CAAI,GAAK,OAAO,MAAM,aAAaA,CAAI,EAC/E,MAAO,GAAGiO,CAAG;AAAA;AAAA;AAAA;AAAA,gBAIH5J,EAAK,OAAO,CAAC4J,EAAK,CAAE,OAAAK,EAAQ,QAAAC,CAAO,IAAO;AAAA,kBACxCN,CAAG,mBAAmBM,CAAO,KAAKD,CAAM;AAAA,gBACzC,EAAE,CAAC;AAAA,gBACJhB,EAAW;AAAA,wDAC6BA,EAAW,EAAI,IAAM,GAAG,UAAU,KAAK,IAAIA,CAAQ,CAAC;AAAA,gBAC1F,EAAE;AAAA;AAAA;AAAA,gBAGJtJ,EAAS,aAAaA,EAAO,IAAI,UAAUA,EAAO,KAAK,KAAO,EAAE;AAAA,qCAC5CA,GAAA,YAAAA,EAAQ,QAAS,EAAE;AAAA,oCACnB2I,CAAK;AAAA;AAAA;AAAA;AAAA,OAKpC,EAAE,EAAE,EAEL9K,EAAK,UAAY;AAAA;AAAA,oCAEegF,CAAO;AAAA;AAAA;AAAA,cAG7BwH,CAAe;AAAA;AAAA;AAAA,iCAGI1B,CAAK;AAAA;AAAA,MAGlC3N,EAAK,cAAc,kBAAkB,EAAE,YAAY6C,CAAI,EAEvD,MAAM2M,EAAe,KAAK,QAAQ,QAAS,mBAAmB,EAC9D,GAAKA,EAAe,CAClB,MAAMZ,EAAI,SAAS,cAAc,GAAG,EACpCA,EAAE,UAAU,IAAI,YAAY,EAC5BA,EAAE,UAAY,WAAW,KAAK,KAAK,OAAO,mBAAmB,CAAC,aAC5D,KAAK,KAAK,SAAS,mCAAmCY,EAAa,WAAY,CAAA,EAAE,CACzF,IACM5S,EAAAoD,EAAK,cAAc,8BAA8B,IAAjD,MAAApD,EAAoD,YAAYgS,EACjE,CAED,GAAK,KAAK,KAAK,KAAO,CACpB,MAAMa,EAAoB,SAAS,cAAc,oBAAoB,EACrEA,EAAkB,UAAU,IAAI,QAAQ,EACxCA,EAAkB,QAAUjN,GAAqBL,EAAO,CAAE,kBAAmB,EAAM,CAAA,EAAE,IAAIU,IAAS,CAChG,MAAOA,EAAK,MACZ,KAAMA,EAAK,QAAQ,KACnB,WAAY,IAAI,IAAIA,EAAK,QAAQ,YAAc,CAAA,CAAE,CAClD,EAAC,EACF7C,EAAK,cAAc,kBAAkB,EAAE,YAAYyP,CAAiB,CACrE,CACF,CAUD,oBAAoB5M,EAAM,CACxB,MAAM6M,EAAY,CAAE,KAAM7M,EAAK,QAAQ,KAAM,MAAOA,EAAK,MAAO,SAAU,EAAG,KAAM,CAAE,CAAA,EACrF,IAAI8M,EAAoB,GACxB,QAAUlS,EAAIoF,EAAK,MAAM,OAAS,EAAGpF,GAAK,GAAK,CAC7C,MAAMgG,EAAOZ,EAAK,MAAMpF,GAAG,EAC3B,GAAK,EAAEgG,aAAgB,QAAQ,KAAK,MAAM,cAAgB,EAAEA,aAAgB,QAAQ,KAAK,MAAM,UAC7F,SAEF,MAAMxE,EAAQwE,EAAK,MACdA,aAAgB,QAAQ,KAAK,MAAM,UAAWiM,EAAU,KAAK,KAAK,GAAGjM,EAAK,QAAQ,IAAIrB,IAAM,CAC/F,OAAQqB,EAAK,eAAerB,CAAC,EAAG,QAASqB,EAAK,aAAarB,CAAC,EAAE,WAAW,GAAG,CAC7E,EAAC,CAAC,EACH,IAAIwN,EAAa,EACbC,EAAWhN,EAAK,MAAMpF,CAAC,EAC3B,KAAQoS,aAAoB,QAAQ,KAAK,MAAM,cACvC,CAAC,IAAK,GAAG,EAAE,SAASA,EAAS,QAAQ,IAAIF,EAAoB,IAC9DE,EAAS,WAAa,MAAMD,GAAc,IAC/CC,EAAWhN,EAAK,MAAM,EAAEpF,CAAC,EAEtBgG,aAAgB,QAAQ,KAAK,MAAM,cAAciM,EAAU,UAAYzQ,EAAQ2Q,EACrF,CACD,OAAKD,IAAoBD,EAAU,SAAW,MACvCA,CACR,CASD,0BAA0B1P,EAAM,CjB1iB3B,IAAApD,EAAAsB,EiB4iBH,GAAK,CADsB,KAAK,QAAQ,QAAS,wBAAwB,EAC9C,OAG3B,MAAM4R,EAAkB,KAAK,QAAQ,QAAS,qBAAqB,EACnE,GAAKA,GAAmB,GAAClT,EAAA,KAAK,mBAAkB,IAAvB,MAAAA,EAA2B,QAAQ,IAAIkT,IAAmB,OAGnF,MAAMC,EAAyB,SAAS,cAAc,yBAAyB,EAC/EA,EAAuB,UAAU,IAAI,QAAQ,EAC7C,MAAMC,EAAehQ,EAAK,cAAc,cAAc,EACjDgQ,EAAeA,EAAa,sBAAsB,cAAeD,CAAsB,GACvF7R,EAAA8B,EAAK,cAAc,YAAY,IAA/B,MAAA9B,EAAkC,OAAO6R,EAC/C,CASD,oBAAoB/P,EAAM,CjBjkBrB,IAAApD,EiBkkBH,MAAMO,EAAO,KAAK,oBAClB,IAAI8S,EACJ,GAAK,KAAK,QAAQ,QAAS,aAAa,IAAM,QAC5CA,GAAUrT,EAAA,KAAK,QAAQ,QAAS,aAAa,IAAnC,YAAAA,EAAsC,IAAIsT,GAAM/S,GAAA,YAAAA,EAAM,QAAQ,IAAI+S,QACvE,CACL,GAAK,KAAK,QAAQ,QAAS,WAAW,EAAI,OAC1CD,EAAU9S,GAAA,YAAAA,EAAM,QAAQ,OAAOuE,IjBxkB9B,IAAA9E,EiBwkBoC,OAAA8E,EAAE,OAAS,eAC3C,GAAC9E,EAAAO,EAAK,QAAQ,QAAS,eAAe,IAArC,MAAAP,EAAwC,SAAS8E,EAAE,MAC1D,CAED,GADAuO,EAAUA,GAAA,YAAAA,EAAS,OAAOvO,GAAKA,IAAM,KAAK,KAAK,MAASA,EAAE,UAAa,KAAK,OAAO,KAAO,KAAK,KAAK,KAC/F,EAACuO,GAAA,MAAAA,EAAS,QAAS,OAExB,MAAME,EAAoB,SAAS,cAAc,oBAAoB,EACrEA,EAAkB,UAAU,IAAI,QAAQ,EACxCA,EAAkB,QAAUF,EAC5BjQ,EAAK,cAAc,kBAAkB,EAAE,YAAYmQ,CAAiB,CACrE,CAeD,OAAO,6BAA6BnQ,EAAMH,EAAS,CACjD,MAAMuQ,EAAW,CAAC,CAAClB,CAAE,IAAM,CjBlmBxB,IAAAtS,EiBkmBwB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,QAAQ,SAAS,IAAtC,YAAAtS,EAAyC,gBAC9DyT,EAAY,CAAC,CAACnB,CAAE,IAAM,CjBnmBzB,IAAAtS,EiBmmByB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,QAAQ,SAAS,IAAtC,YAAAtS,EAAyC,kBACrE,OAAAiD,EAAQ,KACN,CACE,KAAM,KAAK,KAAK,SAAS,yBAAyB,EAClD,KAAM,oCACN,UAAWuQ,EACX,SAAUlB,GAAE,CjBzmBb,IAAAtS,EiBymBiB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,KAAK,WAAW,CAAC,IAAtC,YAAAtS,EAAyC,oBAAoBsS,EAAI,IACjF,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,0BAA0B,EACnD,KAAM,mCACN,UAAWkB,EACX,SAAUlB,GAAM,CjBhnBjB,IAAAtS,EiBgnBiB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,KAAK,WAAW,CAAC,IAAtC,YAAAtS,EAAyC,oBAAoBsS,EAAI,KACjF,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,yBAAyB,EAClD,KAAM,oCACN,UAAWkB,EACX,SAAUlB,GAAE,CjBvnBb,IAAAtS,EiBunBiB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,KAAK,WAAW,CAAC,IAAtC,YAAAtS,EAAyC,kBAAkBsS,IAC3E,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,+BAA+B,EACxD,KAAM,sCACN,UAAWkB,EACX,SAAUlB,GAAE,CjB9nBb,IAAAtS,EiB8nBiB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,KAAK,WAAW,CAAC,IAAtC,YAAAtS,EAAyC,oBAAoBsS,EAAI,IACjF,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,6BAA6B,EACtD,KAAM,qCACN,UAAWkB,EACX,SAAUlB,GAAE,CjBroBb,IAAAtS,EiBqoBiB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,KAAK,WAAW,CAAC,IAAtC,YAAAtS,EAAyC,oBAAoBsS,EAAI,KACjF,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,4BAA4B,EACrD,KAAM,kCACN,UAAWmB,EACX,SAAU,CAAC,CAACnB,CAAE,IAAM,CjB5oBrB,IAAAtS,EiB4oBqB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,QAAQ,SAAS,IAAtC,YAAAtS,EAAyC,cAAcsS,EAAI,QAC/E,MAAO,QACR,EACD,CACE,KAAM,KAAK,KAAK,SAAS,6BAA6B,EACtD,KAAM,kCACN,UAAWmB,EACX,SAAU,CAAC,CAACnB,CAAE,IAAM,CjBnpBrB,IAAAtS,EiBmpBqB,OAAAA,EAAA,KAAK,SAAS,IAAIsS,EAAG,QAAQ,SAAS,IAAtC,YAAAtS,EAAyC,cAAcsS,EAAI,SAC/E,MAAO,QACR,CACP,EACWrP,CACR,CAQD,2BAA2BG,EAAM,CjBhqB5B,IAAApD,GiBiqBHA,EAAA,KAAK,sBAAuB,IAA5B,MAAAA,EAA8B,sBAAsB,KAAMoD,EAC3D,CAUD,MAAM,mBAAmBsG,EAAO,CjB5qB3B,IAAA1J,EiB6qBH0J,EAAM,gBAAe,EACrB,MAAM9H,EAAO8H,EAAM,cAAc,QAAQ,KACnC3I,EAAQ,aAAaa,CAAI,EACzBJ,IAAQxB,EAAAe,GAAA,YAAAA,EAAO,QAAP,YAAAf,EAAc,UAAUe,GAAA,YAAAA,EAAO,kBAAkB,IAC/D,GAAK,CAACS,GAAS,CAACT,EAAM,mBAAmB,KAAK,KAAM,UAAU,EAAG,OACjE,MAAM2S,EAAgB,CAAChK,EAAM,SAC7B,GAAKlI,EAAM,WAAaA,EAAM,QAAO,MAEnC,QAAAA,EAAM,QAAQ,CAAE,cAAAkS,CAAa,CAAE,EACxB,OAAO,WAAWlS,EAAM,MAAM,CAExC,CASD,iBAAiBkI,EAAO,CjBjsBnB,IAAA1J,EiBksBH,MAAM4B,EAAO8H,EAAM,cAAc,QAAQ,KACnC3I,EAAQ,aAAaa,CAAI,EACzBJ,IAAQxB,EAAAe,GAAA,YAAAA,EAAO,QAAP,YAAAf,EAAc,UAAUe,GAAA,YAAAA,EAAO,kBAAkB,IAC1DS,GAASA,EAAM,YACZA,EAAM,YAAaA,EAAM,WAAWkI,EAAO,CAAE,eAAgB,EAAI,CAAE,EACzE,KAAK,aAAelI,EAEvB,CASD,kBAAkBkI,EAAO,CAClB,KAAK,cAAe,KAAK,aAAa,YAAYA,CAAK,EAC5D,KAAK,aAAe,IACrB,CAYD,oBAAoB4I,EAAIU,EAAY,CAClC,MAAMW,EAAU/N,GAAqB,KAAK,MAAO,CAAE,kBAAmB,EAAM,CAAA,EAAE,IAAIK,IAAS,CACzF,MAAOA,EAAK,MACZ,KAAMA,EAAK,QAAQ,KACnB,WAAY,IAAI,IAAIA,EAAK,QAAQ,YAAc,CAAA,CAAE,CAClD,EAAC,EACF,OAAO,QAAQ,IAAI,OAAO,OAAO,WAAW,IAAIW,GAAK,CjBvuBlD,IAAA5G,EiBwuBD,OAAOA,EAAA4G,EAAE,QAAF,YAAA5G,EAAS,YAAY2T,EAAS,CAAE,WAAAX,EAAY,cAAe,GAAO,OAAQ,EAAM,EACxF,CAAA,CAAC,CACH,CASD,cAAcV,EAAIlO,EAAM,CACtB,GAAK,EAAC,qBAAQ,OAAQ,OACtB,MAAMwP,EAAMtB,EAAG,QAAQ,mBAAmB,EAAE,iBAAiB,yBAAyBlO,CAAI,EAAE,EACtFyP,EAAQ,IAAI,IAAI,MAAM,KAAKD,CAAG,EAAE,IAAIjJ,GAAKA,EAAE,QAAQ,IAAI,CAAC,EAC9D,OAAO,OAAO,aACdkJ,EAAM,QAAQjS,GAAQ,CjBxvBnB,IAAA5B,EiByvBD,MAAMe,EAAQ,aAAaa,CAAI,EAC/B,GAAK,CAACb,EAAQ,OACd,MAAM+S,EAAS/S,EAAM,QAAU,EAACf,EAAAe,EAAM,QAAN,YAAAf,EAAa,MAAM,EAAIe,EAAM,kBAC7D,UAAYS,KAASsS,EACdtS,GAAA,MAAAA,EAAO,WAAaT,EAAM,mBAAmB,KAAK,KAAM,OAAO,GAClES,EAAM,QAAQ,CAAE,cAAe,EAAO,CAAA,CAGhD,CAAK,CACF,CASD,kBAAkB8Q,EAAI,CACpB,MAAMvB,EAAQ,KAAK,MAAM,OAAO,CAAC7B,EAAKjJ,IAASiJ,EAAMjJ,EAAK,MAAO,CAAC,EAClE,OAAO,QAAQ,IAAI,OAAO,OAAO,WAAW,IAAIW,GAAK,CjB7wBlD,IAAA5G,EiB8wBD,OAAOA,EAAA4G,EAAE,QAAF,YAAA5G,EAAS,YAAY+Q,EAC7B,CAAA,CAAC,CACH,CASD,iBAAiBrH,EAAO,CACtBA,EAAM,gBAAe,EACNA,EAAM,cACd,UAAU,OAAO,UAAU,CACnC,CASD,OAAO,mBAAmBE,EAAK,CAACxG,CAAI,EAAG,CjBtyBlC,IAAApD,EiBuyBH,MAAM+T,EAAQ3Q,EAAK,cAAc,sBAAsB,EACvD2Q,EAAM,UAAY,+BAClBA,EAAM,QAAQ,QAAU,KAAK,KAAK,SAAS,OAAO,EAClDA,EAAM,aAAa,aAAcA,EAAM,QAAQ,OAAO,GACtD/T,EAAAoD,EAAK,cAAc,uCAAuC,IAA1D,MAAApD,EAA6D,QAC9D,CAQD,OAAO,gBAAgB,CAACoD,CAAI,EAAG,CACvB,KAAK,SAAS,IAAI,QAAS,uBAAuB,GACtD,sBAAsB,IAAM,CAG1B,WAAW,IAAM,GAAG,KAAK,aAAc,EAAE,GAAG,CACpD,CAAO,CAEJ,CAOD,OAAO,mBAAoB,CACzB,OAAO,iBAAiB,UAAW,KAAK,gBAAiB,CAAE,QAAS,EAAI,CAAE,EAC1E,OAAO,iBAAiB,QAAS,KAAK,gBAAiB,CAAE,QAAS,EAAI,CAAE,EACxE,OAAO,iBAAiB,OAAQ,IAAM,KAAK,gBAAgB,CAAE,WAAY,EAAM,CAAA,EAAG,CAAE,QAAS,EAAM,CAAA,CACpG,CASD,OAAO,gBAAgB,CAAE,WAAA4Q,EAAW,EAAK,EAAG,CAAA,EAAI,CAC9C,SAAS,iBAAiB,oBAAoB,EAAE,QAAQC,GAAW,CACjE,UAAY7N,KAAO,OAAO,OAAO,gBAAgB,aAAa,EACvD,KAAK,SAAS,iBAAiBA,CAAG,GAAK,CAAC4N,EAAaC,EAAQ,QAAQ,WAAW7N,CAAG,EAAE,EAAI,GACzF,OAAO6N,EAAQ,QAAQ,WAAW7N,CAAG,EAAE,CAEpD,CAAK,CACF,CAOD,UAAUnD,EAASiR,EAAQ,CACzB,MAAM,UAAUjR,EAASiR,CAAM,EAC/B,MAAM,SAAS,SAAS,QAAQ,IAAI,CACrC,CAUD,uBAAwB,CjB32BnB,IAAAlU,EAAAsB,EiB42BH,MAAM+C,EAAW,aAAa,KAAK,QAAQ,QAAS,eAAe,CAAC,EACpE,OAAKA,KACE/C,GAAAtB,EAAA,KAAK,sBAAL,YAAAA,EAA0B,OAAO,aAAjC,YAAAsB,EAA6C,IAAI,KAAK,QAAQ,QAAS,aAAa,GAC5F,CAQD,oBAAqB,CACnB,GAAK,KAAK,QAAQ,OAAS,KAAK,QAAQ,MAAQ,CAC9C,MAAM6S,EAAQ,KAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,EAC1C3S,EAAQ2S,GAAA,YAAAA,EAAO,OAAO,IAAI,KAAK,QAAQ,OAC7C,GAAK3S,EAAQ,OAAOA,EAAM,KAC3B,CACD,OAAO,KAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,CAC1C,CAQD,mBAAoB,CAClB,MAAMjB,EAAO,aAAa,KAAK,QAAQ,QAAS,WAAW,CAAC,EAC5D,GAAKA,EAAO,OAAOA,EACnB,MAAMQ,EAAQ,KAAK,qBACnB,GAAK,CAACA,EAAQ,OACd,MAAMqT,EAAa,KAAK,QAAQ,QAAS,WAAW,GAAK,KAAK,sBAAqB,EAAG,QAAQ,QAAS,WAAW,EAClH,GAAKA,EAAa,OAAO,IAAI,KAAK,eAAeA,EAAY,CAAE,OAAQrT,CAAK,CAAE,CAC/E,CASD,mBAAmBqD,EAAM,CACvB,OAAO,MAAM,SAAS,SAAS,IAAI,KAAK,GAAIA,CAAI,CACjD,CASD,uBAAwB,CACtB,OAAO,KAAK,SAAS,IAAI,KAAK,QAAQ,QAAS,oBAAoB,CAAC,GAAK,IAC1E,CAUD,YAAa,CjB76BR,IAAApE,EiB86BH,MAAMqU,EAAQ,QAAQ,MAAM,YAAY,KAAM,aAAa,EAC3D,IAAMA,GAAA,YAAAA,EAAO,eAAgB,UAAYA,GAAA,MAAAA,EAAO,KAAM,CACpD,MAAM5P,EAAU,kMAGhB,OAAO,eAAe4P,EAAM,IAAK,OAAQ,CACvC,KAAM,CjBp7BP,IAAArU,EiBq7BG,eAAQ,MAAM,wBAAwByE,EAAS,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAAA,GAC9FzE,EAAAqU,EAAM,OAAN,YAAArU,EAAY,IACpB,EACD,aAAc,GACd,WAAY,EACpB,CAAO,EACD,OAAO,eAAeqU,EAAM,IAAK,SAAU,CACzC,KAAM,CjB57BP,IAAArU,EiB67BG,eAAQ,MAAM,wBAAwByE,EAAS,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAAA,GAC9FzE,EAAAqU,EAAM,OAAN,YAAArU,EAAY,EACpB,EACD,aAAc,GACd,WAAY,EACpB,CAAO,EACD,OAAO,eAAeqU,EAAM,IAAK,WAAY,CAC3C,KAAM,CjBp8BP,IAAArU,EiBq8BG,eAAQ,MAAM,wBAAwByE,EAAS,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAAA,GAC9FzE,EAAAqU,EAAM,OAAN,YAAArU,EAAY,IACpB,EACD,aAAc,GACd,WAAY,EACpB,CAAO,CACF,UAEUqU,GAAA,YAAAA,EAAO,eAAgB,SAAWA,GAAA,MAAAA,EAAO,MAAO,CACzD,MAAM5P,EAAU,wGAEhB,OAAO,eAAe4P,EAAM,KAAM,SAAU,CAC1C,KAAM,CjBj9BP,IAAArU,EiBk9BG,eAAQ,MAAM,wBAAwByE,EAAS,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAAA,GAC9FzE,EAAAqU,EAAM,OAAN,YAAArU,EAAY,EACpB,EACD,aAAc,GACd,WAAY,EACpB,CAAO,EACD,OAAO,eAAeqU,EAAM,KAAM,WAAY,CAC5C,KAAM,CjBz9BP,IAAArU,EiB09BG,eAAQ,MAAM,wBAAwByE,EAAS,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAAA,GAC9FzE,EAAAqU,EAAM,OAAN,YAAArU,EAAY,IACpB,EACD,aAAc,GACd,WAAY,EACpB,CAAO,CACF,EAEIA,EAAAqU,GAAA,YAAAA,EAAO,OAAP,MAAArU,EAAa,MAAO,OAAO,eAAeqU,EAAO,WAAY,CAChE,KAAM,CACJ,eAAQ,MAAM,wBACZ,uEACA,CAAE,MAAO,YAAa,MAAO,YAAa,KAAM,EAAM,CAChE,EACe,KAAK,KAAK,IAClB,EACD,aAAc,GACd,WAAY,EAClB,CAAK,CACF,CACH,CCp+BO,MAAMC,EAAN,MAAMA,CAAQ,CA8VnB,OAAO,iBAAiBrO,EAAM,CAC5B,OAAAA,EAAK,OAASA,EAAK,iBACnBA,EAAK,aAAY,EACVA,CACR,CAQD,OAAO,aAAaA,EAAMsO,EAAS,CACjC,OAAAtO,EAAK,MAAQsO,EAAS,MACtBtO,EAAK,OAASA,EAAK,iBACnBA,EAAK,aAAY,EACVA,CACR,CAED,OAAO,iBAAiBuO,EAAepM,EAAO,ClB3XzC,IAAApI,EkB4XH,MAAMyU,EAAa/T,EAAa,IAAInB,EAAS,eAAe,GAAG,EAG/D,GAFAiB,EAAQ,IAAI,mBAAoB,CAAC,cAAgBiU,EAAYC,EAAK,YAAatM,CAAM,CAAC,IAEnFpI,EAAAoI,EAAO,QAAP,YAAApI,EAAe,mBAAoB,OACpC,MAAO,GAEP,OAAOyU,EAAU,CACf,IAAK,GACH,OAAOC,EAAK,YAAY,QAAQ,OAAO,GAAG,GAC5C,QACE,OAAOF,CACV,CAGJ,CACH,EA/XErT,EAFWmT,EAEJ,oBAAoB,MAAOxQ,EAAU/B,EAAQC,EAAYuJ,EAAKoJ,IAAY,CAC5E,IAAC5Q,EAAmB,KACnBtE,EAAO,KAAK,KACZc,EAAOyB,EAAaxC,EAAY,kBAAkBmV,EAAQ,QAAQ,MAAO5S,EAAQC,CAAU,EAAI,KAEnGuJ,EAAI,MAAQA,EAAI,MAAM,IAAInG,GAAY,KAAK,SAASA,CAAQ,CAAC,EAC7D5E,EAAQ,IAAI,sBAAuB,CAACsD,EAAU/B,EAAQC,EAAYuJ,EAAKoJ,CAAO,CAAC,EAC/EnU,EAAQ,IAAI,eAAgB,CAAC,GAAG+K,EAAI,KAAK,CAAC,EAC1C,IAAInD,EAAS,CAAA,EAAIwM,EAAerJ,EAAI,MAAM,CAAC,EAE3CnD,EAAO,QAAU,CACf,OAAQmD,EAAI,OACZ,QAASA,EAAI,QACb,QAASA,EAAI,QACb,KAAM9L,EACN,MAAO8L,EAAI,OAAS/L,EAAY,cAAcmV,EAAQ,QAAQ,EAC9D,SAAUA,EAAQ,QACnB,EAEDvM,EAAO,OAAS,CACd,UAAW,EACjB,EACI5H,EAAQ,IAAI,sBAAuB,CAAC4H,CAAM,CAAC,EAE3CA,EAAO,KAAO,CACZ,QAASwM,EAAa,QACtB,QAAS,CAAE,UAAW,GAAO,UAAW,EAAO,EAC/C,KAAMnV,EACN,MAAO,CAAE,EACT,MAAO,CACL,GAAG8L,EAAI,MACP,CAACzM,CAAY,EAAG,CAAE,UAAW,EAAM,EACnC,MAAO,CACL,GAAGyM,EAAI,MAAM,KAEd,EACD,MAAO,CAAE,UAAW,GAAM,UAAW,EAAO,CAC7C,CACP,EACIA,EAAI,MAAQnD,EAAO,KAAK,MACxB5H,EAAQ,IAAI,sBAAuB,CAACsD,IAAWlF,EAAU,MAAM,IAAKkF,EAAUlF,EAAU,MAAM,IAAKwJ,CAAM,CAAC,EAE1G,GAAG,CACD,OAAO,GAAI,CACT,KAAKtE,IAAWlF,EAAU,MAAM,IAC9BmF,EAAmBF,EAAa,oBAAoBtD,EAAMuD,CAAQ,GAAK,KACvEtD,EAAQ,IAAI,sBAAuB,CAACD,EAAMuD,EAAUC,CAAgB,CAAC,EACrE,MAAMuQ,EAAS,cAAcvQ,EAAkBwH,EAAKoJ,EAASvM,CAAM,EAEnE,MACF,KAAKtE,IAAWlF,EAAU,OAAO,IAC/BmF,EAAmBF,EAAa,oBAAoBtD,EAAMuD,CAAQ,GAAK,KACvE,MAAMwQ,EAAS,cAAcvQ,EAAkBwH,EAAKoJ,EAASvM,CAAM,EAEnE,MACF,KAAKtE,IAAWlF,EAAU,KAAK,KACtBkF,IAAWlF,EAAU,MAAM,KAClCmF,EAAmB,KACnB,MAAMuQ,EAAS,mBAAmBxQ,EAAUyH,EAAKoJ,EAASvM,CAAM,EAEhE,MACF,KAAKtE,IAAWlF,EAAU,KAAK,IAC7BmF,EAAmBF,EAAa,oBAAoBtD,EAAMuD,CAAQ,GAAK,KACvE,MAAMwQ,EAAS,YAAYvQ,EAAkBwH,EAAKoJ,EAASvM,CAAM,EAEjE,MACF,KAAKtE,IAAWlF,EAAU,OAAO,IAC/BmF,EAAmB,KACnB,MAAMuQ,EAAS,kBAAkBlM,EAAQmD,EAAKvJ,EAAY2S,CAAO,EAEjE,MACF,QACEnU,EAAQ,IAAI,oBAAoB,CAACsD,CAAQ,CAAC,CAE7C,CACF,OAAMgB,EAAE,CACP,OAAAtE,EAAQ,MAAM,8BAA+B,CAACsE,CAAC,EAAG,CAAE,GAAG,GAAO,QAAQ,GAAM,UAAU,EAAO,CAAA,EAC7F,GAAG,cAAc,KAAK,kCAAkC,EACjD,EACR,CACD,MAAO,EACR,GAUD3D,EA7FWmT,EA6FJ,gBAAiB,MAAMvQ,EAAkBwH,EAAKoJ,EAASvM,IAAW,CACvE,IAAIyM,EACJ,GAAG,CAAC9Q,EAAmB,MAAM,IAAI,MAAM,+BAA+B,EAGtEqE,EAAO,KAAK,MAAM,MAAQ,CAAE,UAAW,IACvCA,EAAO,KAAK,MAAM,MAAM,QAAU5I,EAAY,qBAAqB,CAAC,KAAM4I,EAAO,QAAQ,IAAI,CAAC,EAC9FA,EAAO,KAAK,MAAM,MAAM,KAAO,CAAE,KAAMpJ,EAAW,QAOlDwB,EAAQ,IAAI,gBAAiB,CAAC4H,EAAQrE,CAAgB,CAAC,EAEvD,IAAI+Q,EAAgB,MAAM/Q,EAAiB,WAAWqE,EAAO,KAAMA,EAAO,OAAQ,CAChF,OAAQ,GACR,KAAM,CACJ,GAAGA,EAAO,OACX,CACP,CAAK,EACD,GAAG0M,EAAc,OAAS,EAAI,OAG9BR,EAAS,aAAaQ,EAAc,CAAC,EAAGvJ,EAAI,MAAM,CAAC,CAAC,EAGpD,MAAMwJ,EAAchR,EAAiB,SAAS,MAAM,SACpDA,EAAiB,SAAS,MAAM,SAAW,WAAWjF,CAAY,iCAGlE+V,EAAe,MAAMhR,EAAa,SAASE,EAAkBqE,EAAO,KAAMA,EAAO,OAAQ,CACvF,OAAQ,GACR,KAAM,CACJ,QAASmD,EAAI,QACb,MAAOuJ,EACP,KAAM1M,EAAO,QAAQ,KACrB,QAASA,EAAO,QAAQ,QACxB,OAAQ,kCAAkCrE,EAAiB,KAAK,IAAI,gCACjCwH,EAAI,MAAM,cAAc,EAAE,IAAI,QAAQ,IAAK,EAAE,CAAC,KAAKA,EAAI,MAAM,cAAc,EAAE,GAAG,UACnH,MAAO,CACL,MAAOnD,EAAO,KAAK,MAAM,MACzB,CAACtJ,CAAY,EAAG,CACd,UAAW,GACX,SAAU6V,EAAQ,SAClB,IAAKpJ,EAAI,MAAM,cAAc,EAAE,IAC/B,OAAQ,kCAAkCxH,EAAiB,KAAK,IAAI,gCACrCwH,EAAI,MAAM,cAAc,EAAE,IAAI,QAAQ,IAAK,EAAE,CAAC,KAAKA,EAAI,MAAM,cAAc,EAAE,GAAG,SAChH,CACF,CACF,CACP,CAAK,EACDsJ,EAAa,QAAQ,MAAQC,EAC7BD,EAAa,QAAQ,MAAM,MAAM,QAAUrV,EAAY,qBAAqB,CAAC,KAAM4I,EAAO,QAAQ,IAAI,CAAC,EACvGyM,EAAa,QAAQ,MAAQA,EAAa,QAAQ,OAAS,GAE3DrU,EAAQ,IAAI,gBAAiB,CAACqU,EAAczM,EAAO,QAASrE,EAAiB,QAAQ,CAAC,EAEtF,MAAMgM,GAAc,OAAO8E,EAAa,QAAS,CAAC,SAAUF,EAAQ,QAAQ,CAAE,EAK9E5Q,EAAiB,SAAS,MAAM,SAAWgR,CAC5C,GAWD5T,EAzKWmT,EAyKJ,gBAAgB,MAAMvQ,EAAkBwH,EAAKoJ,EAASvM,IAAW,CACtE,IAAIyM,EACJ,GAAG,CAAC9Q,EACF,MAAM,IAAI,MAAM,+BAA+B,EAG7CA,EAAiB,SAEnB8Q,EAAe,MAAMhR,EAAa,SAASE,EAAkBqE,EAAO,KAAMA,EAAO,OAAQ,CACvF,OAAQ,EAChB,CAAO,EACD,MAAM2H,GAAc,OAAO8E,EAAa,QAAS,CAAC,SAAUF,EAAQ,QAAQ,CAAE,GAEhFnU,EAAQ,IAAI,gBAAiB,CAAC4H,EAAQrE,CAAgB,CAAC,EAEvD,IAAI+Q,EAAgB,MAAM/Q,EAAiB,WAAWqE,EAAO,KAAMA,EAAO,OAAQ,CAChF,OAAQ,EACd,CAAK,EAEE0M,EAAc,OAAS,IAC1BR,EAAS,aAAaQ,EAAc,CAAC,EAAGvJ,EAAI,MAAM,CAAC,CAAC,EAEhDsJ,IACFA,EAAe,CAAE,QAASzM,EAAO,OAAS,GAG5CyM,EAAa,QAAQ,MAAQC,EAC7BD,EAAa,QAAQ,MAAQA,EAAa,QAAQ,OAAS,GAC3DA,EAAa,QAAQ,MAAM,MAAQ,CACjC,UAAW,GACX,UAAW,EACZ,EAEDzM,EAAO,KAAK,MAAM,MAAM,QAAU5I,EAAY,qBAAqB,CAAC,KAAM4I,EAAO,QAAQ,IAAI,CAAC,EAC9FA,EAAO,KAAK,MAAM,MAAM,KAAO,CAAE,KAAMpJ,EAAW,QAClDoJ,EAAO,QAAQ,MAAQA,EAAO,KAAK,MACnCA,EAAO,QAAQ,MAAQ,CACrB,GAAGA,EAAO,QACV,MAAOA,EAAO,KAAK,MAAM,MACzB,MAAOA,EAAO,KAAK,MAAM,KAC/B,EAGI,MAAM0M,EAAc,CAAC,EAAE,UAAU1M,EAAO,QAAS,CAAC,SAAUuM,EAAQ,QAAQ,CAAE,EAE1E5Q,EAAiB,QACnBqE,EAAO,QAAQ,KAAK,QAAQ,QAAQ5G,GAAS,CAE3CA,EAAM,QAAQ,CAAC,cAAe,EAAK,CAAC,CAE5C,CAAO,EAEH,WAAW,IAAM,CACfhC,EAAY,sBAAsBuE,EAAiB,IAAI,CACxD,EAAE,GAAI,EACR,GAYD5C,EA5OWmT,EA4OJ,qBAAqB,MAAMU,EAAUzJ,EAAKoJ,EAASvM,IAAW,CACnE,MAAM6M,EAAUzV,EAAY,kBAAkB+L,EAAI,MAAM,cAAc,EAAE,MAAM,EAC9E,IAAI2J,EAEJ9M,EAAO,KAAK,MAAM,MAAM,KAAO,CAC7B,KAAM4M,IAAWpW,EAAU,MAAM,IAAM,UAAY,MACzD,EAEOqW,IACD7M,EAAO,KAAK,MAAM,MAAM,KAAO,CAC7B,KAAM4M,IAAWpW,EAAU,MAAM,IAAMI,EAAW,aAAeA,EAAW,YAC5E,QAASiW,EAAQ,MACzB,GAEI7M,EAAO,QAAQ,MAAQ,CAErB,MAAOA,EAAO,KAAK,MAAM,MACzB,MAAOA,EAAO,KAAK,MAAM,KAC/B,EAGO4M,IAAWpW,EAAU,KAAK,IAC3BsW,EAAY,MAAMP,EAAQ,MAAM,gBAAgB,CAAE,QAASM,GAAA,YAAAA,EAAS,MAAQ,EAAE7M,EAAO,OAAQ,CAAE,OAAQ,EAAO,CAAA,EACvG4M,IAAWpW,EAAU,MAAM,MAClCsW,EAAY,MAAMP,EAAQ,MAAM,iBAAiB,CAAE,QAASM,GAAA,YAAAA,EAAS,MAAQ,EAAE7M,EAAO,OAAQ,CAAE,OAAQ,EAAO,CAAA,EAC/G5H,EAAQ,IAAI,qBAAsB,CAAE0U,EAAW9M,EAAO,OAAO,CAAE,GAG9D,EAAA8M,EAAU,OAAS,KAGtBZ,EAAS,aAAaY,EAAU,CAAC,EAAG3J,EAAI,MAAM,CAAC,CAAC,EAGhD,MAAM2J,EAAU,CAAC,EAAE,UAAU9M,EAAO,QAAS,CAAC,SAAUuM,EAAQ,QAAQ,CAAE,EAC3E,GASDxT,EAxRWmT,EAwRJ,cAAc,MAAMvQ,EAAkBwH,EAAKoJ,EAASvM,IAAW,CACpE,IAAIyM,EACJ,GAAG,CAAC9Q,EACF,MAAM,IAAI,MAAM,+BAA+B,EAGjD8Q,EAAe,MAAMhR,EAAa,SAASE,EAAkBqE,EAAO,KAAMA,EAAO,OAAQ,CACvF,OAAQ,EACd,CAAK,EACD5H,EAAQ,IAAI,WAAY,CAACqU,CAAY,CAAC,EACtC,MAAM9E,GAAc,OAAO8E,EAAa,QAAS,CAAC,SAAUF,EAAQ,QAAQ,CAAE,EAE9E,IAAIG,EAAgB,MAAM/Q,EAAiB,WAAWqE,EAAO,KAAMA,EAAO,OAAQ,CAChF,OAAQ,GAAO,KAAM,CAAE,MAAOA,EAAO,QAAQ,KAAO,CAC1D,CAAK,EAEE0M,EAAc,OAAS,IAC1BR,EAAS,aAAaQ,EAAc,CAAC,EAAGvJ,EAAI,MAAM,CAAC,CAAC,EAEhDsJ,IACFA,EAAe,CAAE,QAASzM,EAAO,OAAS,GAG5CyM,EAAa,QAAQ,MAAQC,EAC7BD,EAAa,QAAQ,MAAQA,EAAa,QAAQ,OAAS,GAC3DA,EAAa,QAAQ,MAAM,MAAQ,CACjC,UAAW,GACX,UAAW,EACZ,EAGDzM,EAAO,KAAK,MAAM,MAAM,KAAO,CAAE,KAAMpJ,EAAW,SAClDoJ,EAAO,KAAK,MAAM,MAAM,QAAU5I,EAAY,qBAAqB,CAAC,KAAM4I,EAAO,QAAQ,IAAI,CAAC,EAE9FA,EAAO,QAAQ,MAAQ,CACrB,GAAGA,EAAO,QACV,MAAOA,EAAO,KAAK,MAAM,MACzB,MAAOA,EAAO,KAAK,MAAM,KAC/B,EAEI,MAAM0M,EAAc,CAAC,EAAE,UAAU1M,EAAO,QAAS,CAAC,SAAUuM,EAAQ,QAAQ,CAAE,EAC/E,GAMDxT,EAvUWmT,EAuUJ,oBAAoB,MAAMlM,EAAQmD,EAAKvJ,EAAY2S,IAAY,CAEpEvM,EAAO,QAAU,CACf,GAAGA,EAAO,QACV,MAAO,CACL,GAAGA,EAAO,KAAK,MAAM,KAKtB,EACD,MAAOA,EAAO,KAAK,MAAM,KAC/B,EAGI,MAAMmD,EAAI,MAAM,CAAC,EAAE,UAAUnD,EAAO,QAAS,CAAE,GAAGuM,CAAO,CAAE,CAC5D,GAvVI,IAAMQ,EAANb,ECHA,MAAMc,EAAN,MAAMA,CAAW,CA8GxB,EA7GIjU,EADSiU,EACF,UAQPjU,EATSiU,EASF,aAAcC,GAAiB,CAClC,MAAM,KAAKjW,GAAa,MAAO,IAAM,CAInC,GAHAoB,EAAQ,IAAI,kCAAkC,EAG1C,OAAO,UAAc,IAAa,CACpCA,EAAQ,MAAM,gFAAgF,EAC9F,MACD,CAED,GAAI,CAEF4U,EAAW,OAAS,UAAU,eAAevW,CAAS,EAGlDwW,GACFA,IAGF7U,EAAQ,IAAI,iCAAkC,CAAC4U,EAAW,MAAM,CAAC,CAClE,OAAQ,EAAG,CACR5U,EAAQ,IAAI,6BAA8B,CAAC,CAC9C,CACX,CAAS,CACJ,GAQDW,EAzCSiU,EAyCF,eAAe,CAAC3T,EAAM6T,IAAS,CAC9BF,EAAW,QACbA,EAAW,OAAO,SAAS3T,EAAM6T,CAAI,EACrC9U,EAAQ,IAAI,mCAAoC,CAAC4U,EAAW,OAAQ3T,CAAI,CAAC,GAEzEjB,EAAQ,IAAI,oEAAqE,CAAC4U,EAAW,OAAQ3T,CAAI,CAAC,CAE/G,GAQDN,EAxDSiU,EAwDF,cAAc,CAAC/S,EAAOkT,IAAa,CACxC/U,EAAQ,IAAI,2BAA4B,CAAC6B,CAAK,CAAC,EAC3CkT,GACAA,GAEL,GASDpU,EAtESiU,EAsEF,WAAW,MAAOI,KAAYC,IAAe,CAClD,GAAI,CAACL,EAAW,OAAQ,CACpB5U,EAAQ,IAAI,4DAA4D,EACxE,MACH,CACD,OAAO,MAAM4U,EAAW,OAAO,YAAYI,EAAS,GAAGC,CAAU,CAClE,GASDtU,EArFSiU,EAqFF,aAAa,MAAOI,EAAStB,KAAWuB,IAAe,CAC5D,GAAI,CAACL,EAAW,OAAQ,CACpB5U,EAAQ,IAAI,8DAA8D,EAC1E,MACH,CACD,MAAMkV,EAAO,MAAMN,EAAW,OAAO,cAAcI,EAAStB,EAAQ,GAAGuB,CAAU,EACjF,OAAAjV,EAAQ,IAAI,iCAAkC,CAACkV,CAAI,CAAC,EAC7CA,CAER,GASDvU,EAvGSiU,EAuGF,aAAa,MAAOI,KAAYC,IAAe,CAClD,GAAI,CAACL,EAAW,OAAQ,CACpB5U,EAAQ,IAAI,sEAAsE,EAClF,MACH,CACD,OAAO,MAAM4U,EAAW,OAAO,mBAAmBI,EAAS,GAAGC,CAAU,CAC3E,GA7GE,IAAME,EAANP,ECKA,MAAMQ,EAAN,MAAMA,CAAK,CAIhB,OAAO,MAAM,CACXA,EAAK,kBAAiB,EACtBA,EAAK,cAAa,CACnB,CAED,OAAO,eAAe,CACpBD,EAAW,WAAW,IAAM,CAC1BnV,EAAQ,IAAI,uCAAwC,CAACmV,EAAW,MAAM,CAAC,CAC7E,CAAK,EACD,MAAM,KAAKzW,EAAW,KAAK,IAAI,CAC7B0W,EAAK,SAAWpW,EAAY,WAAW,UAAU,EACjDgB,EAAQ,IAAI,oBAAqB,CAAE,EAAE,EAAI,EAEzCoV,EAAK,sBAAqB,EAC1BA,EAAK,kBAAiB,EACtBA,EAAK,kBAAiB,EACtBA,EAAK,sBAAqB,CAChC,CAAK,EAED,MAAM,KAAK1W,EAAW,MAAO,IAAM,CAEjC,GAAI,CAAC,KAAK,OAAQ,CAChB,GAAG,cAAc,MAAM,+EAAgF,CAAE,UAAW,EAAI,CAAE,EAC1HsB,EAAQ,MAAM,6CAA6C,EAC3D,MACD,CAEDE,EAAa,iBAAgB,EAC7BA,EAAa,qBAAoB,EACjCkV,EAAK,uBAAsB,CACjC,CAAK,EAED,MAAM,GAAG1W,EAAW,sBAAuB,IAAM,CAC/CwB,EAAa,qBAAoB,CACvC,CAAK,CACF,CAKD,OAAO,wBAAwB,CAC7BiV,EAAW,aAAa,UAAWR,EAAS,iBAAiB,CAC9D,CAKD,OAAO,uBAAuB,CAC5B,MAAM,GAAGhW,EAAY,iBAAkB0W,EAAgB,EACvD,MAAM,GAAG1W,EAAY,kBAAmB2W,EAAiB,CAC1D,CAKD,OAAO,mBAAmB,CACxB,MAAM,GAAG3W,EAAY,eAAgB4W,EAAY,EACjD,MAAM,GAAG5W,EAAY,eAAgB6W,EAAY,EACjD,MAAM,GAAG7W,EAAY,YAAa8W,EAAS,EAC3C,MAAM,GAAG9W,EAAY,mBAAoB+W,EAAe,EACxD,MAAM,GAAG/W,EAAY,mBAAoBgX,EAAe,EACxD,MAAM,GAAGhX,EAAY,sBAAuBiX,EAAoB,CACjE,CAKD,OAAO,mBAAmB,CACxB,MAAM,GAAGjX,EAAY,oBAAqBkX,EAAmB,EAC7D,MAAM,GAAGnX,EAAW,wBAAyBoX,EAAsB,EACnE,MAAM,GAAGpX,EAAW,oBAAqBqX,EAAmB,CAC7D,CAKD,OAAO,uBAAuB,CAC5B,MAAM,GAAGrX,EAAW,0BAA2BsX,EAAiB,CACjE,CAED,OAAO,mBAAmB,CAExB,OAAO,iBAAiB,UAAY9M,GAAU,CAC5C,MAAM+M,EAAa/M,EAAM,IACXkM,EAAK,YAAY,QAAQa,CAAU,EAEtC,GACTb,EAAK,YAAY,KAAKa,CAAU,CAGxC,CAAK,EAGD,OAAO,iBAAiB,QAAU/M,GAAU,CAC1C,MAAMgN,EAAchN,EAAM,IACpBL,EAAQuM,EAAK,YAAY,QAAQc,CAAW,EAE/CrN,GAAS,GACVuM,EAAK,YAAY,OAAOvM,EAAM,CAAC,CAGvC,CAAK,CACF,CAEH,EA3GElI,EADWyU,EACJ,cAAc,CAAA,GACrBzU,EAFWyU,EAEJ,WAAW,IAFb,IAAMlB,EAANkB,EAsHP,MAAMC,GAAmB,MACvBxR,EAAUM,EAAaC,EAAc+R,KAYrCnW,EAAQ,IAAIrB,EAAY,iBAAkB,CAAEwF,EAAaC,EAAc+R,EAAWjC,EAAK,WAAW,CAAE,EAE7F,IAUHoB,GAAoB,MACxBzR,EAAUM,EAAa+N,KAEvBlS,EAAQ,IAAIrB,EAAY,kBAAmB,CAACkF,EAAUM,EAAa+N,CAAM,CAAC,EACnE,IAWH4D,GAAyB,CAACnT,EAAawT,EAAW1T,EAASiR,IAAW,CpB1KrE,IAAAlU,EAAAsB,EAAA+B,EAAAC,EAAAC,EoB2KL,IAAIqT,EAAU,GACV7V,EAAO+C,EAAU/B,EAAQxB,EAAMsW,EAAY,GAE/C,MAAMtL,EAAM,CAAE,GAAGpI,GAQjB,GAPAW,EAAWtE,EAAY,WAAW,cAAc,KAAIQ,EAAAmD,EAAY,QAAQ,eAAe,KAAK,IAAxC,YAAAnD,EAA2C,gBAAiB,GAChH6W,EAAc1T,EAAY,QAAQrE,EAAc,WAAW,GAAK,GAEhE0B,EAAQ,IAAItB,EAAW,wBAAyB,CAC9C4E,EAAUX,EAAa,CAAC,GAAGwT,CAAS,EAAG1T,CAC3C,CAAG,EAEEa,GAAY,CAAC+S,EAId,GAHA9V,EAAQ4V,EAAU,OAAS,KAAK,OAAO,IAAIA,EAAU,QAAQ,KAAK,GAAK,KACvE5U,IAAUsB,GAAA/B,EAAAqV,EAAU,QAAV,YAAArV,EAAkB,kBAAlB,YAAA+B,EAAoC,SAAa,GAExDtC,EAAM,CACP6V,EAAU,GACVrL,EAAI,MAAQ,CACV,GAAGA,EAAI,MACP,GAAGoL,EAAU,KACd,EACEpL,EAAI,MAAMzM,CAAY,IACvByM,EAAI,MAAMzM,CAAY,EAAE,UAAY,GACpC+X,EAAc,IAEhB,MAAMC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAYH,EAAU,OACjC,IAAI3U,GAAasB,EAAAwT,GAAA,YAAAA,EAAY,cAAc,sBAA1B,YAAAxT,EAA+C,UAAU,QAAQ,IAAI,IAgBtF,GAdA/C,EAAOyB,EAAaxC,EAAY,kBAAkBmX,EAAU,QAAQ,MAAO5U,EAAQC,CAAU,EAAI,KAc9F,CAACzB,IACAuD,IAAalF,EAAU,MAAM,KAC7BkF,IAAalF,EAAU,OAAO,KAC9BkF,IAAalF,EAAU,KAAK,KAC9B,OAAA4B,EAAQ,MAAM,sCAAuC,CAACsD,EAAU9B,EAAYjB,EAAM,KAAK,CAAC,EACjF,GACJ,CAEHwK,EAAI,MAAQA,EAAI,MAAM,IAAItF,GAAQ,KAAK,UAAUA,EAAK,OAAM,CAAE,CAAC,EAC/D,MAAMxG,EAAOD,EAAY,kBAAiB+D,EAAAgI,EAAI,UAAJ,YAAAhI,EAAa,KAAK,EACtDwT,EAAkBrW,EAAa,IAAInB,EAAS,iBAAiB,GAAG,GAAK,EAE3EiB,EAAQ,IAAI,kBAAmB,CAACE,EAAa,IAAInB,EAAS,iBAAiB,GAAG,CAAC,CAAC,EAC7EE,GAAQsX,EACTpB,EAAW,WAAW,UAAWlW,EAAK,GAAIqE,EAAU/B,EAAQC,EAAYuJ,EAAKoL,CAAS,EAEtFxB,EAAS,kBAAkBrR,EAAU/B,EAAQC,EAAYuJ,EAAKoL,CAAS,CAG1E,CACP,KACM,QAAAnW,EAAQ,KAAK,gDAAgD,EACtD,GAIX,MAAO,CAACoW,GAAWC,CACrB,EAEMN,GAAsB,CAACpT,EAAaF,EAASiR,IAAW,CAC5D1T,EAAQ,IAAItB,EAAW,oBAAoB,CAACiE,EAAaF,EAASiR,CAAM,CAAC,CAC3E,EAOMmC,GAAsB,CAAClT,EAAaC,IAAS,CACjD5C,EAAQ,IAAIrB,EAAY,oBAAoB,CAACgE,EAAaC,CAAI,CAAC,EAE/DF,GAAS,WAAWC,EAAaC,CAAI,CACvC,EAEM6S,GAAY,CAACe,EAAYpS,EAAcC,IAAkB,CAC7DrE,EAAQ,IAAIrB,EAAY,YAAa,CAAC6X,EAAYpS,EAAcC,CAAa,CAAC,EAG9ED,EAAa,UAAYuQ,EAAS,iBAAiBvQ,EAAa,UAAWoS,CAAU,CAGvF,EAEMZ,GAAuB,CAACY,EAAYpS,EAAcC,IAAkB,CACxErE,EAAQ,IAAIrB,EAAY,sBAAuB,CAAC6X,EAAYpS,EAAcC,CAAa,CAAC,CAG1F,EASMqR,GAAkB,CACtB9N,EAAQxD,EAAcH,KAEtBjE,EAAQ,IAAIrB,EAAY,mBAAoB,CAACsF,EAASG,EAAcwD,CAAM,CAAC,EAEpE,IAUH+N,GAAkB,CACtB/N,EAAQxD,EAAcH,KAEtBjE,EAAQ,IAAIrB,EAAY,mBAAoB,CAACiJ,EAAQxD,EAAcH,EAASiQ,EAAK,WAAW,CAAC,EAMtF,IAGHsB,GAAe,CACnB5N,EAAQxD,EAAcH,IACpB,CACFjE,EAAQ,IAAIrB,EAAY,eAAgB,CAAC,IAAI,CAAC,CAEhD,EAOM4W,GAAe,MAAMxQ,EAAO1C,IAAS,CACzCrC,EAAQ,IAAIrB,EAAY,eAAgB,CAACoG,EAAO1C,CAAI,CAAC,CACvD,EAKM2T,GAAoB,CAAC5I,EAAU3K,IAAY,CpBtU1C,IAAAjD,EoByUL,GAAG,CAAC4N,EAAS,QAAU,OAEvB,MAAMqJ,EAAoBvW,EAAa,IAAI,sBAAsB,EACjE,IAAIwW,EAAiB,EAErB,OAAOD,EAAiB,CACtB,IAAK,GACHC,EAAiB,EAAG,MACtB,IAAK,GACHA,EAAiB,EAAG,MACtB,QACE,MACH,EAEDlX,EAAA,OAAO,OAAO,WAAW,CAAC,IAA1B,MAAAA,EAA6B,UAAU,GAAO,CAAE,cAAe,EAAI,GACnE,QAAQwB,KAAS,OAAO,OAAO,WAC1BA,EAAM,SAAS,aAAe0V,GAAkBtJ,EAAS,MAAM,SAASpM,EAAM,OAAO,EAAEoM,EAAS,EAAEpM,EAAM,OAAO,EAAEoM,EAAS,CAAC,GAC5HpM,EAAM,UAAU,CAACA,EAAM,WAAY,CAAE,cAAe,EAAK,CAAE,CAGjE,ECzVAkT,EAAK,KAAM"}
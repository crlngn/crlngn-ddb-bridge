{"version":3,"file":"module.js","sources":["../../src/constants/DDBGL.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/constants/Settings.mjs","../../src/components/LogUtil.mjs","../../src/components/GeneralUtil.mjs","../../src/components/SettingsUtil.mjs","../../src/components/ChatUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/SocketUtil.mjs","../../src/components/RollUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const DDBGL_CLS = {\n  toHit: { prop: \"toHit\", cls: \"to hit\", actionType: \"attack\", rollType: \"attack\" },\n  damage: { prop: \"damage\", cls: \"damage\", actionType: \"damage\", rollType: \"damage\" },\n  heal: { prop: \"heal\", cls: \"heal\", actionType: \"heal\", rollType: \"heal\" },\n  save: { prop: \"save\", cls: \"save\", actionType: \"save\", rollType: \"ability\" },\n  check: { prop: \"check\", cls: \"check\", actionType: \"check\", rollType: \"ability\" },\n  custom: { prop: \"custom\", cls: \"roll\", actionType: \"roll\", rollType: \"custom\" },\n  cast: { prop: \"cast\", cls: \"cast\", actionType: \"cast\", rollType: \"cast\" }\n}\n","export const MODULE_ID = \"crlngn-ddb-bridge\";\nexport const MODULE_TITLE = \"DDB Gamelog Tweaks\";\nexport const MODULE_SHORT = \"crlngn-ddb-bridge\";\nexport const DEBUG_TAG = [\n  `%cDDB Gamelog Tweaks`,\n  `color: #003377; font-weight: bold;`,\n  `|`,\n];\n\nexport const ACTIVITY_TYPES = {\n  attack: 'attack'\n}\n\nexport const ROLL_TYPES = {\n  abilityCheck: \"ability\",\n  abilitySave: \"save\",\n  attack: \"attack\",\n  check: \"check\",\n  concentration: \"concentration\",\n  damage: \"damage\",\n  deathSave: \"death\",\n  formula: \"formula\",\n  healing: \"heal\",\n  custom: \"roll\",\n  skillCheck: \"skill\",\n  toolCheck: \"tool\"\n}\n\nexport const CHAR_ABILITIES = [\n  { abbrev: \"str\", name: \"strength\" },\n  { abbrev: \"dex\", name: \"dexterity\" },\n  { abbrev: \"con\", name: \"constitution\" },\n  { abbrev: \"int\", name: \"intelligence\" },\n  { abbrev: \"wis\", name: \"wisdom\" },\n  { abbrev: \"cha\", name: \"charisma\" }\n]\n\nexport const CLASS_PREFIX = 'crlngn';","/**\n * Foundry Core hooks\n * https://foundryvtt.com/api/classes/client.Hooks.html\n * https://foundryvtt.com/api/modules/hookEvents.html\n * */ \nexport const HOOKS_CORE = {\n  CHAT_MESSAGE: \"chatMessage\", \n  INIT: \"init\", \n  READY: \"ready\", \n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\", \n  CREATE_CHAT_MESSAGE: \"createChatMessage\", \n  RENDER_CHAT_MESSAGE: \"renderChatMessage\" ,\n  CREATE_MEASURED_TEMPLATE: \"createMeasuredTemplate\",\n  REFRESH_MEASURED_TEMPLATE: \"refreshMeasuredTemplate\",\n  CLOSE_SETTINGS_CONFIG: \"closeSettingsConfig\",\n  RENDER_ROLL_RESOLVER: \"renderRollResolver\"\n}\n\n/**\n * Hooks for DnD5e 4.x\n * According to https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport const HOOKS_DND5E ={\n    // Rolls\n    PRE_ROLL_V2: \"dnd5e.preRollV2\",\n    PRE_ROLL_ABILITY_TEST: \"dnd5e.preRollAbilityTest\",\n    PRE_ROLL_ABILITY_SAVE: \"dnd5e.preRollAbilitySave\",\n    PRE_ROLL_SAVING_THROW: \"dnd5e.preRollSavingThrow\",\n    PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n    PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n    PRE_ROLL_CONCENTRATION: \"dnd5e.preRollConcentration\",\n    PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n    PRE_ROLL_DEATH_SAVE: \"dnd5e.preRollDeathSave\",\n    PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\", \n    PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n    PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n    PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n    PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n    PRE_ROLL_SKILL: \"dnd5e.preRollSkill\",\n    PRE_ROLL_TOOL_CHECK: \"dnd5e.preRollToolCheck\",\n    PRE_USE_ITEM: \"dnd5e.preUseItem\",\n    ROLL_ABILITY_TEST: \"dnd5e.rollAbilityTest\",\n    ROLL_ABILITY_SAVE: \"dnd5e.rollAbilitySave\",\n    ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n    ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n    ROLL_CONCENTRATION: \"dnd5e.rollConcentration\",\n    ROLL_DEATH_SAVE: \"dnd5e.rollDeathSave\",\n    ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n    ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\", \n    ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n    ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n    ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPCHitPoints\",\n    ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n    ROLL_SKILL: \"dnd5e.rollSkill\",\n    ROLL_TOOL_CHECK: \"dnd5e.rollToolCheck\",\n\n    // Rendering / Chat Messages\n    DISPLAY_CARD: \"dnd5e.preDisplayCardV2\",\n    PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n    RENDER_CHAT_MESSAGE: \"dnd5e.renderChatMessage\",\n\n    // Rest\n    PRE_LONG_REST: \"dnd5e.preLongRest\",\n    PRE_REST_COMPLETED: \"dnd5e.preRestCmpleted\",\n    PRE_SHORT_REST: \"dnd5e.preShortRest\",\n    REST_COMPLETED: \"dnd5e.restCmpleted\",\n\n    // Activities\n    ACTIVITY_CONSUMPTION: \"dnd5e.activityConsumption\",\n    POST_ACTIVITY_CONSUMPTION: \"dnd5e.postActivityConsumption\",\n    POST_CREATE_USAGE_MESSAGE: \"dnd5e.postCreateUsageMessage\",\n    POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n    PRE_ACTIVITY_CONSUMPTION: \"dnd5e.preActivityConsumption\",\n    PRE_CREATE_USAGE_MESSAGE: \"dnd5e.preCreateUsageMessage\",\n    PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n\n}\n\n/**\n * D&D Gamelog Hooks\n */\nexport const HOOKS_DDBGL = {\n  PENDING_ROLL: \"ddb-game-log.pendingRoll\",\n  FULFILLED_ROLL: \"ddb-game-log.fulfilledRoll\"\n}\n\n/**\n * Socketlib hooks\n */\nexport const HOOKS_SOCKET = {\n  READY: \"socketlib.ready\"\n}","export const SETTING_INPUT = {\n  select: \"select\", \n  checkbox: \"checkbox\"\n}\nexport const SETTING_SCOPE = {\n  client: \"client\",\n  world: \"world\"\n}\n\nexport function getSettings() { \n  return {\n    enableChatStyles: { \n      tag: \"enable-chat-styles\", \n      label: game.i18n.localize(\"CRLNGN.settings.enableChatStyles.label\"), \n      hint: game.i18n.localize(\"CRLNGN.settings.enableChatStyles.hint\"), \n      propType: Boolean, \n      inputType: SETTING_INPUT.checkbox, \n      default: true, \n      scope: SETTING_SCOPE.client, \n      config: true, \n      requiresReload: true \n    }, \n\n    ddbRollOwnership: { \n      tag: \"ddb-roll-ownership\", \n      label: game.i18n.localize(\"CRLNGN.settings.ddbRollOwnership.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.ddbRollOwnership.hint\"),\n      propType: Number,\n      choices: {\n        1: game.i18n.localize(\"CRLNGN.settings.ddbRollOwnership.choices.gm.label\"), \n        2: game.i18n.localize(\"CRLNGN.settings.ddbRollOwnership.choices.player.label\")\n      },\n      inputType: SETTING_INPUT.select,\n      default: 2,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    foundryRollModifiers: {\n      tag: \"foundry-roll-modifiers\", \n      label: game.i18n.localize(\"CRLNGN.settings.foundryRollModifiers.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.foundryRollModifiers.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    forceDDBGL: { \n      tag: \"force-ddbgl-settings\", \n      label: game.i18n.localize(\"CRLNGN.settings.forceDDBGL.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.forceDDBGL.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    removeTemplate: { \n      tag: \"remove-template\", \n      label: game.i18n.localize(\"CRLNGN.settings.removeTemplate.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.removeTemplate.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    }, \n\n    templateAutoTarget: { \n      tag: \"template-auto-target\", \n      label: game.i18n.localize(\"CRLNGN.settings.templateAutoTarget.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.templateAutoTarget.hint\"),\n      propType: Number,\n      choices: {\n        1: game.i18n.localize(\"CRLNGN.settings.templateAutoTarget.choices.all.label\"),\n        2: game.i18n.localize(\"CRLNGN.settings.templateAutoTarget.choices.notFriendly.label\"),\n        3: game.i18n.localize(\"CRLNGN.settings.templateAutoTarget.choices.none.label\"),\n      },\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    skipRollConfig: { \n      tag: \"skip-roll-config\", \n      label: game.i18n.localize(\"CRLNGN.settings.skipRollConfig.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.skipRollConfig.hint\"),\n      propType: Number,\n      choices: {\n        1: game.i18n.localize(\"CRLNGN.settings.skipRollConfig.choices.all.label\"),\n        2: game.i18n.localize(\"CRLNGN.settings.skipRollConfig.choices.ddbgl.label\")\n      },\n      inputType: SETTING_INPUT.select,\n      default: 1,\n      scope: SETTING_SCOPE.world,\n      config: true\n    },\n\n    debugMode: { \n      tag: \"debug-mode\", \n      label: game.i18n.localize(\"CRLNGN.settings.debugMode.label\"),\n      hint: game.i18n.localize(\"CRLNGN.settings.debugMode.hint\"),\n      propType: Boolean,\n      inputType: SETTING_INPUT.checkbox,\n      default: true,\n      scope: SETTING_SCOPE.client,\n      config: true\n    },\n  }\n}","import { DEBUG_TAG } from \"../constants/General.mjs\";\n\nexport class LogUtil {\n  static debugOn = false;\n  /**\n   * Outputs information on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static log(ref=\"\", data=[], bypassSettings=false){\n    try{\n      const debugSetting = LogUtil.debugOn;\n      const isDebugModeOn = bypassSettings || debugSetting;\n      if(!isDebugModeOn){ return };\n\n      console.log(...DEBUG_TAG, ref, ...data);\n    }catch(e){\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n  }\n\n  /**\n   * Outputs information on console, adding module name and reference\n   * @param {string} ref - Reference information to log after module name\n   * @param {any[]} data - data to log on console\n   */\n  static warn(ref=\"\", data=[]){\n    console.warn(...DEBUG_TAG, ref, ...data);\n  }\n\n  /**\n   * Logs an error on the console and/or ui notification\n   * @param {string} ref - Reference string for the error. \n   * @param {any[]} data - data to log on console\n   * @param {object} options - display options for the error\n   */\n  static error(ref=\"\", data=[], options = { ui:false, console:true, permanent:false }) {\n    console.log(...DEBUG_TAG, ref, data, options);\n    if(options.ui){\n        // \n        ui.notifications?.error(ref, { permanent: options.permanent });\n    }\n    if(options.console) console.error(...DEBUG_TAG, ref, ...data);\n  }\n}\n\n","import { CHAR_ABILITIES } from \"../constants/General.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @param {User5e} user\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let gm = game.users.find(us=>us.isGM===true);\n    let targetTokens = user.targets || gm.targets; // || canvas.tokens?.controlled;\n\n    return new Set([...targetTokens]);\n  }\n\n  static getClientTargets = () => {\n    if (!game.user) return [];\n\n    // Convert the Set of targets to an array\n    const selectedTargets = Array.from(game.user.targets);//.filter(target => target.actor);\n\n    LogUtil.log(\"Selected Targets\", [ \n      game.user.id, \n      selectedTargets, \n      selectedTargets.filter(target => target.actor) \n    ]);\n    return selectedTargets;\n  };\n\n\n\n  /**\n  * Grab the targeted tokens and return relevant information for hit calculation\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors = () => {\n    const targets = new Map();\n    for ( const token of game.user.targets ) {\n      const { name } = token;\n      const { img, system, uuid, statuses } = token.actor ?? {};\n      if ( uuid ) {\n        const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n        targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n      }\n    }\n    return Array.from(targets.values());\n  }\n\n  /**\n   * \n   * @param {String} itemUuid \n   * @returns {Actor5e}\n   */\n  static getActorFromItem(itemUuid){\n    const actorId = itemUuid.split(\".\")[1];\n    const actor = game.actors.get(actorId);\n\n    return actor;\n  }\n\n  static findItemFromActor = (actorId, itemId, actionName) => {\n    const actor = game.actors.get(actorId);\n    LogUtil.log(\"findItemFromActor\", [itemId, actionName]);\n    if(!actor) return null;\n\n    let item = itemId ? actor.items.find((it) => {\n      return it.id === itemId; \n    }) : null; \n\n    if(!item){ \n      // match exact name\n      item = actionName ? actor.items.find((it) => it.name.toLowerCase() === actionName.toLowerCase()) : null;\n      // if no exact name, look for the name with \"(Legacy)\" tag\n      if(!item){ item = actor.items.find((it) => it.name.toLowerCase() === (actionName + \" (Legacy)\").toLowerCase()) };\n    } \n\n    return item;\n  }\n\n/**\n * Checks if module is currently installed and active\n * @param {string} moduleName \n * @returns \n */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module?.active ? true : false;\n  }\n\n  /**\n   * Grab the ability name from the flavor text of DDBGL,\n   * return an object containing also the abbreviation\n   * @param {*} flavorStr \n   * @returns \n   */\n  static parseDDBGLAbility(flavorStr){ \n    let abilityObj = null;\n    const ddbglStr = `${flavorStr}`;\n    // const test = `<span class=\"action\" data-ddb-game-log-click-handler=\"open_card\">Constitution:</span> <span class=\"rolltype save\">Save</span> <span class=\"rollkind \"></span>`;\n    CHAR_ABILITIES.forEach(ab=>{\n      if(ddbglStr.toLowerCase().includes(ab.name)){\n        abilityObj = ab;\n      };\n    })\n    return abilityObj;\n  }\n\n  /**\n   * checks roll mode to determine if its mode is blind / private\n   * @param {String} mode \n   */\n  static isPrivateRoll(mode){\n    return mode === CONST.DICE_ROLL_MODES.BLIND || mode === CONST.DICE_ROLL_MODES.PRIVATE;\n  }\n\n  /**\n   * Removes the MeasuredTemplate \n   * @param {Item5e} item \n   */\n  static removeTemplateForItem (item) {\n    LogUtil.log(\"removeTemplateForItem - A\", [item]);\n    const removeTemplateSettingOn = SettingsUtil.get(\"remove-template\");\n    LogUtil.log(\"removeTemplateForItem - B\", [removeTemplateSettingOn]);\n    if(!removeTemplateSettingOn){ return; }\n    const templates = canvas.templates.objects.children.filter(mt => {\n      return mt.document.flags.dnd5e.item === item?.uuid;\n    });\n\n    canvas.scene.deleteEmbeddedDocuments('MeasuredTemplate', templates.map(i=>i.id));\n  }\n\n  static getUserFromActor(actorId){\n    let owner;\n    if(!actorId){ return null; }\n    const actor = actorId ? game.actors.get(actorId) : null;\n    \n    let assignedPlayer = game.users.players.find(pl=>{\n      return pl.active === true && pl.character.id === actorId;\n    });\n    owner = assignedPlayer;\n\n    if(!owner){ \n      // owner = game.users.find(u => u.isGM===true); \n      game.users.players.forEach(pl => {\n        if(pl.active && actor.testUserPermission(pl, foundry.CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER, { exact:true })){\n          owner = pl;\n        }\n      });\n    }\n\n    // let gm = game.users.find(u => u.isGM===true);\n    LogUtil.log(\"getUserFromActor\", [actorId, owner]);\n\n    return owner;\n  }\n\n\n  static html(parent, selector) {\n    return parent.querySelector(selector);\n  }\n\n  /**\n   * Adds css rules to a <style> element at the body\n   * @param {string} varName \n   * @param {string} varValue \n   */\n  static addCSSVars = (varName, varValue) => {\n    let bodyStyle = document.querySelector('#crlngn-ddbgl-chat-vars');\n    \n    if (!bodyStyle) {\n      // Create style element if it doesn't exist\n      const body = document.querySelector('body');\n      bodyStyle = document.createElement('style');\n      bodyStyle.id = 'crlngn-ddbgl-chat-vars';\n      bodyStyle.textContent = 'body.crlngn-ddbgl-chat {\\n}\\n';\n      body.prepend(bodyStyle);\n    }\n    \n    // Parse the current CSS content\n    let cssText = bodyStyle.textContent;\n    \n    // Find or create the rule block\n    let ruleStart = cssText.indexOf('body.crlngn-ddbgl-chat {');\n    let ruleEnd = cssText.indexOf('}', ruleStart);\n    \n    if (ruleStart === -1) {\n      // If rule doesn't exist, create it\n      cssText = 'body.crlngn-ddbgl-chat {\\n}\\n';\n      ruleStart = 0;\n      ruleEnd = cssText.indexOf('}');\n    }\n    \n    // Get all the current declarations\n    const rulePart = cssText.substring(ruleStart + 'body.crlngn-ddbgl-chat {'.length, ruleEnd);\n    \n    // Split by semicolons to get individual declarations\n    const declarations = rulePart.split(';')\n      .map(decl => decl.trim())\n      .filter(decl => decl !== '');\n    \n    // Create a map of existing variables\n    const varsMap = {};\n    declarations.forEach(decl => {\n      const parts = decl.split(':');\n      if (parts.length >= 2) {\n        const name = parts[0].trim();\n        const value = parts.slice(1).join(':').trim(); // Handle values that might contain colons\n        if (name) varsMap[name] = value;\n      }\n    });\n    \n    // Format the value if it appears to need quotes\n    // For string values used in content properties (i18n text)\n    if (varName.includes('i18n') && \n        typeof varValue === 'string' && \n        !varValue.startsWith('\"') && \n        !varValue.startsWith(\"'\") && \n        !varValue.match(/^url\\(|^rgba?\\(|^hsla?\\(/)) {\n      varValue = `\"${varValue}\"`;\n    }\n    \n    // Update or add the new variable\n    varsMap[varName] = varValue;\n    \n    // Rebuild the rule content\n    const newRuleContent = Object.entries(varsMap)\n      .map(([name, value]) => `  ${name}: ${value};`)\n      .join('\\n');\n    \n    // Rebuild the entire CSS\n    const newCss = \n      cssText.substring(0, ruleStart) + \n      'body.crlngn-ddbgl-chat {\\n' + \n      newRuleContent + \n      '\\n}' + \n      cssText.substring(ruleEnd + 1);\n    \n    // Update the style element\n    bodyStyle.textContent = newCss;\n  };\n}\n","import { MODULE_ID, MODULE_SHORT } from \"../constants/General.mjs\";\n// import { HOOKS_CORE } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\nexport class SettingsUtil {\n  static currSettings;\n  /**\n   * Registers settings for this module\n   */\n  static registerSettings(){\n    const SETTINGS = getSettings();\n    document.querySelector(\"body\").classList.add(MODULE_SHORT); \n    \n    /* Register each of the settings defined in the SETTINGS constant */\n    const settingsList = Object.entries(SETTINGS);\n    settingsList.forEach(async(entry) => {\n      const setting = entry[1]; \n      LogUtil.log(\"Registering... \",[entry]);\n\n      const settingObj = { \n        name: setting.label,\n        hint: setting.hint,\n        default: setting.default,\n        type: setting.propType,\n        scope: setting.scope,\n        config: setting.config,\n        requiresReload: setting.requiresReload || false,\n        onChange: value => SettingsUtil.apply(setting.tag, value)\n      }\n      if(setting.choices){\n        settingObj.choices = setting.choices;\n      }\n\n      await game.settings.register(MODULE_ID, setting.tag, settingObj);\n\n      /* if the setting has never been defined, set as default value */\n      if(SettingsUtil.get(setting.tag)===undefined){\n        SettingsUtil.set(setting.tag, setting.default);\n      }\n      LogUtil.log(\"registerSettings\",[setting.tag, SettingsUtil.get(setting.tag)]);\n    });\n\n    // apply chat style settings\n    if(!SettingsUtil.get(SETTINGS.enableChatStyles.tag)){ \n      document.querySelector(\"body\").classList.remove(\"crlngn-ddbgl-chat\"); \n    }else{\n      if(game.version.startsWith(\"12\")){\n        document.querySelector(\"body\").classList.add(\"v12\");\n      }else if(game.version.startsWith(\"13\")){\n        document.querySelector(\"body\").classList.add(\"v13\");\n      }\n    }\n\n    //apply debug Settings\n    SettingsUtil.applyDebugSettings();\n    \n  }\n\n  /**\n   * Retrieve the value of a setting for this module\n   * @param {String} settingName \n   * @param {String} moduleName \n   * @returns {*} // current value of the setting\n   */\n  static get(settingName, moduleName=MODULE_ID){\n    if(!settingName){ return null; }\n\n    let setting = false;\n\n    if(moduleName===MODULE_ID){\n      setting = game.settings.get(moduleName, settingName);\n    }else{\n      const client = game.settings.storage.get(\"client\");\n      let selectedSetting = client[`${moduleName}.${settingName}`];\n      //\n      if(selectedSetting===undefined){\n        const world = game.settings.storage.get(\"world\");\n        selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n      }\n      setting = selectedSetting?.value;\n      LogUtil.log(\"GET Setting\", [selectedSetting, setting]);\n    }\n\n    return setting;\n  }\n  /**\n   * Retrieve the value of a setting for this module\n   * @param {String} settingName \n   * @param {String} moduleName \n   * @returns {*} // current value of the setting\n   */\n  static set(settingName, newValue, moduleName=MODULE_ID){ \n    if(!settingName){ return false; }\n\n    let selectedSetting = game.settings.storage.get(\"client\")[`${moduleName}.${settingName}`];\n\n    if(!selectedSetting){\n      const world = game.settings.storage.get(\"world\");\n      selectedSetting = world.getSetting(`${moduleName}.${settingName}`);\n    } \n\n    try{\n      if(selectedSetting){\n        // game.settings.set(moduleName, settingName, newValue);\n        selectedSetting.update({value: newValue});\n      }\n      LogUtil.log(\"Able to change setting\",[settingName, selectedSetting]);\n    }catch(e){\n      LogUtil.log(\"Unable to change setting\",[settingName, selectedSetting]);\n    }\n\n    return true;\n    \n  }\n\n  /**\n   * Apply current setting for Text Size\n   */\n  static apply(settingTag, value){\n    const SETTINGS = getSettings();\n    switch(settingTag){\n      case SETTINGS.forceDDBGL.tag:\n        SettingsUtil.resetGamelogSettings();\n        break;\n      case SETTINGS.debugMode.tag:\n        SettingsUtil.applyDebugSettings();\n        break;\n      default:\n        // do nothing\n    }\n  }\n\n  static resetGamelogSettings(){\n    const SETTINGS = getSettings();\n    const isDDBGLOn = GeneralUtil.isModuleOn(\"ddb-game-log\");\n    if(!isDDBGLOn){ return; }\n\n    const itemDescriptionsOn = SettingsUtil.get(\"enable_chatcards\", \"ddb-game-log\");\n    const forceSettingsOn = SettingsUtil.get(SETTINGS.forceDDBGL.tag);\n\n    LogUtil.log(\"resetGamelogSettings\", [itemDescriptionsOn, forceSettingsOn])\n\n    if(!itemDescriptionsOn && forceSettingsOn){\n      SettingsUtil.set(\"enable_chatcards\", true, \"ddb-game-log\");\n    }\n  }\n\n  static applyDebugSettings(value){\n    const SETTINGS = getSettings();\n    LogUtil.debugOn = value || SettingsUtil.get(SETTINGS.debugMode.tag);\n  }\n}\n\n","import { ROLL_TYPES } from \"../constants/General.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport \"../styles/chat.css\"\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\n\nexport class ChatUtil {\n  static chatMsgSettings;\n\n  static init(){\n    const SETTINGS = getSettings();\n    ChatUtil.chatMsgSettings = SettingsUtil.get(SETTINGS.enableChatStyles.tag);\n  }\n\n  static enrichCard(chatMessage, html){\n    // const SETTINGS = getSettings();\n    html.classList.remove('ddb-game-log-open-card');\n\n    const chatStyles = ChatUtil.chatMsgSettings;\n\n    if(chatStyles){ \n      const rollType = chatMessage.flags?.dnd5e?.activity?.type || chatMessage.flags?.dnd5e?.roll?.type || \"custom\";\n      let elem = html.get ? html.get(0) : html;\n\n      elem.classList.add('crlngn');\n      elem.classList.add(rollType);\n      LogUtil.log(\"enrichCard\", [chatStyles.borderColor, chatMessage.author?.id]); \n\n      if(chatStyles.flags?.[\"ddb-game-log\"]){\n        html.classList.add('ddbgl');\n      }\n\n      const saveButtons = elem.querySelectorAll('.card-buttons button[data-action=rollSave]');\n      if (saveButtons.length > 0) {      \n        saveButtons.forEach(button => {\n          const visibleDCSpan = button.querySelector('.visible-dc');\n          const hiddenDCSpan = button.querySelector('.hidden-dc');\n          LogUtil.log(\"enrichCard\",[visibleDCSpan, hiddenDCSpan]);\n\n          visibleDCSpan.setAttribute('data-ability', button.getAttribute('data-ability') || \"\");\n          visibleDCSpan.setAttribute('data-dc', button.getAttribute('data-dc') || \"\");\n          hiddenDCSpan.setAttribute('data-ability', button.getAttribute('data-ability') || \"\");\n        });\n      }\n  \n    }  \n  }\n\n  /**\n   * Makes default Foundry messages have flavor styling \n   * similar to DDB Gamelog messages\n   */\n  static formatFlavorText(flavorText, chatMessage, rollType){\n    const actor = game.actors.get(chatMessage.speaker?.actor || \"\") || null;\n    const item = actor?.items.get(chatMessage.flags?.dnd5e?.item?.id || \"\") || null;\n    let newFlavor = flavorText || \"Message\";\n    \n    if(rollType===ROLL_TYPES.attack){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){ \n        newFlavor = `<span class=\"item-name\">` + item?.name;\n        newFlavor = newFlavor + `:</span> <span class=\"tohit\">To Hit</span>`;\n      }\n    }else if(rollType===ROLL_TYPES.damage){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){\n        newFlavor = `<span class=\"item-name\">` + item?.name;\n        newFlavor = newFlavor + `:</span> <span class=\"damage\">Damage</span>`;\n      }\n    }else if(rollType===ROLL_TYPES.healing){\n      LogUtil.log(\"renderChatMessage\", [actor, item]);\n      if(item){\n        newFlavor = `<span class=\"item-name\">` + (item?.name ?? \"Action\");\n        newFlavor = newFlavor + `:</span> <span class=\"heal\">Heal</span>`;\n      }\n    }else if(flavorText.includes(\"Skill Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Skill Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(flavorText.includes(\"Ability Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Ability Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(flavorText.includes(\"Saving Throw\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Saving Throw\",`:</span> <span class=\"save\">Save</span>`);\n    }else if((rollType===\"tool\" || rollType===\"check\") && flavorText.includes(\"Check\")){\n      newFlavor = `<span class=\"item-name\">` + flavorText;\n      newFlavor = newFlavor.replace(\"Check\",`:</span> <span class=\"check\">Check</span>`);\n    }else if(item){\n      newFlavor = `<span class=\"item-name\">${item.type}</span>`;\n    }else if(!newFlavor){\n      newFlavor = `<span class=\"item-name\">Info</span>`;\n    }\n\n    return newFlavor;\n  }\n}","import { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\nexport class ActivityUtil {\n\n  /**\n   * If the item has an associated activity, return it,\n   * according to the type of roll passed from DDB Gamelog\n   * @param {*} item \n   * @param {*} ddbglCls \n   * @returns \n   */\n  static getActivityFromItem(item, ddbglCls){ \n    let selectedActivity = null;\n    if(!item){ return selectedActivity };\n\n    const activities = item.system?.activities;\n    const hasAttack = item.hasAttack;\n    const hasSave = item.hasSave;\n\n    LogUtil.log(\"getActivityFromItem\", [activities, typeof activities, Array.isArray(activities)]); \n\n    const activityByType = (type) => {\n      // const activityList = Object.values(activities);\n      const activity = activities.find(act => { \n        return act.type == type;\n      });\n      LogUtil.log(\"activityByType\", [item, type, activities.size, activity]); \n      return activity;\n    }\n\n    switch(ddbglCls){ \n      case DDBGL_CLS.toHit.cls: // attack roll\n        selectedActivity = activityByType(DDBGL_CLS.toHit.actionType);\n        break;\n      case DDBGL_CLS.damage.cls: // damage roll\n        if(hasAttack){ // damage from attack roll\n          selectedActivity = activityByType(DDBGL_CLS.toHit.actionType);\n        }else if(hasSave){ // damage from saving throw\n          selectedActivity = activityByType(DDBGL_CLS.save.actionType);\n        }else{\n          selectedActivity = activityByType(DDBGL_CLS.damage.actionType);\n        }\n        break;\n      case DDBGL_CLS.check.cls:\n        selectedActivity = activityByType(DDBGL_CLS.check.actionType);\n        break;\n      case DDBGL_CLS.save.cls:\n        selectedActivity = activityByType(DDBGL_CLS.save.actionType);\n        break;\n      case DDBGL_CLS.heal.cls:\n        selectedActivity = activityByType(DDBGL_CLS.heal.actionType);\n        break;\n      case DDBGL_CLS.cast.cls:\n        selectedActivity = activityByType(DDBGL_CLS.cast.actionType);\n        break;\n      default:\n        //\n    }\n\n    return selectedActivity ?? Array.from(activities.keys())[0] ?? null;\n  }\n\n  /**\n   * Activate this activity. \n   * Like use() from ActivityMixin in dnd5e, but it does not roll attack / damage again\n   * @param {Activity} activity\n   * @param {ActivityUseConfiguration} usage        Configuration info for the activation.\n   * @param {ActivityDialogConfiguration} dialog    Configuration info for the usage dialog.\n   * @param {ActivityMessageConfiguration} message  Configuration info for the created chat message.\n   * @returns {Promise<ActivityUsageResults|void>}  Details on the usage process if not canceled.\n   */\n  static async ddbglUse(activity, usage={}, dialog={}, message={}) {\n    if(!activity){\n      ui.notifications.error(\"No activity found\", { localize: false });\n      return;\n    }\n    if ( !activity.item.isEmbedded || activity.item.pack ) return;\n    if ( !activity.item.isOwner ) {\n      ui.notifications.error(\"DND5E.DocumentUseWarn\", { localize: true });\n      return;\n    }\n    if ( !activity.canUse ) {\n      ui.notifications.error(\"DND5E.ACTIVITY.Warning.UsageNotAllowed\", { localize: true });\n      return;\n    }\n\n    // Create an item clone to work with throughout the rest of the process\n    let item = activity.item.clone({}, { keepId: true });\n\n    const usageConfig = activity._prepareUsageConfig(usage);\n    \n    if(usageConfig.create?.measuredTemplate){\n      ui.notifications?.info(\"Click the map to place the template and see the roll. Right click to cancel\", { localize: false });\n    }\n\n    const dialogConfig = foundry.utils.mergeObject({\n      configure: true,\n      applicationClass: activity.metadata.usage.dialog\n    }, dialog);\n\n    const messageConfig = foundry.utils.mergeObject({\n      create: true,\n      data: {\n        flags: {\n          dnd5e: {\n            ...activity.messageFlags,\n            messageType: \"usage\",\n            use: {\n              effects: activity.applicableEffects?.map(e => e.id)\n            }\n          },\n          rsr5e: { processed: true, quickRoll: false }\n        }\n      },\n      hasConsumption: usageConfig.hasConsumption\n    }, message);\n\n    /**\n     * \n     * @function dnd5e.preUseActivity\n     * @memberof hookEvents\n     * @param {Activity} activity                           Activity being used.\n     * @param {ActivityUseConfiguration} usageConfig        Configuration info for the activation.\n     * @param {ActivityDialogConfiguration} dialogConfig    Configuration info for the usage dialog.\n     * @param {ActivityMessageConfiguration} messageConfig  Configuration info for the created chat message.\n     * @returns {boolean}  Explicitly return `false` to prevent activity from being used.\n     */\n    if ( Hooks.call(\"dnd5e.preUseActivity\", activity, usageConfig, dialogConfig, messageConfig) === false ) return;\n\n    // Display configuration window if necessary\n    if ( dialogConfig.configure && activity._requiresConfigurationDialog(usageConfig) ) {\n      try {\n        await dialogConfig.applicationClass.create(activity, usageConfig, dialogConfig.options);\n      } catch(err) {\n        return;\n      }\n    }\n\n    // Handle scaling\n    await activity._prepareUsageScaling(usageConfig, messageConfig, item);\n    activity = item.system.activities.get(activity.id);\n\n    // Handle consumption\n    const updates = await activity.consume(usageConfig, messageConfig);\n    if ( updates === false ) return;\n    const results = { effects: [], templates: [], updates };\n\n    // Create concentration effect & end previous effects\n    if ( usageConfig.concentration?.begin ) {\n      const effect = await item.actor.beginConcentrating(activity, { \"flags.dnd5e.scaling\": usageConfig.scaling });\n\n      if ( effect ) {\n        results.effects ??= [];\n        results.effects.push(effect);\n        foundry.utils.setProperty(messageConfig.data, \"flags.dnd5e.use.concentrationId\", effect.id);\n      }\n      if ( usageConfig.concentration?.end ) {\n        const deleted = await item.actor.endConcentration(usageConfig.concentration.end);\n        results.effects.push(...deleted);\n      }\n    }\n\n\n    // Create chat message\n    messageConfig.data.rolls = (messageConfig.data.rolls ?? []).concat(updates.rolls);\n    \n\n    // activity._finalizeMessageConfig(usageConfig, messageConfig, results);\n    results.message = await ActivityUtil.createUsageMessage(activity, messageConfig);\n\n    LogUtil.log(\"messageConfig\", [ messageConfig, results.message]);\n\n    results.message.dnd5e = messageConfig.flags?.dnd5e ?? {};\n    results.message.dnd5e.targets = GeneralUtil.getTargetDescriptors({ actorId: results.message.speaker.actor });\n    results.message.flags = {\n      ...results.message.flags, \n      rsr5e: { processed: true }\n    }\n    LogUtil.log(\"ddbglUse\", [results.message]);\n\n    // Perform any final usage steps\n    await activity._finalizeUsage(usageConfig, results); \n\n    if ( Hooks.call(\"dnd5e.postUseActivity\", activity, usageConfig, results) === false ) return results;\n\n    // Trigger any primary action provided by this activity\n    if(usageConfig.subsequentActions !== false){\n      activity._triggerSubsequentActions(usageConfig, results);\n    }\n\n    return results; \n  }\n\n  // static async use(usage={}, dialog={}, message={}) {\n  //   if ( !this.item.isEmbedded || this.item.pack ) return;\n  //   if ( !this.item.isOwner ) {\n  //     ui.notifications.error(\"DND5E.DocumentUseWarn\", { localize: true });\n  //     return;\n  //   }\n  //   if ( !this.canUse ) {\n  //     ui.notifications.error(\"DND5E.ACTIVITY.Warning.UsageNotAllowed\", { localize: true });\n  //     return;\n  //   }\n\n  //   // Create an item clone to work with throughout the rest of the process\n  //   let item = this.item.clone({}, { keepId: true });\n  //   let activity = item.system.activities.get(this.id);\n\n  //   const usageConfig = activity._prepareUsageConfig(usage);\n\n  //   const dialogConfig = foundry.utils.mergeObject({\n  //     configure: true,\n  //     applicationClass: this.metadata.usage.dialog\n  //   }, dialog);\n\n  //   const messageConfig = foundry.utils.mergeObject({\n  //     create: true,\n  //     data: {\n  //       flags: {\n  //         dnd5e: {\n  //           ...this.messageFlags,\n  //           messageType: \"usage\",\n  //           use: {\n  //             effects: this.applicableEffects?.map(e => e.id)\n  //           }\n  //         }\n  //       }\n  //     },\n  //     hasConsumption: usageConfig.hasConsumption\n  //   }, message);\n\n  //   /**\n  //    * A hook event that fires before an activity usage is configured.\n  //    * @function dnd5e.preUseActivity\n  //    * @memberof hookEvents\n  //    * @param {Activity} activity                           Activity being used.\n  //    * @param {ActivityUseConfiguration} usageConfig        Configuration info for the activation.\n  //    * @param {ActivityDialogConfiguration} dialogConfig    Configuration info for the usage dialog.\n  //    * @param {ActivityMessageConfiguration} messageConfig  Configuration info for the created chat message.\n  //    * @returns {boolean}  Explicitly return `false` to prevent activity from being used.\n  //    */\n  //   if ( Hooks.call(\"dnd5e.preUseActivity\", activity, usageConfig, dialogConfig, messageConfig) === false ) return;\n\n  //   // Display configuration window if necessary\n  //   if ( dialogConfig.configure && activity._requiresConfigurationDialog(usageConfig) ) {\n  //     try {\n  //       await dialogConfig.applicationClass.create(activity, usageConfig, dialogConfig.options);\n  //     } catch(err) {\n  //       return;\n  //     }\n  //   }\n\n  //   // Handle scaling\n  //   await activity._prepareUsageScaling(usageConfig, messageConfig, item);\n  //   activity = item.system.activities.get(this.id);\n\n  //   // Handle consumption\n  //   const updates = await activity.consume(usageConfig, messageConfig);\n  //   if ( updates === false ) return;\n  //   const results = { effects: [], templates: [], updates };\n\n  //   // Create concentration effect & end previous effects\n  //   if ( usageConfig.concentration?.begin ) {\n  //     const effect = await item.actor.beginConcentrating(activity, { \"flags.dnd5e.scaling\": usageConfig.scaling });\n  //     if ( effect ) {\n  //       results.effects ??= [];\n  //       results.effects.push(effect);\n  //       foundry.utils.setProperty(messageConfig.data, \"flags.dnd5e.use.concentrationId\", effect.id);\n  //     }\n  //     if ( usageConfig.concentration?.end ) {\n  //       const deleted = await item.actor.endConcentration(usageConfig.concentration.end);\n  //       results.effects.push(...deleted);\n  //     }\n  //   }\n\n  //   // Create chat message\n  //   activity._finalizeMessageConfig(usageConfig, messageConfig, results);\n  //   results.message = await activity._createUsageMessage(messageConfig);\n\n  //   // Perform any final usage steps\n  //   await activity._finalizeUsage(usageConfig, results);\n\n  //   /**\n  //    * A hook event that fires when an activity is activated.\n  //    * @function dnd5e.postUseActivity\n  //    * @memberof hookEvents\n  //    * @param {Activity} activity                     Activity being activated.\n  //    * @param {ActivityUseConfiguration} usageConfig  Configuration data for the activation.\n  //    * @param {ActivityUsageResults} results          Final details on the activation.\n  //    * @returns {boolean}  Explicitly return `false` to prevent any subsequent actions from being triggered.\n  //    */\n  //   if ( Hooks.call(\"dnd5e.postUseActivity\", activity, usageConfig, results) === false ) return results;\n\n  //   // Trigger any primary action provided by this activity\n  //   if ( usageConfig.subsequentActions !== false ) {\n  //     activity._triggerSubsequentActions(usageConfig, results);\n  //   }\n\n  //   return results;\n  // }\n\n  /* -------------------------------------------- */\n  /**\n   * Display a chat message for this usage.\n   * @param {Activity} activity\n   * @param {ActivityMessageConfiguration} message  Configuration for the message\n   * @returns {Promise<ChatMessage5e|object>}\n   * @protected\n   */\n  static async createUsageMessage(activity, message) {\n    let context = await activity._usageChatContext(message);\n    // context.rollMsg = message.data.rollMsg;\n    let rollData = await _buildRollData(message.data.rolls, activity);\n    context = {\n      ...context,\n      rolls: rollData\n    }\n    \n    LogUtil.log(\"createUsageMessage\", [activity.metadata.usage.chatCard, context]); \n\n    const messageConfig = foundry.utils.mergeObject({\n      rollMode: game.settings.get(\"core\", \"rollMode\"),\n      data: {\n        content: await renderTemplate(activity.metadata.usage.chatCard, context),\n        speaker: ChatMessage.getSpeaker({ actor: activity.item.actor }),\n        flags: {\n          core: { canPopout: true },\n          rsr5e: { processed: true }\n        }\n      }\n    }, message);\n\n    Hooks.callAll(\"dnd5e.preCreateUsageMessage\", activity, messageConfig);\n\n    ChatMessage.applyRollMode(messageConfig.data, messageConfig.rollMode);\n    const card = messageConfig.create === false ? messageConfig.data : await ChatMessage.create(messageConfig.data);\n\n    Hooks.callAll(\"dnd5e.postCreateUsageMessage\", activity, card);\n\n    return card;\n  }\n}\n\nconst _buildRollData = async(rolls, activity) => {\n  let rollData = [];\n\n  rollData = await Promise.all(rolls.map(async(r)=>{\n    const tooltipHtml = await r.getTooltip();\n    // Check if roll has a target and determine success/failure\n    const hasTarget = Number.isNumeric(r.options?.target);\n    const isSuccess = hasTarget && r.total >= r.options.target;\n    const isFailure = hasTarget && r.total < r.options.target;\n    \n    return {\n      ...r,\n      formula: r.formula,\n      total: r.total,\n      tooltipHtml: tooltipHtml,\n      isSuccess: isSuccess,\n      isFailure: isFailure,\n      hasTarget: hasTarget\n    }\n  }));\n  // LogUtil.log(\"_buildRollData / rollData\",[rollData]);\n\n  return rollData\n}","import { MODULE_ID } from \"../constants/General.mjs\";\nimport { HOOKS_SOCKET } from \"../constants/Hooks.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\n\n/**\n * Utility class for managing socket communication using socketlib.\n */\nexport class SocketUtil {\n  static socket;\n  static _activeExecutions = new Map();\n\n  /**\n   * Initializes the socket module and registers it with socketlib.\n   * This should be called once during FoundryVTT initialization.\n   * \n   * @param {Function} callbackFunc - Optional callback to execute after registration.\n   */\n  static initialize = (callbackFunc) => {\n    Hooks.once(HOOKS_SOCKET.READY, () => { \n      LogUtil.log(`Attempting to register module...`);\n\n      // Check if socketlib is available before registering the module\n      if (typeof socketlib === \"undefined\") {\n        LogUtil.error(\"SocketUtil Error: socketlib is not loaded. Ensure it is installed and enabled.\");\n        ui.notifications.error(game.i18n.localize(\"CRLNGN_ROLLS.notifications.socketlibMissing\"), {permanent: true});\n        return;\n      }\n\n      try { \n        // Register the module with socketlib\n        SocketUtil.socket = socketlib.registerModule(MODULE_ID);\n\n        // Execute callback function if provided\n        if (callbackFunc) {\n          callbackFunc();\n        }\n\n        LogUtil.log(`SocketUtil | Module registered`, [SocketUtil.socket]);\n      } catch (e) {\n          LogUtil.log(`Problem registering module`, [e]);\n      }\n    });\n  }\n\n  /**\n   * Registers a callback function that can be called remotely via the socket.\n   * \n   * @param {string} name - The name of the remote function.\n   * @param {Function} func - The function to be executed remotely.\n   */\n  static registerCall = (name, func) => {\n    if (SocketUtil.socket) {\n      SocketUtil.socket.register(name, func);\n      LogUtil.log(`SocketUtil - Registered callback`, [SocketUtil.socket, name]);\n    } else {\n      LogUtil.log(`SocketUtil - Failed to register callback (socket not initialized)`, [SocketUtil.socket, name]);\n    }\n  }\n\n  /**\n   * Sends a message via the socket (currently only logs it and calls a callback).\n   * \n   * @param {*} value - The message or data to send.\n   * @param {Function} callback - The callback function to execute after sending.\n   */\n  static sendMessage = (value, callback) => {\n    LogUtil.log(`SocketUtil - sendMessage`, [value]);\n    if (callback) {\n        callback();\n    }\n  }\n\n  /**\n   * Executes a function as the GM.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForGMs = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as GM.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForAllGMs(handler, ...parameters);\n  }\n\n  /**\n   * Executes a function for all connected clients.\n   * \n   * @param {Function} handler - The function to execute.\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes for all clients.\n   */\n  static execForAll = async (handler, ...parameters) => {\n    if (!SocketUtil.socket) {\n      LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute for all clients.\");\n      return;\n    }\n    return await SocketUtil.socket.executeForEveryone(handler, ...parameters);\n  }\n\n\n  /**\n   * Executes a function as the specified user.\n   * @param {Function} handler - The function to execute.\n   * @param {String} userId - the id of the user that should execute this function\n   * @param {...*} parameters - The parameters to pass to the function.\n   * @returns {Promise} A promise resolving when the function executes.\n   */\n  static execForUser = async (handler, userId, ...parameters) => {\n    if (!SocketUtil.socket) {\n        LogUtil.log(\"SocketUtil - Socket not initialized. Cannot execute as user.\");\n        return;\n    }\n\n    if(userId === game.user.id){\n      LogUtil.log(\"SocketUtil - Preventing recursive call\", [userId]);\n      return null; // Break the recursion\n    }\n    const executionKey = `${handler}-${userId}`;\n    \n    // Check if this exact execution is already in progress\n    if (SocketUtil._activeExecutions.has(executionKey)) {\n        LogUtil.log(\"SocketUtil - Preventing recursive call\", [executionKey]);\n        return null; // Break the recursion\n    }\n    // Mark this execution as active\n    SocketUtil._activeExecutions.set(executionKey, true);\n    \n    try {\n        const resp = await SocketUtil.socket.executeAsUser(handler, userId, ...parameters);\n        LogUtil.log(\"SocketUtil - Executed as user.\", [resp]);\n        return resp;\n    } catch (error) {\n        LogUtil.log(\"SocketUtil - Error executing as user\", [error]);\n        return null;\n    } finally {\n        // Always clean up, even if there was an error\n        SocketUtil._activeExecutions.delete(executionKey);\n    }\n  }\n\n  /**\n   * Serializes an object for transport, handling Roll objects properly\n   * @param {*} data - The data to serialize\n   * @returns {*} - Serialized data\n   */\n  static serializeForTransport(data) { \n    // Handle null or undefined\n    if (data == null) return data;\n    \n    // Log the original data structure\n    LogUtil.log(\"Serializing data - Original structure\", [\n      \"Keys:\", Object.keys(data || {}),\n      \"Has rolls:\", Boolean(data.rolls),\n      \"Rolls length:\", data.rolls?.length\n    ]);\n    \n    // Create a safe copy to avoid modifying the original\n    let safeData = { ...data };\n    \n    // Handle Roll objects in the rolls array\n    if (safeData.rolls && Array.isArray(safeData.rolls)) {\n      // Log roll information before serialization\n      LogUtil.log(\"Roll objects before serialization\", [\n        \"Roll count:\", safeData.rolls.length,\n        \"Roll types:\", safeData.rolls.map(r => r?.constructor?.name || typeof r)\n      ]);\n      \n      safeData.rolls = safeData.rolls.map(r => {\n        if(r instanceof Roll){\n          let serialized = r.toJSON();\n          // Log individual roll serialization\n          LogUtil.log(\"Serialized roll\", [\n            \"Original:\", r.formula,\n            \"Serialized keys:\", Object.keys(serialized)\n          ]);\n          return serialized;\n        } else {\n          return r;\n        }\n      });\n    }\n    \n    // Try to detect potential circular references\n    try {\n      JSON.stringify(safeData);\n      LogUtil.log(\"Data serialized successfully without circular references\");\n    } catch (error) {\n      LogUtil.error(\"Circular reference detected in data\", [\n        \"Error:\", error.message,\n        \"Keys with potential circular refs:\", Object.keys(safeData || {})\n      ]);\n      \n      // Log specific properties that might contain circular references\n      if (safeData.actor) LogUtil.log(\"Actor property exists\", [typeof safeData.actor]);\n      if (safeData.item) LogUtil.log(\"Item property exists\", [typeof safeData.item]);\n      if (safeData.workflow) LogUtil.log(\"Workflow property exists\", [typeof safeData.workflow]);\n      if (safeData.message) LogUtil.log(\"Message property exists\", [typeof safeData.message]);\n      if (safeData.flags) LogUtil.log(\"Flags property exists\", [typeof safeData.flags, Object.keys(safeData.flags || {})]);\n      if (safeData.speaker) LogUtil.log(\"Speaker property exists\", [typeof safeData.speaker, Object.keys(safeData.speaker || {})]);\n    }\n    \n    return safeData;\n  }\n\n  /**\n   * Deserializes data received from transport, reconstructing Roll objects\n   * @param {*} data - The serialized data\n   * @returns {*} - Deserialized data with reconstructed objects\n   */\n  static deserializeFromTransport(data) {\n    // Log the received data structure\n    LogUtil.log(\"Deserializing data - Received structure\", [\n      \"Data type:\", typeof data,\n      \"Is null/undefined:\", data == null,\n      \"Keys:\", Object.keys(data || {}),\n      \"Has rolls:\", Boolean(data?.rolls),\n      \"Rolls length:\", data?.rolls?.length\n    ]);\n    \n    let result = { ...data };\n    if (!data) return result;\n\n    if(data.rolls && data.rolls.length > 0){\n      // Log roll information before deserialization\n      LogUtil.log(\"Roll data before deserialization\", [\n        \"Roll count:\", data.rolls.length,\n        \"Roll types:\", data.rolls.map(r => typeof r)\n      ]);\n      \n      try {\n        const rolls = result.rolls.map(r => {\n          let roll = r;\n          if(typeof r === 'string'){\n            roll = Roll.fromJSON(r);\n          } else {\n            roll = Roll.fromJSON(JSON.stringify(r));\n          }\n          // Log individual roll deserialization\n          LogUtil.log(\"Deserialized roll\", [\n            \"Result formula:\", roll.formula,\n            \"Result total:\", roll.total\n          ]);\n          return roll;\n        });\n        result.rolls = [...rolls];\n      } catch (error) {\n        LogUtil.error(\"Error deserializing rolls\", [\n          \"Error:\", error.message,\n          \"Roll data:\", data.rolls\n        ]);\n      }\n    }\n    \n    return result;\n  }\n\n}\n","import { LogUtil } from \"./LogUtil.mjs\";\nimport { ActivityUtil } from  \"./ActivityUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { MODULE_SHORT, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { Main } from \"./Main.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\n\nexport class RollUtil{\n\n  // ddbglCls, itemId, actionName, msg, msgConfig\n  static streamlineDDBRoll = async (ddbglCls, itemId, actionName, message, messageData) => {\n    LogUtil.log('streamlineDDBRoll - A', [message, messageData]);\n    let msg = message;\n    let msgData = messageData;\n    \n    if(ddbglCls && !game.user.isGM){\n      msg = SocketUtil.deserializeFromTransport(message);\n    }\n\n    // Set the author\n    msgData.author = game.user;\n\n    let selectedActivity = null;\n    let user = game.user;\n    let item = actionName ? GeneralUtil.findItemFromActor(msgData.speaker.actor, itemId, actionName) : null;\n    let actor = game.actors.get(msgData.actor._id);\n    if(actor){\n      msgData.actor = actor;\n    }\n    // msg.rolls = msg.rolls.map(rollData => Roll.fromJSON(rollData));\n    \n    // const json = JSON.parse(msg);\n    LogUtil.log('streamlineDDBRoll - B', [msgData, msg, game.messages.get(msg.id || msg._id)]);\n\n    let config = {}, originalRoll = msg.rolls[0];\n\n    config.message = {\n      flavor: msg.flavor,\n      speaker: msg.speaker,\n      whisper: msg.whisper,\n      user: user,\n      blind: msg.blind || GeneralUtil.isPrivateRoll(msgData.rollMode),\n      rollMode: msgData.rollMode\n    }\n\n    config.dialog = {\n      configure: false\n    }; \n\n    config.roll = {\n      formula: originalRoll.formula,\n      consume: { resources: false, spellSlot: false },\n      user: user,\n      rolls: [msg.rolls[0]],\n      flags: {\n        ...msg.flags, \n        [MODULE_SHORT]: { processed: true },\n        dnd5e: {\n          ...msg.flags.dnd5e,\n          // messageType: \"roll\" \n        },\n        rsr5e: { processed: true, quickRoll: false }\n      }\n    };\n\n    msg.flags = config.roll.flags;\n    try{\n      switch(true){ \n        case ddbglCls===DDBGL_CLS.toHit.cls: // is attack roll\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null; \n          await RollUtil.triggerAttack(selectedActivity, msg, msgData, config);\n          \n          break; \n        case ddbglCls===DDBGL_CLS.damage.cls :\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null;\n          await RollUtil.triggerDamage(selectedActivity, msg, msgData, config);\n          \n          break; \n        case ddbglCls===DDBGL_CLS.save.cls \n              || ddbglCls===DDBGL_CLS.check.cls:\n          selectedActivity = null;\n          await RollUtil.triggerAbilityTest(ddbglCls, msg, msgData, config);\n\n          break; \n        case ddbglCls===DDBGL_CLS.heal.cls:\n          selectedActivity = ActivityUtil.getActivityFromItem(item, ddbglCls) ?? null;\n          await RollUtil.triggerHeal(selectedActivity, msg, msgData, config);\n\n          break;\n        case ddbglCls===DDBGL_CLS.custom.cls:\n          selectedActivity = null;\n          await RollUtil.triggerCustomRoll(config, msg, actionName, msgData);\n\n          break;\n        default: \n          LogUtil.log(\"streamlineDDBRoll\",[ddbglCls]);\n          // \n      } \n    }catch(e){ \n      LogUtil.error(\"Error intercepting DDB roll\", [e], { ui:false, console:true, permanent:false });\n      ui.notifications.warn(\"Could not intercept the DDB roll\");\n      return false; \n    }\n    return true;\n  } \n\n  /**\n   * If DDB Gamelog message is an attack roll, find the associated activity\n   * and roll the attack to trigger animations and automations\n   * @param {Activity} selectedActivity \n   * @param {ChatMessage} msg \n   * @param {object} msgData \n   * @returns \n   */\n  static triggerAttack  = async(selectedActivity, msg, msgData, config) => {\n    const SETTINGS = getSettings();\n    let usageResults, activityRolls, workflow;\n    let oldTemplate;\n    const isMidiOn = GeneralUtil.isModuleOn(\"midi-qol\");\n    if(!selectedActivity){ throw new Error('No associated activity found.') }\n\n    // config specific to attack rolls\n    const targets = GeneralUtil.getTargetDescriptors({user: game.user});\n    config.roll.target = targets.length === 1 ? targets[0].ac : undefined;\n    config.roll.flags.rsr5e = { processed: true  };\n    // config.roll.flags.dnd5e.targets = targets;\n    config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.attack }; \n\n    // LogUtil.log(\"triggerAttack\", [config, selectedActivity]);\n    // LogUtil.log(\"triggerAttack - isMidiOn\", [isMidiOn, selectedActivity, usageResults]);\n\n    if(isMidiOn){\n      LogUtil.log(\"MidiQOL is not supported yet\");\n      // workflow = new MidiQOL.Workflow(selectedActivity.actor, selectedActivity, msg.speaker, config.message.user.targets, { \n      //   workflowOptions: { attackRollDSN: false, damageRollDSN: false }\n      // });\n\n      // activityRolls = await selectedActivity.rollAttack({\n      //   ...config.roll,\n      //   midiOptions: {\n      //     workflowOptions: { attackRollDSN: false, damageRollDSN: false }\n      //   }\n      // }, \n      // config.dialog, \n      // { \n      //   create: false,\n      //   data: {\n      //     ...config.message \n      //   }\n      // });\n      // if(activityRolls.length < 1){ return; }\n\n      // LogUtil.log(\"triggerAttack - rolls\", [activityRolls[0], msg.rolls[0]]);\n      \n      // // copy terms from the original roll and recalculate\n      // if(SettingsUtil.get(SETTINGS.foundryRollModifiers.tag)){\n      //   activityRolls[0] = RollUtil.replaceDie(activityRolls[0], msg.rolls[0]);\n      // }else{\n      //   activityRolls[0] = RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n      // }\n\n      // LogUtil.log(\"triggerAttack - activityRolls\", [activityRolls, usageResults, workflow]);\n\n      // usageResults = await selectedActivity.use({\n      //   ...config.roll,\n      //   midiOptions: {\n      //     workflowOptions: { attackRollDSN: false }\n      //   }\n      // }, config.dialog, { \n      //   create: true,\n      //   data: { \n      //     // rollMsg: msg.content, \n      //     rolls: [activityRolls[0]],\n      //     user: config.message.user,\n      //     speaker: config.message.speaker,\n      //     flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n      //                 `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`,\n      //     // flags: {\n      //     //   rsr5e: config.roll.flags.rsr5e,\n      //     //   [MODULE_SHORT]: { \n      //     //     processed: true, \n      //     //     data: { msg, msgData },\n      //     //     rollMode: msgData.rollMode,\n      //     //     cls: msg.flags[\"ddb-game-log\"].cls,\n      //     //     flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n      //     //             `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n      //     //   }\n      //     // }\n      //     [MODULE_SHORT]: { \n      //       processed: true, \n      //       data: { msg, msgData },\n      //       rollMode: msgData.rollMode,\n      //       cls: msg.flags[\"ddb-game-log\"].cls,\n      //       flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n      //               `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n      //     }\n      //   }\n      // });\n      // if(usageResults){\n      //   LogUtil.log(\"Usage of attack activity was not completed\", [selectedActivity]);\n      // }\n      // usageResults.message.rolls = [activityRolls[0]];\n      // workflow.itemCardUuid = usageResults.message.uuid;\n      // if (workflow.suspended) workflow.unSuspend.bind(workflow)({ attackRoll: activityRolls[0] })\n      // await workflow.setAttackRoll(activityRolls[0]);\n      // // activityRolls[0] = await MidiQOL.processAttackRollBonusFlags.bind(workflow)();\n      // if ([\"formulaadv\", \"adv\"].includes(MidiQOL.configSettings.rollAlternate)) addAdvAttribution(activityRolls[0], workflow.attackAdvAttribution);\n      // await workflow.setAttackRoll(activityRolls[0]);\n\n      // // activityRolls[0] = await workflow.processAttackRollBonusFlags.bind(workflow)();\n      // // await workflow.setAttackRoll(activityRolls[0]);\n      // // await workflow.WorkflowState_AttackRollComplete();\n      // // await workflow.checkHits();\n\n      // const midiApi = game.modules.get(\"midi-qol\")?.api;\n      // LogUtil.log(\"> MidiQOL API\", [MidiQOL]); \n\n      // /**********/\n      // if (MidiQOL.configSettings.autoCheckHit !== \"none\") {\n      //   await workflow.displayAttackRoll({ GMOnlyAttackRoll: true });\n      //   await workflow.checkHits();\n      //   await workflow.displayAttackRoll();\n  \n      //   const rollMode = config.message.rollMode;\n      //   workflow.whisperAttackCard = MidiQOL.configSettings.autoCheckHit === \"whisper\" || rollMode === CONST.DICE_ROLL_MODES.BLIND || rollMode === CONST.DICE_ROLL_MODES.PRIVATE;\n      //   if (workflow.aborted){\n      //     return workflow.WorkflowState_Abort;\n      //   }\n      //   await workflow.displayHits(workflow.whisperAttackCard);\n      // } else {\n      //   await workflow.displayAttackRoll();\n      // }\n      // /**********/\n\n      // LogUtil.log(\"triggerAttack - after use\", [usageResults, selectedActivity.utils]);\n    }else{\n      // set the template for the chat message\n      oldTemplate = selectedActivity.metadata.usage.chatCard;\n      selectedActivity.metadata.usage.chatCard = `modules/${MODULE_SHORT}/templates/ddb-attack-info.hbs`;\n\n      activityRolls = await selectedActivity.rollAttack(config.roll, config.dialog, { \n        create: false,\n        data: {\n          ...config.message \n        }\n      });\n      if(activityRolls.length < 1){ return; }\n\n      LogUtil.log(\"triggerAttack - before\", [activityRolls, msg.rolls, GeneralUtil.getTargetDescriptors({user: game.user})]);\n      // copy terms from the original roll and recalculate\n      if(SettingsUtil.get(SETTINGS.foundryRollModifiers.tag)){\n        activityRolls[0] = RollUtil.replaceDie(activityRolls[0], msg.rolls[0]);\n      }else{\n        activityRolls[0] = RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n      }\n      LogUtil.log(\"triggerAttack - after\", [activityRolls, msg.rolls]);\n\n      /*\n      usageResults = await selectedActivity.use({\n        ...config.roll,\n        subsequentActions: false\n      }, config.dialog, { \n        create: false,\n        data: { \n          // rollMsg: msg.content, \n          rolls: [activityRolls[0]],\n          user: config.message.user,\n          speaker: config.message.speaker,\n          flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                      `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`,\n          flags: {\n            rsr5e: config.roll.flags.rsr5e,\n            [MODULE_SHORT]: { \n              processed: true, \n              data: { msg, msgData },\n              rollMode: msgData.rollMode,\n              cls: msg.flags[\"ddb-game-log\"].cls,\n              flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                      `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n            }\n          }\n        }\n      })\n      */\n      \n      config.roll.subsequentActions = false;\n      usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n        create: false,\n        data: { \n          // rollMsg: msg.content, \n          rolls: [activityRolls[0]],\n          user: config.message.user,\n          speaker: config.message.speaker,\n          flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                      `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`,\n          flags: {\n            rsr5e: config.roll.flags.rsr5e,\n            [MODULE_SHORT]: { \n              processed: true, \n              data: { msg, msgData },\n              rollMode: msgData.rollMode,\n              cls: msg.flags[\"ddb-game-log\"].cls,\n              flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n                      `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n            }\n          }\n        }\n      });\n      \n\n    }\n\n    // usageResults.message.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: game.user});\n    usageResults.message.flags = usageResults.message.flags ?? {};\n    // usageResults.message.rolls = activityRolls;\n    LogUtil.log(\"triggerAttack - before card\", [activityRolls, usageResults.message]);  \n\n    if(!isMidiOn){\n      const card = await ChatMessage.create(usageResults.message, { rollMode: msgData.rollMode });\n      LogUtil.log(\"USAGE RESULTS\", [card, usageResults, config.message, selectedActivity.metadata]);\n    }\n    \n    // if(workflow){\n    //   workflow.itemCardUuid = card.uuid;\n    //   workflow.itemCardId = card.id;\n    //   // workflow.attackCardData = card;\n    //   workflow.attackRoll = activityRolls[0];\n    //   // workflow.processAttackRoll();\n    // }\n\n    // set the template back to normal\n    if(!isMidiOn){\n      selectedActivity.metadata.usage.chatCard = oldTemplate;\n    }\n  }\n\n  /**\n   * If DDB Gamelog message is a damage roll, find the activity\n   * and roll the appropriate method to trigger associated automations \n   * @param {Activity} selectedActivity \n   * @param {ChatMessage} msg \n   * @param {object} msgData \n   * @param {object} config \n   * @returns \n   */\n  static triggerDamage = async(selectedActivity, msg, msgData, config) => {\n    const SETTINGS = getSettings();\n    const isMidiOn = GeneralUtil.isModuleOn(\"midi-qol\");\n    let usageResults, activityRolls, workflow;\n\n    if(!selectedActivity){\n      throw new Error('No associated activity found.');\n    }\n    workflow = isMidiOn ? selectedActivity.workflow : null;\n\n    if(isMidiOn){\n      if(!selectedActivity.attack){\n        LogUtil.warn(\"Damage only roll not implemented\");\n      }else{\n        if(!workflow){\n          LogUtil.error(\"Attack workflow not found for damage roll\", [selectedActivity]);\n          return;\n        }\n        activityRolls = await selectedActivity.rollDamage({\n          ...config.roll,\n          midiOptions: {\n            workflowOptions: { damageRollDSN: false }\n          }\n        }, \n        config.dialog, \n        { \n          create: false,\n          data: {\n            ...config.message \n          }\n        });\n        if(activityRolls.length < 1){ return; }\n        \n        // copy terms from the original roll and recalculate\n        if(SettingsUtil.get(SETTINGS.foundryRollModifiers.tag)){\n          activityRolls[0] = RollUtil.replaceDie(activityRolls[0], msg.rolls[0]);\n        }else{\n          activityRolls[0] = RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n        }\n\n        await workflow.setDamageRoll(activityRolls[0]);\n        await workflow.WorkflowState_DamageRollComplete();\n        await workflow.setDamageRoll(activityRolls[0]);\n      }\n\n    }else{ \n      let activityRolls = [];\n\n      if(!selectedActivity.attack){\n        // usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n        //   create: false\n        // });\n        usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n          create: false,\n          data: {\n            flags: {\n              dnd5e: {\n                // targets: GeneralUtil.getTargetDescriptors({user: game.user}),\n                messageType: \"roll\",\n                roll: { type: \"damage\" }\n              }\n            }\n          }\n          // ,\n          // data: { \n          //   // rollMsg: msg.content, \n          //   // rolls: [activityRolls[0]],\n          //   user: config.message.user,\n          //   speaker: config.message.speaker,\n          //   flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n          //               `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`,\n          //   flags: {\n          //     rsr5e: config.roll.flags.rsr5e,\n          //     [MODULE_SHORT]: { \n          //       processed: true, \n          //       data: { msg, msgData },\n          //       rollMode: msgData.rollMode,\n          //       cls: msg.flags[\"ddb-game-log\"].cls,\n          //       flavor: `<span class=\"crlngn item-name\">${selectedActivity.item.name}:</span> ` +\n          //               `<span class=\"crlngn ${msg.flags[\"ddb-game-log\"].cls.replace(\" \", \"\")}\">${msg.flags[\"ddb-game-log\"].cls}</span>`\n          //     }\n          //   }\n          // }\n        })\n        await ChatMessage.create(usageResults.message, {rollMode: msgData.rollMode }); \n      }\n      LogUtil.log(\"triggerDamage A\", [GeneralUtil.getTargetDescriptors()]);\n  \n      try{\n        // activityRolls = await selectedActivity.rollDamage({},{},{})\n        activityRolls = await selectedActivity.rollDamage({\n          flags: config.roll.flags,\n          consume: config.roll.consume,\n          formula: config.roll.formula,\n          user: config.roll.user\n        }, config.dialog, { \n          create: false,\n          data: {\n            ...config.message,\n            flags: {\n              ...config.message.flags,\n              dnd5e: {\n                ...config.message.flags?.dnd5e,\n                targets: GeneralUtil.getTargetDescriptors()\n              }\n            }\n          }\n        }); \n      }catch(e){\n        LogUtil.error(\"triggerDamage B\", [e]);\n      }\n\n      LogUtil.log(\"triggerDamage - activityRolls\", [activityRolls]);\n\n      if(activityRolls.length < 1){ return; }\n      RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n      \n      if(!usageResults){\n        usageResults = { message: config.message }\n      }\n  \n      usageResults.message.rolls = activityRolls; \n      usageResults.message.flags = usageResults.message.flags ?? {}; \n      usageResults.message.flags.rsr5e = {\n        processed: true,\n        quickRoll: false\n      }\n      \n      // config.roll.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: game.user});\n      config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.damage }; \n      config.message.flags = config.roll.flags;\n      config.message.flags = {\n        ...config.message,\n        dnd5e: {\n          ...config.roll.flags.dnd5e,\n          targets: GeneralUtil.getTargetDescriptors()\n        },\n        rsr5e: config.roll.flags.rsr5e\n      }; \n\n      LogUtil.log(\"triggerDamage - message config\", [config.message]);\n  \n      // await ChatMessage.create(config.message, {rollMode: msgData.rollMode });\n      await activityRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n      \n      if(!selectedActivity.attack){\n        config.message.user.targets.forEach(token => { \n          // if(token.actor.testUserPermission(config.message.user, \"OWNER\")){ \n          token.control({releaseOthers: false})\n          // } \n        }); \n      }\n\n      setTimeout(() => {\n        GeneralUtil.removeTemplateForItem(selectedActivity.item);\n      }, 3000); \n    }\n\n  }\n  \n  /**\n   * If DDB Gamelog message is an ability test (skill, save, check), trigger the appropriate roll\n   * Note: In theory, we could just post the original roll, but we'll \n   * use the appropriate roll method here for compatibility with other modules\n   * @param {string} testType \n   * @param {ChatMessage} msg \n   * @param {object} msgData \n   * @param {object} config \n   * @returns \n   */\n  static triggerAbilityTest = async(testType, msg, msgData, config) => {\n    const ability = GeneralUtil.parseDDBGLAbility(msg.flags[\"ddb-game-log\"].flavor);\n    let testRolls;\n\n    config.roll.flags.dnd5e.roll = {\n      type: testType===DDBGL_CLS.check.cls ? \"ability\" : \"save\"\n    };\n\n    if(ability){\n      config.roll.flags.dnd5e.roll = { \n        type: testType===DDBGL_CLS.check.cls ? ROLL_TYPES.abilityCheck : ROLL_TYPES.abilitySave,\n        ability: ability.abbrev\n      }; \n    }\n    config.message.flags = {\n      // ...config.message,\n      dnd5e: config.roll.flags.dnd5e,\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    // roll attack from activity without creating ChatMessage\n    if(testType===DDBGL_CLS.save.cls){\n      testRolls = await msgData.actor.rollSavingThrow({ ability: ability?.abbrev }, config.dialog, { create: false }); \n    }else if(testType===DDBGL_CLS.check.cls){\n      testRolls = await msgData.actor.rollAbilityCheck({ ability: ability?.abbrev }, config.dialog, { create: false }); \n      LogUtil.log(\"triggerAbilityTest\", [ testRolls, config.message ]); \n    }\n    \n    if(testRolls.length < 1){ return; }\n\n    // copy terms from the original roll and recalculate\n    RollUtil.replaceTerms(testRolls[0], msg.rolls[0]);\n\n    // Create message with the provided roll and msg data\n    await testRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n  }\n\n  /**\n   * If DDB Gamelog message is a heal roll, find the activity\n   * and roll the appropriate method to trigger associated automations \n   * @param {Activity} selectedActivity \n   * @param {object} config \n   * @returns \n   */\n  static triggerHeal = async(selectedActivity, msg, msgData, config) => {\n    let usageResults;\n    if(!selectedActivity){\n      throw new Error('No associated activity found.');\n    }\n\n    usageResults = await ActivityUtil.ddbglUse(selectedActivity, config.roll, config.dialog, { \n      create: false\n    });\n    LogUtil.log(\"ACTIVITY\", [usageResults]);\n    await ChatMessage.create(usageResults.message, {rollMode: msgData.rollMode }); \n\n    let activityRolls = await selectedActivity.rollDamage(config.roll, config.dialog, { \n      create: false, data: { flags: config.message.flags } \n    });\n\n    if(activityRolls.length < 1){ return; }\n    RollUtil.replaceTerms(activityRolls[0], msg.rolls[0]);\n  \n    if(!usageResults){\n      usageResults = { message: config.message }\n    }\n\n    usageResults.message.rolls = activityRolls; \n    usageResults.message.flags = usageResults.message.flags ?? {}; \n    usageResults.message.flags.rsr5e = {\n      processed: true,\n      quickRoll: false\n    }\n\n    // config specific to damage rolls\n    config.roll.flags.dnd5e.roll = { type: ROLL_TYPES.healing };\n    // config.roll.flags.dnd5e.targets = GeneralUtil.getTargetDescriptors({user: game.user});\n    // config.message.flags = config.roll.flags;\n    config.message.flags = {\n      ...config.message,\n      dnd5e: config.roll.flags.dnd5e,\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    await activityRolls[0].toMessage(config.message, {rollMode: msgData.rollMode });\n  }\n\n  /**\n   * If DDB Gamelog message is a custom roll, just post it\n   * @param {object} config \n   */\n  static triggerCustomRoll = async(config, msg, actionName, msgData) => {\n    // config.message.flags = config.roll.flags;\n    config.message = {\n      ...config.message,\n      dnd5e: {\n        ...config.roll.flags.dnd5e\n      },\n      rsr5e: config.roll.flags.rsr5e\n    };\n\n    // Create message with the provided roll and msg data, without modifications\n    await msg.rolls[0].toMessage(config.message, { ...msgData });\n  }\n\n  /**\n   * Recalculate roll without rerolling\n   * @param {Roll} roll \n   * @returns \n   */\n  static resetRollGetters(roll) {\n    roll._total = roll._evaluateTotal();\n    roll.resetFormula();\n    return roll;\n  }\n\n  /**\n   * Modify the result of a roll\n   * @param {Roll} roll // roll whose terms will be replaced\n   * @param {Roll} replacer // Roll to use the terms from \n   * @returns {Roll}\n   */\n  static replaceTerms(roll, replacer){\n    roll.terms = replacer.terms;\n    roll._total = roll._evaluateTotal();\n    roll.resetFormula();\n    return roll;\n  }\n\n  static replaceDie(roll, replacer){\n    if(!replacer || !roll){ return roll; }\n    LogUtil.log(\"replaceDie\", [replacer, roll]);\n    \n    // Check if replacer.terms exists before trying to filter it\n    if (!replacer.terms) {\n      LogUtil.error(\"replaceDie - replacer.terms is undefined\", [replacer]);\n      return roll;\n    }\n    \n    const replacerDice = replacer.terms.filter(t => t instanceof Die || t.class === 'Die') || [];\n    const noDice = roll?.terms?.filter(t => !(t instanceof Die || t.class === 'Die')) || [];\n    roll.terms = [...replacerDice, ...noDice];\n\n    roll._total = roll._evaluateTotal();\n    roll.resetFormula();\n    return roll;\n  }\n\n  static getDialogSetting(defaultOption, config){\n    const SETTINGS = getSettings();\n    const skipConfig = SettingsUtil.get(SETTINGS.skipRollConfig.tag); \n    LogUtil.log(\"getDialogSetting\", [\"skip mode: \" + skipConfig, Main.keysPressed, config]); \n\n    if(config.flags?.[\"ddb-game-log\"] !== undefined){ \n      return false; // ddb gamelog is always skipped\n    }else{\n      switch(skipConfig){ \n        case 1: \n          return Main.keysPressed.indexOf(\"Shift\")==-1 ? false : true; // skip unless shift is pressed\n        default:\n          return defaultOption;\n      }\n    }\n  \n  }\n}\n","import { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { MODULE_SHORT } from \"../constants/General.mjs\";\n\nimport { HOOKS_CORE, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { getSettings } from \"../constants/Settings.mjs\";\nimport { ChatUtil } from \"./ChatUtil.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\nimport { SettingsUtil } from \"./SettingsUtil.mjs\";\nimport { SocketUtil } from \"./SocketUtil.mjs\";\n\nexport class Main {\n  static keysPressed = [];\n  static isMidiOn = false;\n  static areKeysPressed;\n\n  static init(){\n    Main.setupKeyListeners();\n    Main.registerHooks();\n  }\n\n  static addCSSLocalization(){\n    const locBtnPath = 'CRLNGN.dnd5e.chatCard.buttons';\n\n    LogUtil.log('Test', [game.i18n.translations, game.i18n.translations['CRLNGN']]);\n    LogUtil.log(`Full path being requested: ${locBtnPath}.attack`); \n    if (game.i18n.has(`${locBtnPath}.attack`)) {\n      // Key exists and should work\n      LogUtil.warn(`Key exists`);\n    } else {\n      LogUtil.warn(`Missing translation key: ${locBtnPath}.attack`);\n    }  \n    \n    GeneralUtil.addCSSVars('--crlngn-i18n-attack', game.i18n.localize(`${locBtnPath}.attack`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-damage', game.i18n.localize(`${locBtnPath}.damage`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-summons', game.i18n.localize(`${locBtnPath}.summons`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-healing', game.i18n.localize(`${locBtnPath}.healing`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-template', game.i18n.localize(`${locBtnPath}.template`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-consume', game.i18n.localize(`${locBtnPath}.consume`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-refund', game.i18n.localize(`${locBtnPath}.refund`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-macro', game.i18n.localize(`${locBtnPath}.macro`));\n    GeneralUtil.addCSSVars('--crlngn-i18n-save-dc', game.i18n.localize(`${locBtnPath}.savedc`));\n  }\n\n  static registerHooks(){\n    SocketUtil.initialize(() => {\n      LogUtil.log(\"SocketUtil - initialized with socket\", [SocketUtil.socket, game.system.utils.areKeysPressed]);\n      // Main.areKeysPressed = game.system.utils.areKeysPressed;\n    });\n    Hooks.once(HOOKS_CORE.INIT,()=>{\n      Main.isMidiOn = GeneralUtil.isModuleOn(\"midi-qol\");\n      LogUtil.log(\"Initiating module\", [], true);\n      document.querySelector(\"body\").classList.add(\"crlngn-ddbgl-chat\"); //add here for better rendering, remove later if needed\n      \n      SettingsUtil.registerSettings();\n      Main.registerActivityHooks();\n      Main.registerRollHooks();\n      Main.registerChatHooks();\n      Main.registerTemplateHooks(); \n    })\n\n    Hooks.once(HOOKS_CORE.READY, () => { \n      // Check if Foundry has socket support enabled\n      if (!game.socket) {\n        ui.notifications.error(\"⚠️ DDB Bridge: Foundry needs to be restarted to enable socket functionality.\", { permanent: true });\n        LogUtil.error(\"Foundry restart required to enable sockets.\");\n        return;\n      }\n\n      SettingsUtil.resetGamelogSettings();\n      Main.registerSocketFunction();\n      Main.addCSSLocalization();\n      ChatUtil.init();\n    });\n\n    Hooks.on(HOOKS_CORE.CLOSE_SETTINGS_CONFIG, () => {\n      SettingsUtil.resetGamelogSettings();\n    })\n  }\n\n  /**\n   * \n   */\n  static registerSocketFunction(){\n    SocketUtil.registerCall('DDBRoll', RollUtil.streamlineDDBRoll);\n  }\n\n  /**\n   * Listen to activity usage hooks\n   */\n  static registerActivityHooks(){\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, onPreUseActivity);\n    Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, onPostUseActivity);\n  }\n\n  /**\n   * Listen to roll hooks\n   */\n  static registerRollHooks(){\n    Hooks.on(HOOKS_DND5E.ROLL_ATTACK_V2, onRollAttack);\n    Hooks.on(HOOKS_DND5E.ROLL_DAMAGE_V2, onRollDamage);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_V2, onPreRoll);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, onPreRollAttack);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, onPreRollDamage);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, onPreRollSavingThrow);\n    // Hooks.on(HOOKS_CORE.RENDER_ROLL_RESOLVER, RollUtil.onRenderRollResolver);\n  }\n\n  /**\n   * Listen to ChatMessage hooks\n   */\n  static registerChatHooks(){\n    Hooks.on(HOOKS_DND5E.RENDER_CHAT_MESSAGE, onRenderChatMessage); \n    Hooks.on(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, onPreCreateChatMessage); \n    Hooks.on(HOOKS_CORE.CREATE_CHAT_MESSAGE, onCreateChatMessage); \n  }\n\n  /**\n   * Listen to template hooks\n   */\n  static registerTemplateHooks(){\n    Hooks.on(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, onRefreshTemplate); \n  }\n\n  static setupKeyListeners(){\n    // Listen to keydown event and store keys\n    window.addEventListener('keydown', (event) => {\n      const keyPressed = event.key;\n      const index = Main.keysPressed.indexOf(keyPressed);\n\n      if(index < 0){\n        Main.keysPressed.push(keyPressed);\n      }\n      // LogUtil.log(\"Keydown\", [Main.keysPressed]);\n    });\n\n    // Listen to keyup event and remove keys\n    window.addEventListener('keyup', (event) => {\n      const keyReleased = event.key;\n      const index = Main.keysPressed.indexOf(keyReleased);\n\n      if(index >= 0){\n        Main.keysPressed.splice(index,1);\n      }\n      // LogUtil.log(\"Keyup\", [Main.keysPressed]); \n    });\n  }\n\n}\n\n/**\n * Before activity.use() is fulfilled\n * @param {object} activity \n * @param {object} usageConfig \n * @param {object} dialogConfig \n * @param {object} msgConfig \n * @returns {Boolean}\n */\nconst onPreUseActivity = async (\n  activity, usageConfig, dialogConfig, msgConfig\n) => {\n\n  // By default, configuration dialog is disabled to speed up roll\n  // Allow configuration if Shift key is pressed\n  // if(Main.keysPressed.indexOf(\"Shift\")==-1){\n  //   dialogConfig.configure = false;\n  // }else{\n  //   dialogConfig.configure = true;\n  // }\n  // dialogConfig.configure = RollUtil.getDialogSetting(dialogConfig.configure, usageConfig);\n\n  LogUtil.log(HOOKS_DND5E.PRE_USE_ACTIVITY, [ usageConfig, dialogConfig, msgConfig, Main.keysPressed ]);\n\n  return true;\n}\n\n/**\n * After activity.use() is fulfilled\n * @param {*} activity \n * @param {*} usageConfig \n * @param {*} result \n * @returns {Boolean}\n */\nconst onPostUseActivity = async(\n  activity, usageConfig, result\n) => {\n  LogUtil.log(HOOKS_DND5E.POST_USE_ACTIVITY, [activity, usageConfig, result]);\n  return true;\n}\n\n/**\n * Right before a message is created. \n * @param {ChatMessage5e} chatMessage \n * @param {GenericObject} msgConfig \n * @param {GenericObject} options\n * @param {String} userId\n * @returns {Boolean}\n */\nconst onPreCreateChatMessage = (chatMessage, msgConfig, options, userId) => {\n  const SETTINGS = getSettings();\n  let isDdbGl = false;\n  let actor, ddbglCls, itemId, item, isProcessed=false;\n  \n  let msg = chatMessage;\n  ddbglCls = GeneralUtil.isModuleOn(\"ddb-game-log\") ? chatMessage.getFlag(\"ddb-game-log\",\"cls\")?.toLowerCase() || \"\" : \"\"; // does the flag exist?\n  isProcessed = chatMessage.getFlag(MODULE_SHORT, \"processed\") || false; \n\n  LogUtil.log(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, [ \n    ddbglCls, msg, msgConfig, options\n  ]);\n\n  if(ddbglCls && !isProcessed){ \n    actor = msgConfig.actor || game.actors.get(msgConfig.speaker.actor) || null;\n    itemId =  msgConfig.flags?.[\"ddb-game-log\"]?.[\"itemId\"] || \"\"; \n    msg.rolls = msg.rolls && msg.rolls.length > 0 ? [msg.rolls[0]] : [msgConfig.rolls[0]] || [];\n\n    LogUtil.log(\"onPreCreateChatMessage\", [msg.flags, msgConfig.flags]);\n    if(actor){\n      isDdbGl = true; \n      msg.flags = {\n        ...msg.flags,\n        ...msgConfig.flags\n      }\n      if(msg.flags[MODULE_SHORT]){\n        msg.flags[MODULE_SHORT].processed = true;\n        isProcessed = true;\n      }\n      const flavorElem = document.createElement(\"div\");\n      flavorElem.innerHTML = msgConfig.flavor;\n      let actionName = flavorElem?.querySelector(\"span:first-child\")?.innerHTML.replace(\":\",\"\");\n\n      item = actionName ? GeneralUtil.findItemFromActor(msgConfig.speaker.actor, itemId, actionName) : null;\n\n      if(!item && \n        ( ddbglCls === DDBGL_CLS.toHit.cls || \n          ddbglCls === DDBGL_CLS.damage.cls || \n          ddbglCls === DDBGL_CLS.heal.cls) ){ \n        LogUtil.error(\"Could not find an item for the roll\", [ddbglCls, actionName, actor.items]);\n        return true; \n      }else{\n        \n        const user = GeneralUtil.getUserFromActor(msg.speaker?.actor);\n        const playerMakesRoll = SettingsUtil.get(SETTINGS.ddbRollOwnership.tag) == 2;\n        // destructure the roll before sending via socket\n        // msgConfig = JSON.stringify(msgConfig);\n        // msg.rolls = msg.rolls.map(roll => roll.toJSON());\n\n        LogUtil.log(\"Main - onPreCreateChatMessage\", [msg, user, playerMakesRoll]);\n\n        // Forward the action to a player or keep it on GM depending on current settings\n        if(user && playerMakesRoll){\n          LogUtil.log(\"Main - Before serialization\", [msg]);\n          const serializedMsg = SocketUtil.serializeForTransport(msg);\n          LogUtil.log(\"Main - After serialization\", [serializedMsg]);\n          LogUtil.log(\"CHECK ROLL\", [playerMakesRoll, user, serializedMsg, msgConfig]);\n          // SocketUtil.execForUser('DDBRoll', user.id, ddbglCls, itemId, actionName, msg, msgConfig); \n          SocketUtil.execForUser('DDBRoll', user.id, ddbglCls, itemId, actionName, serializedMsg, msgConfig); \n        }else{\n          LogUtil.log(\"Main - No serialization\", [msg]);\n          RollUtil.streamlineDDBRoll(ddbglCls, itemId, actionName, msg, msgConfig);\n        }\n      }\n    }else{ \n      LogUtil.warn(\"Could not find the actor from DDB Gamelog roll\");\n      return true;\n    }\n  }\n\n  return !isDdbGl || isProcessed;\n}\n\nconst onCreateChatMessage = (chatMessage, options, userId) => {\n  LogUtil.log(HOOKS_CORE.CREATE_CHAT_MESSAGE,[chatMessage, options, userId]);   \n}\n\n/**\n * Triggered when a message is rendered\n * @param {ChatMessage} msg\n * @param {HTMLElement} html\n */\nconst onRenderChatMessage = (chatMessage, html) => { \n  LogUtil.log(HOOKS_DND5E.RENDER_CHAT_MESSAGE,[chatMessage, html]);\n\n  ChatUtil.enrichCard(chatMessage, html);\n}\n\nconst onPreRoll = (rollConfig, dialogConfig, messageConfig) => {\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_V2, [rollConfig, dialogConfig, messageConfig]);\n\n  // dialogConfig.configure = false;\n  dialogConfig.configure = RollUtil.getDialogSetting(dialogConfig.configure, rollConfig);\n\n  return;\n}\n\nconst onPreRollSavingThrow = (rollConfig, dialogConfig, messageConfig) => {\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_SAVING_THROW, [rollConfig, dialogConfig, messageConfig]);\n\n  return;\n}\n\n/**\n * Before the attack roll\n * @param {*} config \n * @param {*} dialog \n * @param {*} message \n * @returns \n */\nconst onPreRollAttack = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, [message, dialogConfig, config]);\n\n  return true;\n}\n\n/**\n * Before the damage roll\n * @param {*} config \n * @param {*} dialog \n * @param {*} message \n * @returns \n */\nconst onPreRollDamage = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, [config, dialogConfig, message, Main.keysPressed]);\n  // By default, configuration dialog is disabled to speed up roll\n  // Allow configuration if Shift key is pressed\n  // if(Main.keysPressed.indexOf(\"Shift\")==-1){\n  //   dialogConfig.configure = false;\n  // }\n  return true;\n}\n\nconst onRollDamage = (\n  config, dialogConfig, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.ROLL_DAMAGE_V2, [game]);\n  // canvas.templates.deleteMany(canvas.templates.placeables.map(o =>o.id),{});\n}\n\n/**\n * rollAttackV2 hook callback\n * @param {D20Roll[]} rolls \n * @param {AttackRollData} data\n */\nconst onRollAttack = async(rolls, data, c, d) => {\n  LogUtil.log(HOOKS_DND5E.ROLL_ATTACK_V2, [rolls, data, c, d]);\n\n  const isMidiOn = GeneralUtil.isModuleOn('midi-qol');\n  if(isMidiOn){\n    LogUtil.log(HOOKS_DND5E.ROLL_ATTACK_V2, [MidiQOL.getWorkflow]);\n    // RollUtil.replaceDie(rolls[0], )\n  }\n}\n\n/**\n * TEMPLATES\n */\nconst onRefreshTemplate = (template, options) => {\n  // LogUtil.log(HOOKS_CORE.REFRESH_MEASURED_TEMPLATE, [template, options]);\n\n  if(!template.isOwner){ return; }\n\n  const templateTargeting = SettingsUtil.get(\"template-auto-target\");\n  let maxDisposition = 3;\n\n  switch(templateTargeting){\n    case 1:\n      maxDisposition = 3; break;\n    case 2: \n      maxDisposition = 0; break;\n    default: \n      return;\n  }\n\n  canvas.tokens.placeables[0]?.setTarget(false, { releaseOthers: true });\n  for(let token of canvas.tokens.placeables){\n    if(token.document.disposition <= maxDisposition && template.shape.contains(token.center.x-template.x,token.center.y-template.y)){\n      token.setTarget(!token.isTargeted, { releaseOthers: false });\n    }\n  }\n}","import \"./styles/vars.css\";\nimport \"./styles/chat-v12.css\";\nimport \"./styles/chat.css\";\nimport \"./styles/main.css\";\nimport { Main } from \"./components/Main.mjs\";\n\nMain.init();"],"names":["DDBGL_CLS","MODULE_ID","MODULE_SHORT","DEBUG_TAG","ROLL_TYPES","CHAR_ABILITIES","HOOKS_CORE","HOOKS_DND5E","HOOKS_SOCKET","SETTING_INPUT","SETTING_SCOPE","getSettings","_LogUtil","ref","data","bypassSettings","debugSetting","options","_a","__publicField","LogUtil","GeneralUtil","user","gm","us","targetTokens","itemUuid","actorId","moduleName","module","flavorStr","abilityObj","ddbglStr","ab","mode","item","removeTemplateSettingOn","SettingsUtil","templates","mt","i","owner","actor","pl","parent","selector","selectedTargets","target","_b","targets","token","name","img","system","uuid","statuses","ac","itemId","actionName","it","varName","varValue","bodyStyle","body","cssText","ruleStart","ruleEnd","declarations","decl","varsMap","parts","value","newRuleContent","newCss","_SettingsUtil","SETTINGS","entry","setting","settingObj","settingName","selectedSetting","newValue","settingTag","itemDescriptionsOn","forceSettingsOn","_ChatUtil","chatMessage","html","_c","_d","_e","_f","_g","_h","chatStyles","rollType","elem","saveButtons","button","visibleDCSpan","hiddenDCSpan","flavorText","newFlavor","ChatUtil","ActivityUtil","ddbglCls","selectedActivity","activities","hasAttack","hasSave","activityByType","type","activity","act","usage","dialog","message","usageConfig","dialogConfig","messageConfig","e","updates","results","effect","deleted","context","rollData","_buildRollData","card","rolls","r","tooltipHtml","hasTarget","isSuccess","isFailure","_SocketUtil","safeData","serialized","error","result","roll","callbackFunc","func","callback","handler","parameters","userId","executionKey","resp","SocketUtil","_RollUtil","replacer","replacerDice","t","noDice","defaultOption","config","skipConfig","Main","messageData","msg","msgData","originalRoll","usageResults","activityRolls","oldTemplate","isMidiOn","workflow","testType","ability","testRolls","RollUtil","_Main","locBtnPath","onPreUseActivity","onPostUseActivity","onRollAttack","onRollDamage","onPreRoll","onPreRollAttack","onPreRollDamage","onPreRollSavingThrow","onRenderChatMessage","onPreCreateChatMessage","onCreateChatMessage","onRefreshTemplate","event","keyPressed","keyReleased","index","msgConfig","isDdbGl","isProcessed","flavorElem","playerMakesRoll","serializedMsg","rollConfig","c","d","template","templateTargeting","maxDisposition"],"mappings":"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"}